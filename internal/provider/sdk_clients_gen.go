// Code generated by internal/generate/sdk_clients/main.go; DO NOT EDIT.

package provider

import (
	"context"
	"errors"
	_ "unsafe"

	aws_sdkv2 "github.com/aws/aws-sdk-go-v2/aws"
	accessanalyzer_sdkv2 "github.com/aws/aws-sdk-go-v2/service/accessanalyzer"
	account_sdkv2 "github.com/aws/aws-sdk-go-v2/service/account"
	acm_sdkv2 "github.com/aws/aws-sdk-go-v2/service/acm"
	acmpca_sdkv2 "github.com/aws/aws-sdk-go-v2/service/acmpca"
	amp_sdkv2 "github.com/aws/aws-sdk-go-v2/service/amp"
	amplify_sdkv2 "github.com/aws/aws-sdk-go-v2/service/amplify"
	amplifybackend_sdkv2 "github.com/aws/aws-sdk-go-v2/service/amplifybackend"
	amplifyuibuilder_sdkv2 "github.com/aws/aws-sdk-go-v2/service/amplifyuibuilder"
	apigateway_sdkv2 "github.com/aws/aws-sdk-go-v2/service/apigateway"
	apigatewaymanagementapi_sdkv2 "github.com/aws/aws-sdk-go-v2/service/apigatewaymanagementapi"
	apigatewayv2_sdkv2 "github.com/aws/aws-sdk-go-v2/service/apigatewayv2"
	appconfig_sdkv2 "github.com/aws/aws-sdk-go-v2/service/appconfig"
	appconfigdata_sdkv2 "github.com/aws/aws-sdk-go-v2/service/appconfigdata"
	appfabric_sdkv2 "github.com/aws/aws-sdk-go-v2/service/appfabric"
	appflow_sdkv2 "github.com/aws/aws-sdk-go-v2/service/appflow"
	appintegrations_sdkv2 "github.com/aws/aws-sdk-go-v2/service/appintegrations"
	applicationautoscaling_sdkv2 "github.com/aws/aws-sdk-go-v2/service/applicationautoscaling"
	applicationcostprofiler_sdkv2 "github.com/aws/aws-sdk-go-v2/service/applicationcostprofiler"
	applicationdiscoveryservice_sdkv2 "github.com/aws/aws-sdk-go-v2/service/applicationdiscoveryservice"
	applicationinsights_sdkv2 "github.com/aws/aws-sdk-go-v2/service/applicationinsights"
	applicationsignals_sdkv2 "github.com/aws/aws-sdk-go-v2/service/applicationsignals"
	appmesh_sdkv2 "github.com/aws/aws-sdk-go-v2/service/appmesh"
	apprunner_sdkv2 "github.com/aws/aws-sdk-go-v2/service/apprunner"
	appstream_sdkv2 "github.com/aws/aws-sdk-go-v2/service/appstream"
	appsync_sdkv2 "github.com/aws/aws-sdk-go-v2/service/appsync"
	apptest_sdkv2 "github.com/aws/aws-sdk-go-v2/service/apptest"
	arczonalshift_sdkv2 "github.com/aws/aws-sdk-go-v2/service/arczonalshift"
	artifact_sdkv2 "github.com/aws/aws-sdk-go-v2/service/artifact"
	athena_sdkv2 "github.com/aws/aws-sdk-go-v2/service/athena"
	auditmanager_sdkv2 "github.com/aws/aws-sdk-go-v2/service/auditmanager"
	autoscaling_sdkv2 "github.com/aws/aws-sdk-go-v2/service/autoscaling"
	autoscalingplans_sdkv2 "github.com/aws/aws-sdk-go-v2/service/autoscalingplans"
	b2bi_sdkv2 "github.com/aws/aws-sdk-go-v2/service/b2bi"
	backup_sdkv2 "github.com/aws/aws-sdk-go-v2/service/backup"
	backupgateway_sdkv2 "github.com/aws/aws-sdk-go-v2/service/backupgateway"
	batch_sdkv2 "github.com/aws/aws-sdk-go-v2/service/batch"
	bcmdataexports_sdkv2 "github.com/aws/aws-sdk-go-v2/service/bcmdataexports"
	bedrock_sdkv2 "github.com/aws/aws-sdk-go-v2/service/bedrock"
	bedrockagent_sdkv2 "github.com/aws/aws-sdk-go-v2/service/bedrockagent"
	bedrockagentruntime_sdkv2 "github.com/aws/aws-sdk-go-v2/service/bedrockagentruntime"
	bedrockruntime_sdkv2 "github.com/aws/aws-sdk-go-v2/service/bedrockruntime"
	billingconductor_sdkv2 "github.com/aws/aws-sdk-go-v2/service/billingconductor"
	braket_sdkv2 "github.com/aws/aws-sdk-go-v2/service/braket"
	budgets_sdkv2 "github.com/aws/aws-sdk-go-v2/service/budgets"
	chatbot_sdkv2 "github.com/aws/aws-sdk-go-v2/service/chatbot"
	chime_sdkv2 "github.com/aws/aws-sdk-go-v2/service/chime"
	chimesdkidentity_sdkv2 "github.com/aws/aws-sdk-go-v2/service/chimesdkidentity"
	chimesdkmediapipelines_sdkv2 "github.com/aws/aws-sdk-go-v2/service/chimesdkmediapipelines"
	chimesdkmeetings_sdkv2 "github.com/aws/aws-sdk-go-v2/service/chimesdkmeetings"
	chimesdkmessaging_sdkv2 "github.com/aws/aws-sdk-go-v2/service/chimesdkmessaging"
	chimesdkvoice_sdkv2 "github.com/aws/aws-sdk-go-v2/service/chimesdkvoice"
	cleanrooms_sdkv2 "github.com/aws/aws-sdk-go-v2/service/cleanrooms"
	cleanroomsml_sdkv2 "github.com/aws/aws-sdk-go-v2/service/cleanroomsml"
	cloud9_sdkv2 "github.com/aws/aws-sdk-go-v2/service/cloud9"
	cloudcontrol_sdkv2 "github.com/aws/aws-sdk-go-v2/service/cloudcontrol"
	clouddirectory_sdkv2 "github.com/aws/aws-sdk-go-v2/service/clouddirectory"
	cloudformation_sdkv2 "github.com/aws/aws-sdk-go-v2/service/cloudformation"
	cloudfront_sdkv2 "github.com/aws/aws-sdk-go-v2/service/cloudfront"
	cloudfrontkeyvaluestore_sdkv2 "github.com/aws/aws-sdk-go-v2/service/cloudfrontkeyvaluestore"
	cloudhsm_sdkv2 "github.com/aws/aws-sdk-go-v2/service/cloudhsm"
	cloudhsmv2_sdkv2 "github.com/aws/aws-sdk-go-v2/service/cloudhsmv2"
	cloudsearch_sdkv2 "github.com/aws/aws-sdk-go-v2/service/cloudsearch"
	cloudsearchdomain_sdkv2 "github.com/aws/aws-sdk-go-v2/service/cloudsearchdomain"
	cloudtrail_sdkv2 "github.com/aws/aws-sdk-go-v2/service/cloudtrail"
	cloudtraildata_sdkv2 "github.com/aws/aws-sdk-go-v2/service/cloudtraildata"
	cloudwatch_sdkv2 "github.com/aws/aws-sdk-go-v2/service/cloudwatch"
	cloudwatchevents_sdkv2 "github.com/aws/aws-sdk-go-v2/service/cloudwatchevents"
	cloudwatchlogs_sdkv2 "github.com/aws/aws-sdk-go-v2/service/cloudwatchlogs"
	codeartifact_sdkv2 "github.com/aws/aws-sdk-go-v2/service/codeartifact"
	codebuild_sdkv2 "github.com/aws/aws-sdk-go-v2/service/codebuild"
	codecatalyst_sdkv2 "github.com/aws/aws-sdk-go-v2/service/codecatalyst"
	codecommit_sdkv2 "github.com/aws/aws-sdk-go-v2/service/codecommit"
	codeconnections_sdkv2 "github.com/aws/aws-sdk-go-v2/service/codeconnections"
	codedeploy_sdkv2 "github.com/aws/aws-sdk-go-v2/service/codedeploy"
	codeguruprofiler_sdkv2 "github.com/aws/aws-sdk-go-v2/service/codeguruprofiler"
	codegurureviewer_sdkv2 "github.com/aws/aws-sdk-go-v2/service/codegurureviewer"
	codegurusecurity_sdkv2 "github.com/aws/aws-sdk-go-v2/service/codegurusecurity"
	codepipeline_sdkv2 "github.com/aws/aws-sdk-go-v2/service/codepipeline"
	codestar_sdkv2 "github.com/aws/aws-sdk-go-v2/service/codestar"
	codestarconnections_sdkv2 "github.com/aws/aws-sdk-go-v2/service/codestarconnections"
	codestarnotifications_sdkv2 "github.com/aws/aws-sdk-go-v2/service/codestarnotifications"
	cognitoidentity_sdkv2 "github.com/aws/aws-sdk-go-v2/service/cognitoidentity"
	cognitoidentityprovider_sdkv2 "github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider"
	cognitosync_sdkv2 "github.com/aws/aws-sdk-go-v2/service/cognitosync"
	comprehend_sdkv2 "github.com/aws/aws-sdk-go-v2/service/comprehend"
	comprehendmedical_sdkv2 "github.com/aws/aws-sdk-go-v2/service/comprehendmedical"
	computeoptimizer_sdkv2 "github.com/aws/aws-sdk-go-v2/service/computeoptimizer"
	configservice_sdkv2 "github.com/aws/aws-sdk-go-v2/service/configservice"
	connect_sdkv2 "github.com/aws/aws-sdk-go-v2/service/connect"
	connectcampaigns_sdkv2 "github.com/aws/aws-sdk-go-v2/service/connectcampaigns"
	connectcases_sdkv2 "github.com/aws/aws-sdk-go-v2/service/connectcases"
	connectcontactlens_sdkv2 "github.com/aws/aws-sdk-go-v2/service/connectcontactlens"
	connectparticipant_sdkv2 "github.com/aws/aws-sdk-go-v2/service/connectparticipant"
	controlcatalog_sdkv2 "github.com/aws/aws-sdk-go-v2/service/controlcatalog"
	controltower_sdkv2 "github.com/aws/aws-sdk-go-v2/service/controltower"
	costandusagereportservice_sdkv2 "github.com/aws/aws-sdk-go-v2/service/costandusagereportservice"
	costexplorer_sdkv2 "github.com/aws/aws-sdk-go-v2/service/costexplorer"
	costoptimizationhub_sdkv2 "github.com/aws/aws-sdk-go-v2/service/costoptimizationhub"
	customerprofiles_sdkv2 "github.com/aws/aws-sdk-go-v2/service/customerprofiles"
	databasemigrationservice_sdkv2 "github.com/aws/aws-sdk-go-v2/service/databasemigrationservice"
	databrew_sdkv2 "github.com/aws/aws-sdk-go-v2/service/databrew"
	dataexchange_sdkv2 "github.com/aws/aws-sdk-go-v2/service/dataexchange"
	datapipeline_sdkv2 "github.com/aws/aws-sdk-go-v2/service/datapipeline"
	datasync_sdkv2 "github.com/aws/aws-sdk-go-v2/service/datasync"
	datazone_sdkv2 "github.com/aws/aws-sdk-go-v2/service/datazone"
	dax_sdkv2 "github.com/aws/aws-sdk-go-v2/service/dax"
	deadline_sdkv2 "github.com/aws/aws-sdk-go-v2/service/deadline"
	detective_sdkv2 "github.com/aws/aws-sdk-go-v2/service/detective"
	devicefarm_sdkv2 "github.com/aws/aws-sdk-go-v2/service/devicefarm"
	devopsguru_sdkv2 "github.com/aws/aws-sdk-go-v2/service/devopsguru"
	directconnect_sdkv2 "github.com/aws/aws-sdk-go-v2/service/directconnect"
	directoryservice_sdkv2 "github.com/aws/aws-sdk-go-v2/service/directoryservice"
	dlm_sdkv2 "github.com/aws/aws-sdk-go-v2/service/dlm"
	docdb_sdkv2 "github.com/aws/aws-sdk-go-v2/service/docdb"
	docdbelastic_sdkv2 "github.com/aws/aws-sdk-go-v2/service/docdbelastic"
	drs_sdkv2 "github.com/aws/aws-sdk-go-v2/service/drs"
	dynamodb_sdkv2 "github.com/aws/aws-sdk-go-v2/service/dynamodb"
	dynamodbstreams_sdkv2 "github.com/aws/aws-sdk-go-v2/service/dynamodbstreams"
	ebs_sdkv2 "github.com/aws/aws-sdk-go-v2/service/ebs"
	ec2_sdkv2 "github.com/aws/aws-sdk-go-v2/service/ec2"
	ec2instanceconnect_sdkv2 "github.com/aws/aws-sdk-go-v2/service/ec2instanceconnect"
	ecr_sdkv2 "github.com/aws/aws-sdk-go-v2/service/ecr"
	ecrpublic_sdkv2 "github.com/aws/aws-sdk-go-v2/service/ecrpublic"
	ecs_sdkv2 "github.com/aws/aws-sdk-go-v2/service/ecs"
	efs_sdkv2 "github.com/aws/aws-sdk-go-v2/service/efs"
	eks_sdkv2 "github.com/aws/aws-sdk-go-v2/service/eks"
	eksauth_sdkv2 "github.com/aws/aws-sdk-go-v2/service/eksauth"
	elasticache_sdkv2 "github.com/aws/aws-sdk-go-v2/service/elasticache"
	elasticbeanstalk_sdkv2 "github.com/aws/aws-sdk-go-v2/service/elasticbeanstalk"
	elasticinference_sdkv2 "github.com/aws/aws-sdk-go-v2/service/elasticinference"
	elasticloadbalancing_sdkv2 "github.com/aws/aws-sdk-go-v2/service/elasticloadbalancing"
	elasticloadbalancingv2_sdkv2 "github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2"
	elasticsearchservice_sdkv2 "github.com/aws/aws-sdk-go-v2/service/elasticsearchservice"
	elastictranscoder_sdkv2 "github.com/aws/aws-sdk-go-v2/service/elastictranscoder"
	emr_sdkv2 "github.com/aws/aws-sdk-go-v2/service/emr"
	emrcontainers_sdkv2 "github.com/aws/aws-sdk-go-v2/service/emrcontainers"
	emrserverless_sdkv2 "github.com/aws/aws-sdk-go-v2/service/emrserverless"
	entityresolution_sdkv2 "github.com/aws/aws-sdk-go-v2/service/entityresolution"
	eventbridge_sdkv2 "github.com/aws/aws-sdk-go-v2/service/eventbridge"
	evidently_sdkv2 "github.com/aws/aws-sdk-go-v2/service/evidently"
	finspace_sdkv2 "github.com/aws/aws-sdk-go-v2/service/finspace"
	finspacedata_sdkv2 "github.com/aws/aws-sdk-go-v2/service/finspacedata"
	firehose_sdkv2 "github.com/aws/aws-sdk-go-v2/service/firehose"
	fis_sdkv2 "github.com/aws/aws-sdk-go-v2/service/fis"
	fms_sdkv2 "github.com/aws/aws-sdk-go-v2/service/fms"
	forecast_sdkv2 "github.com/aws/aws-sdk-go-v2/service/forecast"
	forecastquery_sdkv2 "github.com/aws/aws-sdk-go-v2/service/forecastquery"
	frauddetector_sdkv2 "github.com/aws/aws-sdk-go-v2/service/frauddetector"
	freetier_sdkv2 "github.com/aws/aws-sdk-go-v2/service/freetier"
	fsx_sdkv2 "github.com/aws/aws-sdk-go-v2/service/fsx"
	gamelift_sdkv2 "github.com/aws/aws-sdk-go-v2/service/gamelift"
	glacier_sdkv2 "github.com/aws/aws-sdk-go-v2/service/glacier"
	globalaccelerator_sdkv2 "github.com/aws/aws-sdk-go-v2/service/globalaccelerator"
	glue_sdkv2 "github.com/aws/aws-sdk-go-v2/service/glue"
	grafana_sdkv2 "github.com/aws/aws-sdk-go-v2/service/grafana"
	greengrass_sdkv2 "github.com/aws/aws-sdk-go-v2/service/greengrass"
	greengrassv2_sdkv2 "github.com/aws/aws-sdk-go-v2/service/greengrassv2"
	groundstation_sdkv2 "github.com/aws/aws-sdk-go-v2/service/groundstation"
	guardduty_sdkv2 "github.com/aws/aws-sdk-go-v2/service/guardduty"
	health_sdkv2 "github.com/aws/aws-sdk-go-v2/service/health"
	healthlake_sdkv2 "github.com/aws/aws-sdk-go-v2/service/healthlake"
	iam_sdkv2 "github.com/aws/aws-sdk-go-v2/service/iam"
	identitystore_sdkv2 "github.com/aws/aws-sdk-go-v2/service/identitystore"
	imagebuilder_sdkv2 "github.com/aws/aws-sdk-go-v2/service/imagebuilder"
	inspector_sdkv2 "github.com/aws/aws-sdk-go-v2/service/inspector"
	inspector2_sdkv2 "github.com/aws/aws-sdk-go-v2/service/inspector2"
	inspectorscan_sdkv2 "github.com/aws/aws-sdk-go-v2/service/inspectorscan"
	internetmonitor_sdkv2 "github.com/aws/aws-sdk-go-v2/service/internetmonitor"
	iot_sdkv2 "github.com/aws/aws-sdk-go-v2/service/iot"
	iot1clickdevicesservice_sdkv2 "github.com/aws/aws-sdk-go-v2/service/iot1clickdevicesservice"
	iot1clickprojects_sdkv2 "github.com/aws/aws-sdk-go-v2/service/iot1clickprojects"
	iotanalytics_sdkv2 "github.com/aws/aws-sdk-go-v2/service/iotanalytics"
	iotdataplane_sdkv2 "github.com/aws/aws-sdk-go-v2/service/iotdataplane"
	iotdeviceadvisor_sdkv2 "github.com/aws/aws-sdk-go-v2/service/iotdeviceadvisor"
	iotevents_sdkv2 "github.com/aws/aws-sdk-go-v2/service/iotevents"
	ioteventsdata_sdkv2 "github.com/aws/aws-sdk-go-v2/service/ioteventsdata"
	iotfleethub_sdkv2 "github.com/aws/aws-sdk-go-v2/service/iotfleethub"
	iotfleetwise_sdkv2 "github.com/aws/aws-sdk-go-v2/service/iotfleetwise"
	iotjobsdataplane_sdkv2 "github.com/aws/aws-sdk-go-v2/service/iotjobsdataplane"
	iotsecuretunneling_sdkv2 "github.com/aws/aws-sdk-go-v2/service/iotsecuretunneling"
	iotsitewise_sdkv2 "github.com/aws/aws-sdk-go-v2/service/iotsitewise"
	iotthingsgraph_sdkv2 "github.com/aws/aws-sdk-go-v2/service/iotthingsgraph"
	iottwinmaker_sdkv2 "github.com/aws/aws-sdk-go-v2/service/iottwinmaker"
	iotwireless_sdkv2 "github.com/aws/aws-sdk-go-v2/service/iotwireless"
	ivs_sdkv2 "github.com/aws/aws-sdk-go-v2/service/ivs"
	ivschat_sdkv2 "github.com/aws/aws-sdk-go-v2/service/ivschat"
	ivsrealtime_sdkv2 "github.com/aws/aws-sdk-go-v2/service/ivsrealtime"
	kafka_sdkv2 "github.com/aws/aws-sdk-go-v2/service/kafka"
	kafkaconnect_sdkv2 "github.com/aws/aws-sdk-go-v2/service/kafkaconnect"
	kendra_sdkv2 "github.com/aws/aws-sdk-go-v2/service/kendra"
	kendraranking_sdkv2 "github.com/aws/aws-sdk-go-v2/service/kendraranking"
	keyspaces_sdkv2 "github.com/aws/aws-sdk-go-v2/service/keyspaces"
	kinesis_sdkv2 "github.com/aws/aws-sdk-go-v2/service/kinesis"
	kinesisanalytics_sdkv2 "github.com/aws/aws-sdk-go-v2/service/kinesisanalytics"
	kinesisanalyticsv2_sdkv2 "github.com/aws/aws-sdk-go-v2/service/kinesisanalyticsv2"
	kinesisvideo_sdkv2 "github.com/aws/aws-sdk-go-v2/service/kinesisvideo"
	kinesisvideoarchivedmedia_sdkv2 "github.com/aws/aws-sdk-go-v2/service/kinesisvideoarchivedmedia"
	kinesisvideomedia_sdkv2 "github.com/aws/aws-sdk-go-v2/service/kinesisvideomedia"
	kinesisvideosignaling_sdkv2 "github.com/aws/aws-sdk-go-v2/service/kinesisvideosignaling"
	kinesisvideowebrtcstorage_sdkv2 "github.com/aws/aws-sdk-go-v2/service/kinesisvideowebrtcstorage"
	kms_sdkv2 "github.com/aws/aws-sdk-go-v2/service/kms"
	lakeformation_sdkv2 "github.com/aws/aws-sdk-go-v2/service/lakeformation"
	lambda_sdkv2 "github.com/aws/aws-sdk-go-v2/service/lambda"
	launchwizard_sdkv2 "github.com/aws/aws-sdk-go-v2/service/launchwizard"
	lexmodelbuildingservice_sdkv2 "github.com/aws/aws-sdk-go-v2/service/lexmodelbuildingservice"
	lexmodelsv2_sdkv2 "github.com/aws/aws-sdk-go-v2/service/lexmodelsv2"
	lexruntimeservice_sdkv2 "github.com/aws/aws-sdk-go-v2/service/lexruntimeservice"
	lexruntimev2_sdkv2 "github.com/aws/aws-sdk-go-v2/service/lexruntimev2"
	licensemanager_sdkv2 "github.com/aws/aws-sdk-go-v2/service/licensemanager"
	licensemanagerlinuxsubscriptions_sdkv2 "github.com/aws/aws-sdk-go-v2/service/licensemanagerlinuxsubscriptions"
	licensemanagerusersubscriptions_sdkv2 "github.com/aws/aws-sdk-go-v2/service/licensemanagerusersubscriptions"
	lightsail_sdkv2 "github.com/aws/aws-sdk-go-v2/service/lightsail"
	location_sdkv2 "github.com/aws/aws-sdk-go-v2/service/location"
	lookoutequipment_sdkv2 "github.com/aws/aws-sdk-go-v2/service/lookoutequipment"
	lookoutmetrics_sdkv2 "github.com/aws/aws-sdk-go-v2/service/lookoutmetrics"
	lookoutvision_sdkv2 "github.com/aws/aws-sdk-go-v2/service/lookoutvision"
	m2_sdkv2 "github.com/aws/aws-sdk-go-v2/service/m2"
	machinelearning_sdkv2 "github.com/aws/aws-sdk-go-v2/service/machinelearning"
	macie2_sdkv2 "github.com/aws/aws-sdk-go-v2/service/macie2"
	mailmanager_sdkv2 "github.com/aws/aws-sdk-go-v2/service/mailmanager"
	managedblockchain_sdkv2 "github.com/aws/aws-sdk-go-v2/service/managedblockchain"
	managedblockchainquery_sdkv2 "github.com/aws/aws-sdk-go-v2/service/managedblockchainquery"
	marketplaceagreement_sdkv2 "github.com/aws/aws-sdk-go-v2/service/marketplaceagreement"
	marketplacecatalog_sdkv2 "github.com/aws/aws-sdk-go-v2/service/marketplacecatalog"
	marketplacecommerceanalytics_sdkv2 "github.com/aws/aws-sdk-go-v2/service/marketplacecommerceanalytics"
	marketplacedeployment_sdkv2 "github.com/aws/aws-sdk-go-v2/service/marketplacedeployment"
	marketplaceentitlementservice_sdkv2 "github.com/aws/aws-sdk-go-v2/service/marketplaceentitlementservice"
	marketplacemetering_sdkv2 "github.com/aws/aws-sdk-go-v2/service/marketplacemetering"
	mediaconnect_sdkv2 "github.com/aws/aws-sdk-go-v2/service/mediaconnect"
	mediaconvert_sdkv2 "github.com/aws/aws-sdk-go-v2/service/mediaconvert"
	medialive_sdkv2 "github.com/aws/aws-sdk-go-v2/service/medialive"
	mediapackage_sdkv2 "github.com/aws/aws-sdk-go-v2/service/mediapackage"
	mediapackagev2_sdkv2 "github.com/aws/aws-sdk-go-v2/service/mediapackagev2"
	mediapackagevod_sdkv2 "github.com/aws/aws-sdk-go-v2/service/mediapackagevod"
	mediastore_sdkv2 "github.com/aws/aws-sdk-go-v2/service/mediastore"
	mediastoredata_sdkv2 "github.com/aws/aws-sdk-go-v2/service/mediastoredata"
	mediatailor_sdkv2 "github.com/aws/aws-sdk-go-v2/service/mediatailor"
	medicalimaging_sdkv2 "github.com/aws/aws-sdk-go-v2/service/medicalimaging"
	memorydb_sdkv2 "github.com/aws/aws-sdk-go-v2/service/memorydb"
	mgn_sdkv2 "github.com/aws/aws-sdk-go-v2/service/mgn"
	migrationhub_sdkv2 "github.com/aws/aws-sdk-go-v2/service/migrationhub"
	migrationhubconfig_sdkv2 "github.com/aws/aws-sdk-go-v2/service/migrationhubconfig"
	migrationhuborchestrator_sdkv2 "github.com/aws/aws-sdk-go-v2/service/migrationhuborchestrator"
	migrationhubrefactorspaces_sdkv2 "github.com/aws/aws-sdk-go-v2/service/migrationhubrefactorspaces"
	migrationhubstrategy_sdkv2 "github.com/aws/aws-sdk-go-v2/service/migrationhubstrategy"
	mobile_sdkv2 "github.com/aws/aws-sdk-go-v2/service/mobile"
	mq_sdkv2 "github.com/aws/aws-sdk-go-v2/service/mq"
	mturk_sdkv2 "github.com/aws/aws-sdk-go-v2/service/mturk"
	mwaa_sdkv2 "github.com/aws/aws-sdk-go-v2/service/mwaa"
	neptune_sdkv2 "github.com/aws/aws-sdk-go-v2/service/neptune"
	neptunedata_sdkv2 "github.com/aws/aws-sdk-go-v2/service/neptunedata"
	neptunegraph_sdkv2 "github.com/aws/aws-sdk-go-v2/service/neptunegraph"
	networkfirewall_sdkv2 "github.com/aws/aws-sdk-go-v2/service/networkfirewall"
	networkmanager_sdkv2 "github.com/aws/aws-sdk-go-v2/service/networkmanager"
	networkmonitor_sdkv2 "github.com/aws/aws-sdk-go-v2/service/networkmonitor"
	nimble_sdkv2 "github.com/aws/aws-sdk-go-v2/service/nimble"
	oam_sdkv2 "github.com/aws/aws-sdk-go-v2/service/oam"
	omics_sdkv2 "github.com/aws/aws-sdk-go-v2/service/omics"
	opensearch_sdkv2 "github.com/aws/aws-sdk-go-v2/service/opensearch"
	opensearchserverless_sdkv2 "github.com/aws/aws-sdk-go-v2/service/opensearchserverless"
	opsworks_sdkv2 "github.com/aws/aws-sdk-go-v2/service/opsworks"
	opsworkscm_sdkv2 "github.com/aws/aws-sdk-go-v2/service/opsworkscm"
	organizations_sdkv2 "github.com/aws/aws-sdk-go-v2/service/organizations"
	osis_sdkv2 "github.com/aws/aws-sdk-go-v2/service/osis"
	outposts_sdkv2 "github.com/aws/aws-sdk-go-v2/service/outposts"
	panorama_sdkv2 "github.com/aws/aws-sdk-go-v2/service/panorama"
	paymentcryptography_sdkv2 "github.com/aws/aws-sdk-go-v2/service/paymentcryptography"
	paymentcryptographydata_sdkv2 "github.com/aws/aws-sdk-go-v2/service/paymentcryptographydata"
	pcaconnectorad_sdkv2 "github.com/aws/aws-sdk-go-v2/service/pcaconnectorad"
	pcaconnectorscep_sdkv2 "github.com/aws/aws-sdk-go-v2/service/pcaconnectorscep"
	personalize_sdkv2 "github.com/aws/aws-sdk-go-v2/service/personalize"
	personalizeevents_sdkv2 "github.com/aws/aws-sdk-go-v2/service/personalizeevents"
	personalizeruntime_sdkv2 "github.com/aws/aws-sdk-go-v2/service/personalizeruntime"
	pi_sdkv2 "github.com/aws/aws-sdk-go-v2/service/pi"
	pinpoint_sdkv2 "github.com/aws/aws-sdk-go-v2/service/pinpoint"
	pinpointemail_sdkv2 "github.com/aws/aws-sdk-go-v2/service/pinpointemail"
	pinpointsmsvoice_sdkv2 "github.com/aws/aws-sdk-go-v2/service/pinpointsmsvoice"
	pinpointsmsvoicev2_sdkv2 "github.com/aws/aws-sdk-go-v2/service/pinpointsmsvoicev2"
	pipes_sdkv2 "github.com/aws/aws-sdk-go-v2/service/pipes"
	polly_sdkv2 "github.com/aws/aws-sdk-go-v2/service/polly"
	pricing_sdkv2 "github.com/aws/aws-sdk-go-v2/service/pricing"
	privatenetworks_sdkv2 "github.com/aws/aws-sdk-go-v2/service/privatenetworks"
	proton_sdkv2 "github.com/aws/aws-sdk-go-v2/service/proton"
	qbusiness_sdkv2 "github.com/aws/aws-sdk-go-v2/service/qbusiness"
	qconnect_sdkv2 "github.com/aws/aws-sdk-go-v2/service/qconnect"
	qldb_sdkv2 "github.com/aws/aws-sdk-go-v2/service/qldb"
	qldbsession_sdkv2 "github.com/aws/aws-sdk-go-v2/service/qldbsession"
	quicksight_sdkv2 "github.com/aws/aws-sdk-go-v2/service/quicksight"
	ram_sdkv2 "github.com/aws/aws-sdk-go-v2/service/ram"
	rbin_sdkv2 "github.com/aws/aws-sdk-go-v2/service/rbin"
	rds_sdkv2 "github.com/aws/aws-sdk-go-v2/service/rds"
	rdsdata_sdkv2 "github.com/aws/aws-sdk-go-v2/service/rdsdata"
	redshift_sdkv2 "github.com/aws/aws-sdk-go-v2/service/redshift"
	redshiftdata_sdkv2 "github.com/aws/aws-sdk-go-v2/service/redshiftdata"
	redshiftserverless_sdkv2 "github.com/aws/aws-sdk-go-v2/service/redshiftserverless"
	rekognition_sdkv2 "github.com/aws/aws-sdk-go-v2/service/rekognition"
	repostspace_sdkv2 "github.com/aws/aws-sdk-go-v2/service/repostspace"
	resiliencehub_sdkv2 "github.com/aws/aws-sdk-go-v2/service/resiliencehub"
	resourceexplorer2_sdkv2 "github.com/aws/aws-sdk-go-v2/service/resourceexplorer2"
	resourcegroups_sdkv2 "github.com/aws/aws-sdk-go-v2/service/resourcegroups"
	resourcegroupstaggingapi_sdkv2 "github.com/aws/aws-sdk-go-v2/service/resourcegroupstaggingapi"
	robomaker_sdkv2 "github.com/aws/aws-sdk-go-v2/service/robomaker"
	rolesanywhere_sdkv2 "github.com/aws/aws-sdk-go-v2/service/rolesanywhere"
	route53_sdkv2 "github.com/aws/aws-sdk-go-v2/service/route53"
	route53domains_sdkv2 "github.com/aws/aws-sdk-go-v2/service/route53domains"
	route53profiles_sdkv2 "github.com/aws/aws-sdk-go-v2/service/route53profiles"
	route53recoverycluster_sdkv2 "github.com/aws/aws-sdk-go-v2/service/route53recoverycluster"
	route53recoverycontrolconfig_sdkv2 "github.com/aws/aws-sdk-go-v2/service/route53recoverycontrolconfig"
	route53recoveryreadiness_sdkv2 "github.com/aws/aws-sdk-go-v2/service/route53recoveryreadiness"
	route53resolver_sdkv2 "github.com/aws/aws-sdk-go-v2/service/route53resolver"
	rum_sdkv2 "github.com/aws/aws-sdk-go-v2/service/rum"
	s3_sdkv2 "github.com/aws/aws-sdk-go-v2/service/s3"
	s3control_sdkv2 "github.com/aws/aws-sdk-go-v2/service/s3control"
	s3outposts_sdkv2 "github.com/aws/aws-sdk-go-v2/service/s3outposts"
	sagemaker_sdkv2 "github.com/aws/aws-sdk-go-v2/service/sagemaker"
	sagemakera2iruntime_sdkv2 "github.com/aws/aws-sdk-go-v2/service/sagemakera2iruntime"
	sagemakeredge_sdkv2 "github.com/aws/aws-sdk-go-v2/service/sagemakeredge"
	sagemakerfeaturestoreruntime_sdkv2 "github.com/aws/aws-sdk-go-v2/service/sagemakerfeaturestoreruntime"
	sagemakergeospatial_sdkv2 "github.com/aws/aws-sdk-go-v2/service/sagemakergeospatial"
	sagemakermetrics_sdkv2 "github.com/aws/aws-sdk-go-v2/service/sagemakermetrics"
	sagemakerruntime_sdkv2 "github.com/aws/aws-sdk-go-v2/service/sagemakerruntime"
	savingsplans_sdkv2 "github.com/aws/aws-sdk-go-v2/service/savingsplans"
	scheduler_sdkv2 "github.com/aws/aws-sdk-go-v2/service/scheduler"
	schemas_sdkv2 "github.com/aws/aws-sdk-go-v2/service/schemas"
	secretsmanager_sdkv2 "github.com/aws/aws-sdk-go-v2/service/secretsmanager"
	securityhub_sdkv2 "github.com/aws/aws-sdk-go-v2/service/securityhub"
	securitylake_sdkv2 "github.com/aws/aws-sdk-go-v2/service/securitylake"
	serverlessapplicationrepository_sdkv2 "github.com/aws/aws-sdk-go-v2/service/serverlessapplicationrepository"
	servicecatalog_sdkv2 "github.com/aws/aws-sdk-go-v2/service/servicecatalog"
	servicecatalogappregistry_sdkv2 "github.com/aws/aws-sdk-go-v2/service/servicecatalogappregistry"
	servicediscovery_sdkv2 "github.com/aws/aws-sdk-go-v2/service/servicediscovery"
	servicequotas_sdkv2 "github.com/aws/aws-sdk-go-v2/service/servicequotas"
	ses_sdkv2 "github.com/aws/aws-sdk-go-v2/service/ses"
	sesv2_sdkv2 "github.com/aws/aws-sdk-go-v2/service/sesv2"
	sfn_sdkv2 "github.com/aws/aws-sdk-go-v2/service/sfn"
	shield_sdkv2 "github.com/aws/aws-sdk-go-v2/service/shield"
	signer_sdkv2 "github.com/aws/aws-sdk-go-v2/service/signer"
	simspaceweaver_sdkv2 "github.com/aws/aws-sdk-go-v2/service/simspaceweaver"
	sms_sdkv2 "github.com/aws/aws-sdk-go-v2/service/sms"
	snowball_sdkv2 "github.com/aws/aws-sdk-go-v2/service/snowball"
	snowdevicemanagement_sdkv2 "github.com/aws/aws-sdk-go-v2/service/snowdevicemanagement"
	sns_sdkv2 "github.com/aws/aws-sdk-go-v2/service/sns"
	sqs_sdkv2 "github.com/aws/aws-sdk-go-v2/service/sqs"
	ssm_sdkv2 "github.com/aws/aws-sdk-go-v2/service/ssm"
	ssmcontacts_sdkv2 "github.com/aws/aws-sdk-go-v2/service/ssmcontacts"
	ssmincidents_sdkv2 "github.com/aws/aws-sdk-go-v2/service/ssmincidents"
	ssmsap_sdkv2 "github.com/aws/aws-sdk-go-v2/service/ssmsap"
	sso_sdkv2 "github.com/aws/aws-sdk-go-v2/service/sso"
	ssoadmin_sdkv2 "github.com/aws/aws-sdk-go-v2/service/ssoadmin"
	ssooidc_sdkv2 "github.com/aws/aws-sdk-go-v2/service/ssooidc"
	storagegateway_sdkv2 "github.com/aws/aws-sdk-go-v2/service/storagegateway"
	sts_sdkv2 "github.com/aws/aws-sdk-go-v2/service/sts"
	supplychain_sdkv2 "github.com/aws/aws-sdk-go-v2/service/supplychain"
	support_sdkv2 "github.com/aws/aws-sdk-go-v2/service/support"
	supportapp_sdkv2 "github.com/aws/aws-sdk-go-v2/service/supportapp"
	swf_sdkv2 "github.com/aws/aws-sdk-go-v2/service/swf"
	synthetics_sdkv2 "github.com/aws/aws-sdk-go-v2/service/synthetics"
	taxsettings_sdkv2 "github.com/aws/aws-sdk-go-v2/service/taxsettings"
	textract_sdkv2 "github.com/aws/aws-sdk-go-v2/service/textract"
	timestreaminfluxdb_sdkv2 "github.com/aws/aws-sdk-go-v2/service/timestreaminfluxdb"
	timestreamquery_sdkv2 "github.com/aws/aws-sdk-go-v2/service/timestreamquery"
	timestreamwrite_sdkv2 "github.com/aws/aws-sdk-go-v2/service/timestreamwrite"
	tnb_sdkv2 "github.com/aws/aws-sdk-go-v2/service/tnb"
	transcribe_sdkv2 "github.com/aws/aws-sdk-go-v2/service/transcribe"
	transcribestreaming_sdkv2 "github.com/aws/aws-sdk-go-v2/service/transcribestreaming"
	transfer_sdkv2 "github.com/aws/aws-sdk-go-v2/service/transfer"
	translate_sdkv2 "github.com/aws/aws-sdk-go-v2/service/translate"
	trustedadvisor_sdkv2 "github.com/aws/aws-sdk-go-v2/service/trustedadvisor"
	verifiedpermissions_sdkv2 "github.com/aws/aws-sdk-go-v2/service/verifiedpermissions"
	voiceid_sdkv2 "github.com/aws/aws-sdk-go-v2/service/voiceid"
	vpclattice_sdkv2 "github.com/aws/aws-sdk-go-v2/service/vpclattice"
	waf_sdkv2 "github.com/aws/aws-sdk-go-v2/service/waf"
	wafregional_sdkv2 "github.com/aws/aws-sdk-go-v2/service/wafregional"
	wafv2_sdkv2 "github.com/aws/aws-sdk-go-v2/service/wafv2"
	wellarchitected_sdkv2 "github.com/aws/aws-sdk-go-v2/service/wellarchitected"
	wisdom_sdkv2 "github.com/aws/aws-sdk-go-v2/service/wisdom"
	workdocs_sdkv2 "github.com/aws/aws-sdk-go-v2/service/workdocs"
	worklink_sdkv2 "github.com/aws/aws-sdk-go-v2/service/worklink"
	workmail_sdkv2 "github.com/aws/aws-sdk-go-v2/service/workmail"
	workmailmessageflow_sdkv2 "github.com/aws/aws-sdk-go-v2/service/workmailmessageflow"
	workspaces_sdkv2 "github.com/aws/aws-sdk-go-v2/service/workspaces"
	workspacesthinclient_sdkv2 "github.com/aws/aws-sdk-go-v2/service/workspacesthinclient"
	workspacesweb_sdkv2 "github.com/aws/aws-sdk-go-v2/service/workspacesweb"
	xray_sdkv2 "github.com/aws/aws-sdk-go-v2/service/xray"
	"github.com/aws/smithy-go/middleware"
)

//go:linkname accessanalyzerInvokeOperation github.com/aws/aws-sdk-go-v2/service/accessanalyzer.(*Client).invokeOperation
func accessanalyzerInvokeOperation(*accessanalyzer_sdkv2.Client, context.Context, string, interface{}, []func(*accessanalyzer_sdkv2.Options), ...func(*middleware.Stack, accessanalyzer_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname accountInvokeOperation github.com/aws/aws-sdk-go-v2/service/account.(*Client).invokeOperation
func accountInvokeOperation(*account_sdkv2.Client, context.Context, string, interface{}, []func(*account_sdkv2.Options), ...func(*middleware.Stack, account_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname acmInvokeOperation github.com/aws/aws-sdk-go-v2/service/acm.(*Client).invokeOperation
func acmInvokeOperation(*acm_sdkv2.Client, context.Context, string, interface{}, []func(*acm_sdkv2.Options), ...func(*middleware.Stack, acm_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname acmpcaInvokeOperation github.com/aws/aws-sdk-go-v2/service/acmpca.(*Client).invokeOperation
func acmpcaInvokeOperation(*acmpca_sdkv2.Client, context.Context, string, interface{}, []func(*acmpca_sdkv2.Options), ...func(*middleware.Stack, acmpca_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname ampInvokeOperation github.com/aws/aws-sdk-go-v2/service/amp.(*Client).invokeOperation
func ampInvokeOperation(*amp_sdkv2.Client, context.Context, string, interface{}, []func(*amp_sdkv2.Options), ...func(*middleware.Stack, amp_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname amplifyInvokeOperation github.com/aws/aws-sdk-go-v2/service/amplify.(*Client).invokeOperation
func amplifyInvokeOperation(*amplify_sdkv2.Client, context.Context, string, interface{}, []func(*amplify_sdkv2.Options), ...func(*middleware.Stack, amplify_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname amplifybackendInvokeOperation github.com/aws/aws-sdk-go-v2/service/amplifybackend.(*Client).invokeOperation
func amplifybackendInvokeOperation(*amplifybackend_sdkv2.Client, context.Context, string, interface{}, []func(*amplifybackend_sdkv2.Options), ...func(*middleware.Stack, amplifybackend_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname amplifyuibuilderInvokeOperation github.com/aws/aws-sdk-go-v2/service/amplifyuibuilder.(*Client).invokeOperation
func amplifyuibuilderInvokeOperation(*amplifyuibuilder_sdkv2.Client, context.Context, string, interface{}, []func(*amplifyuibuilder_sdkv2.Options), ...func(*middleware.Stack, amplifyuibuilder_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname apigatewayInvokeOperation github.com/aws/aws-sdk-go-v2/service/apigateway.(*Client).invokeOperation
func apigatewayInvokeOperation(*apigateway_sdkv2.Client, context.Context, string, interface{}, []func(*apigateway_sdkv2.Options), ...func(*middleware.Stack, apigateway_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname apigatewaymanagementapiInvokeOperation github.com/aws/aws-sdk-go-v2/service/apigatewaymanagementapi.(*Client).invokeOperation
func apigatewaymanagementapiInvokeOperation(*apigatewaymanagementapi_sdkv2.Client, context.Context, string, interface{}, []func(*apigatewaymanagementapi_sdkv2.Options), ...func(*middleware.Stack, apigatewaymanagementapi_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname apigatewayv2InvokeOperation github.com/aws/aws-sdk-go-v2/service/apigatewayv2.(*Client).invokeOperation
func apigatewayv2InvokeOperation(*apigatewayv2_sdkv2.Client, context.Context, string, interface{}, []func(*apigatewayv2_sdkv2.Options), ...func(*middleware.Stack, apigatewayv2_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname appconfigInvokeOperation github.com/aws/aws-sdk-go-v2/service/appconfig.(*Client).invokeOperation
func appconfigInvokeOperation(*appconfig_sdkv2.Client, context.Context, string, interface{}, []func(*appconfig_sdkv2.Options), ...func(*middleware.Stack, appconfig_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname appconfigdataInvokeOperation github.com/aws/aws-sdk-go-v2/service/appconfigdata.(*Client).invokeOperation
func appconfigdataInvokeOperation(*appconfigdata_sdkv2.Client, context.Context, string, interface{}, []func(*appconfigdata_sdkv2.Options), ...func(*middleware.Stack, appconfigdata_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname appfabricInvokeOperation github.com/aws/aws-sdk-go-v2/service/appfabric.(*Client).invokeOperation
func appfabricInvokeOperation(*appfabric_sdkv2.Client, context.Context, string, interface{}, []func(*appfabric_sdkv2.Options), ...func(*middleware.Stack, appfabric_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname appflowInvokeOperation github.com/aws/aws-sdk-go-v2/service/appflow.(*Client).invokeOperation
func appflowInvokeOperation(*appflow_sdkv2.Client, context.Context, string, interface{}, []func(*appflow_sdkv2.Options), ...func(*middleware.Stack, appflow_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname appintegrationsInvokeOperation github.com/aws/aws-sdk-go-v2/service/appintegrations.(*Client).invokeOperation
func appintegrationsInvokeOperation(*appintegrations_sdkv2.Client, context.Context, string, interface{}, []func(*appintegrations_sdkv2.Options), ...func(*middleware.Stack, appintegrations_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname applicationautoscalingInvokeOperation github.com/aws/aws-sdk-go-v2/service/applicationautoscaling.(*Client).invokeOperation
func applicationautoscalingInvokeOperation(*applicationautoscaling_sdkv2.Client, context.Context, string, interface{}, []func(*applicationautoscaling_sdkv2.Options), ...func(*middleware.Stack, applicationautoscaling_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname applicationcostprofilerInvokeOperation github.com/aws/aws-sdk-go-v2/service/applicationcostprofiler.(*Client).invokeOperation
func applicationcostprofilerInvokeOperation(*applicationcostprofiler_sdkv2.Client, context.Context, string, interface{}, []func(*applicationcostprofiler_sdkv2.Options), ...func(*middleware.Stack, applicationcostprofiler_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname applicationdiscoveryserviceInvokeOperation github.com/aws/aws-sdk-go-v2/service/applicationdiscoveryservice.(*Client).invokeOperation
func applicationdiscoveryserviceInvokeOperation(*applicationdiscoveryservice_sdkv2.Client, context.Context, string, interface{}, []func(*applicationdiscoveryservice_sdkv2.Options), ...func(*middleware.Stack, applicationdiscoveryservice_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname applicationinsightsInvokeOperation github.com/aws/aws-sdk-go-v2/service/applicationinsights.(*Client).invokeOperation
func applicationinsightsInvokeOperation(*applicationinsights_sdkv2.Client, context.Context, string, interface{}, []func(*applicationinsights_sdkv2.Options), ...func(*middleware.Stack, applicationinsights_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname applicationsignalsInvokeOperation github.com/aws/aws-sdk-go-v2/service/applicationsignals.(*Client).invokeOperation
func applicationsignalsInvokeOperation(*applicationsignals_sdkv2.Client, context.Context, string, interface{}, []func(*applicationsignals_sdkv2.Options), ...func(*middleware.Stack, applicationsignals_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname appmeshInvokeOperation github.com/aws/aws-sdk-go-v2/service/appmesh.(*Client).invokeOperation
func appmeshInvokeOperation(*appmesh_sdkv2.Client, context.Context, string, interface{}, []func(*appmesh_sdkv2.Options), ...func(*middleware.Stack, appmesh_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname apprunnerInvokeOperation github.com/aws/aws-sdk-go-v2/service/apprunner.(*Client).invokeOperation
func apprunnerInvokeOperation(*apprunner_sdkv2.Client, context.Context, string, interface{}, []func(*apprunner_sdkv2.Options), ...func(*middleware.Stack, apprunner_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname appstreamInvokeOperation github.com/aws/aws-sdk-go-v2/service/appstream.(*Client).invokeOperation
func appstreamInvokeOperation(*appstream_sdkv2.Client, context.Context, string, interface{}, []func(*appstream_sdkv2.Options), ...func(*middleware.Stack, appstream_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname appsyncInvokeOperation github.com/aws/aws-sdk-go-v2/service/appsync.(*Client).invokeOperation
func appsyncInvokeOperation(*appsync_sdkv2.Client, context.Context, string, interface{}, []func(*appsync_sdkv2.Options), ...func(*middleware.Stack, appsync_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname apptestInvokeOperation github.com/aws/aws-sdk-go-v2/service/apptest.(*Client).invokeOperation
func apptestInvokeOperation(*apptest_sdkv2.Client, context.Context, string, interface{}, []func(*apptest_sdkv2.Options), ...func(*middleware.Stack, apptest_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname arczonalshiftInvokeOperation github.com/aws/aws-sdk-go-v2/service/arczonalshift.(*Client).invokeOperation
func arczonalshiftInvokeOperation(*arczonalshift_sdkv2.Client, context.Context, string, interface{}, []func(*arczonalshift_sdkv2.Options), ...func(*middleware.Stack, arczonalshift_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname artifactInvokeOperation github.com/aws/aws-sdk-go-v2/service/artifact.(*Client).invokeOperation
func artifactInvokeOperation(*artifact_sdkv2.Client, context.Context, string, interface{}, []func(*artifact_sdkv2.Options), ...func(*middleware.Stack, artifact_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname athenaInvokeOperation github.com/aws/aws-sdk-go-v2/service/athena.(*Client).invokeOperation
func athenaInvokeOperation(*athena_sdkv2.Client, context.Context, string, interface{}, []func(*athena_sdkv2.Options), ...func(*middleware.Stack, athena_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname auditmanagerInvokeOperation github.com/aws/aws-sdk-go-v2/service/auditmanager.(*Client).invokeOperation
func auditmanagerInvokeOperation(*auditmanager_sdkv2.Client, context.Context, string, interface{}, []func(*auditmanager_sdkv2.Options), ...func(*middleware.Stack, auditmanager_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname autoscalingInvokeOperation github.com/aws/aws-sdk-go-v2/service/autoscaling.(*Client).invokeOperation
func autoscalingInvokeOperation(*autoscaling_sdkv2.Client, context.Context, string, interface{}, []func(*autoscaling_sdkv2.Options), ...func(*middleware.Stack, autoscaling_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname autoscalingplansInvokeOperation github.com/aws/aws-sdk-go-v2/service/autoscalingplans.(*Client).invokeOperation
func autoscalingplansInvokeOperation(*autoscalingplans_sdkv2.Client, context.Context, string, interface{}, []func(*autoscalingplans_sdkv2.Options), ...func(*middleware.Stack, autoscalingplans_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname b2biInvokeOperation github.com/aws/aws-sdk-go-v2/service/b2bi.(*Client).invokeOperation
func b2biInvokeOperation(*b2bi_sdkv2.Client, context.Context, string, interface{}, []func(*b2bi_sdkv2.Options), ...func(*middleware.Stack, b2bi_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname backupInvokeOperation github.com/aws/aws-sdk-go-v2/service/backup.(*Client).invokeOperation
func backupInvokeOperation(*backup_sdkv2.Client, context.Context, string, interface{}, []func(*backup_sdkv2.Options), ...func(*middleware.Stack, backup_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname backupgatewayInvokeOperation github.com/aws/aws-sdk-go-v2/service/backupgateway.(*Client).invokeOperation
func backupgatewayInvokeOperation(*backupgateway_sdkv2.Client, context.Context, string, interface{}, []func(*backupgateway_sdkv2.Options), ...func(*middleware.Stack, backupgateway_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname batchInvokeOperation github.com/aws/aws-sdk-go-v2/service/batch.(*Client).invokeOperation
func batchInvokeOperation(*batch_sdkv2.Client, context.Context, string, interface{}, []func(*batch_sdkv2.Options), ...func(*middleware.Stack, batch_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname bcmdataexportsInvokeOperation github.com/aws/aws-sdk-go-v2/service/bcmdataexports.(*Client).invokeOperation
func bcmdataexportsInvokeOperation(*bcmdataexports_sdkv2.Client, context.Context, string, interface{}, []func(*bcmdataexports_sdkv2.Options), ...func(*middleware.Stack, bcmdataexports_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname bedrockInvokeOperation github.com/aws/aws-sdk-go-v2/service/bedrock.(*Client).invokeOperation
func bedrockInvokeOperation(*bedrock_sdkv2.Client, context.Context, string, interface{}, []func(*bedrock_sdkv2.Options), ...func(*middleware.Stack, bedrock_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname bedrockagentInvokeOperation github.com/aws/aws-sdk-go-v2/service/bedrockagent.(*Client).invokeOperation
func bedrockagentInvokeOperation(*bedrockagent_sdkv2.Client, context.Context, string, interface{}, []func(*bedrockagent_sdkv2.Options), ...func(*middleware.Stack, bedrockagent_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname bedrockagentruntimeInvokeOperation github.com/aws/aws-sdk-go-v2/service/bedrockagentruntime.(*Client).invokeOperation
func bedrockagentruntimeInvokeOperation(*bedrockagentruntime_sdkv2.Client, context.Context, string, interface{}, []func(*bedrockagentruntime_sdkv2.Options), ...func(*middleware.Stack, bedrockagentruntime_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname bedrockruntimeInvokeOperation github.com/aws/aws-sdk-go-v2/service/bedrockruntime.(*Client).invokeOperation
func bedrockruntimeInvokeOperation(*bedrockruntime_sdkv2.Client, context.Context, string, interface{}, []func(*bedrockruntime_sdkv2.Options), ...func(*middleware.Stack, bedrockruntime_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname billingconductorInvokeOperation github.com/aws/aws-sdk-go-v2/service/billingconductor.(*Client).invokeOperation
func billingconductorInvokeOperation(*billingconductor_sdkv2.Client, context.Context, string, interface{}, []func(*billingconductor_sdkv2.Options), ...func(*middleware.Stack, billingconductor_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname braketInvokeOperation github.com/aws/aws-sdk-go-v2/service/braket.(*Client).invokeOperation
func braketInvokeOperation(*braket_sdkv2.Client, context.Context, string, interface{}, []func(*braket_sdkv2.Options), ...func(*middleware.Stack, braket_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname budgetsInvokeOperation github.com/aws/aws-sdk-go-v2/service/budgets.(*Client).invokeOperation
func budgetsInvokeOperation(*budgets_sdkv2.Client, context.Context, string, interface{}, []func(*budgets_sdkv2.Options), ...func(*middleware.Stack, budgets_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname chatbotInvokeOperation github.com/aws/aws-sdk-go-v2/service/chatbot.(*Client).invokeOperation
func chatbotInvokeOperation(*chatbot_sdkv2.Client, context.Context, string, interface{}, []func(*chatbot_sdkv2.Options), ...func(*middleware.Stack, chatbot_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname chimeInvokeOperation github.com/aws/aws-sdk-go-v2/service/chime.(*Client).invokeOperation
func chimeInvokeOperation(*chime_sdkv2.Client, context.Context, string, interface{}, []func(*chime_sdkv2.Options), ...func(*middleware.Stack, chime_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname chimesdkidentityInvokeOperation github.com/aws/aws-sdk-go-v2/service/chimesdkidentity.(*Client).invokeOperation
func chimesdkidentityInvokeOperation(*chimesdkidentity_sdkv2.Client, context.Context, string, interface{}, []func(*chimesdkidentity_sdkv2.Options), ...func(*middleware.Stack, chimesdkidentity_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname chimesdkmediapipelinesInvokeOperation github.com/aws/aws-sdk-go-v2/service/chimesdkmediapipelines.(*Client).invokeOperation
func chimesdkmediapipelinesInvokeOperation(*chimesdkmediapipelines_sdkv2.Client, context.Context, string, interface{}, []func(*chimesdkmediapipelines_sdkv2.Options), ...func(*middleware.Stack, chimesdkmediapipelines_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname chimesdkmeetingsInvokeOperation github.com/aws/aws-sdk-go-v2/service/chimesdkmeetings.(*Client).invokeOperation
func chimesdkmeetingsInvokeOperation(*chimesdkmeetings_sdkv2.Client, context.Context, string, interface{}, []func(*chimesdkmeetings_sdkv2.Options), ...func(*middleware.Stack, chimesdkmeetings_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname chimesdkmessagingInvokeOperation github.com/aws/aws-sdk-go-v2/service/chimesdkmessaging.(*Client).invokeOperation
func chimesdkmessagingInvokeOperation(*chimesdkmessaging_sdkv2.Client, context.Context, string, interface{}, []func(*chimesdkmessaging_sdkv2.Options), ...func(*middleware.Stack, chimesdkmessaging_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname chimesdkvoiceInvokeOperation github.com/aws/aws-sdk-go-v2/service/chimesdkvoice.(*Client).invokeOperation
func chimesdkvoiceInvokeOperation(*chimesdkvoice_sdkv2.Client, context.Context, string, interface{}, []func(*chimesdkvoice_sdkv2.Options), ...func(*middleware.Stack, chimesdkvoice_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname cleanroomsInvokeOperation github.com/aws/aws-sdk-go-v2/service/cleanrooms.(*Client).invokeOperation
func cleanroomsInvokeOperation(*cleanrooms_sdkv2.Client, context.Context, string, interface{}, []func(*cleanrooms_sdkv2.Options), ...func(*middleware.Stack, cleanrooms_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname cleanroomsmlInvokeOperation github.com/aws/aws-sdk-go-v2/service/cleanroomsml.(*Client).invokeOperation
func cleanroomsmlInvokeOperation(*cleanroomsml_sdkv2.Client, context.Context, string, interface{}, []func(*cleanroomsml_sdkv2.Options), ...func(*middleware.Stack, cleanroomsml_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname cloud9InvokeOperation github.com/aws/aws-sdk-go-v2/service/cloud9.(*Client).invokeOperation
func cloud9InvokeOperation(*cloud9_sdkv2.Client, context.Context, string, interface{}, []func(*cloud9_sdkv2.Options), ...func(*middleware.Stack, cloud9_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname cloudcontrolInvokeOperation github.com/aws/aws-sdk-go-v2/service/cloudcontrol.(*Client).invokeOperation
func cloudcontrolInvokeOperation(*cloudcontrol_sdkv2.Client, context.Context, string, interface{}, []func(*cloudcontrol_sdkv2.Options), ...func(*middleware.Stack, cloudcontrol_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname clouddirectoryInvokeOperation github.com/aws/aws-sdk-go-v2/service/clouddirectory.(*Client).invokeOperation
func clouddirectoryInvokeOperation(*clouddirectory_sdkv2.Client, context.Context, string, interface{}, []func(*clouddirectory_sdkv2.Options), ...func(*middleware.Stack, clouddirectory_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname cloudformationInvokeOperation github.com/aws/aws-sdk-go-v2/service/cloudformation.(*Client).invokeOperation
func cloudformationInvokeOperation(*cloudformation_sdkv2.Client, context.Context, string, interface{}, []func(*cloudformation_sdkv2.Options), ...func(*middleware.Stack, cloudformation_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname cloudfrontInvokeOperation github.com/aws/aws-sdk-go-v2/service/cloudfront.(*Client).invokeOperation
func cloudfrontInvokeOperation(*cloudfront_sdkv2.Client, context.Context, string, interface{}, []func(*cloudfront_sdkv2.Options), ...func(*middleware.Stack, cloudfront_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname cloudfrontkeyvaluestoreInvokeOperation github.com/aws/aws-sdk-go-v2/service/cloudfrontkeyvaluestore.(*Client).invokeOperation
func cloudfrontkeyvaluestoreInvokeOperation(*cloudfrontkeyvaluestore_sdkv2.Client, context.Context, string, interface{}, []func(*cloudfrontkeyvaluestore_sdkv2.Options), ...func(*middleware.Stack, cloudfrontkeyvaluestore_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname cloudhsmInvokeOperation github.com/aws/aws-sdk-go-v2/service/cloudhsm.(*Client).invokeOperation
func cloudhsmInvokeOperation(*cloudhsm_sdkv2.Client, context.Context, string, interface{}, []func(*cloudhsm_sdkv2.Options), ...func(*middleware.Stack, cloudhsm_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname cloudhsmv2InvokeOperation github.com/aws/aws-sdk-go-v2/service/cloudhsmv2.(*Client).invokeOperation
func cloudhsmv2InvokeOperation(*cloudhsmv2_sdkv2.Client, context.Context, string, interface{}, []func(*cloudhsmv2_sdkv2.Options), ...func(*middleware.Stack, cloudhsmv2_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname cloudsearchInvokeOperation github.com/aws/aws-sdk-go-v2/service/cloudsearch.(*Client).invokeOperation
func cloudsearchInvokeOperation(*cloudsearch_sdkv2.Client, context.Context, string, interface{}, []func(*cloudsearch_sdkv2.Options), ...func(*middleware.Stack, cloudsearch_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname cloudsearchdomainInvokeOperation github.com/aws/aws-sdk-go-v2/service/cloudsearchdomain.(*Client).invokeOperation
func cloudsearchdomainInvokeOperation(*cloudsearchdomain_sdkv2.Client, context.Context, string, interface{}, []func(*cloudsearchdomain_sdkv2.Options), ...func(*middleware.Stack, cloudsearchdomain_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname cloudtrailInvokeOperation github.com/aws/aws-sdk-go-v2/service/cloudtrail.(*Client).invokeOperation
func cloudtrailInvokeOperation(*cloudtrail_sdkv2.Client, context.Context, string, interface{}, []func(*cloudtrail_sdkv2.Options), ...func(*middleware.Stack, cloudtrail_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname cloudtraildataInvokeOperation github.com/aws/aws-sdk-go-v2/service/cloudtraildata.(*Client).invokeOperation
func cloudtraildataInvokeOperation(*cloudtraildata_sdkv2.Client, context.Context, string, interface{}, []func(*cloudtraildata_sdkv2.Options), ...func(*middleware.Stack, cloudtraildata_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname cloudwatchInvokeOperation github.com/aws/aws-sdk-go-v2/service/cloudwatch.(*Client).invokeOperation
func cloudwatchInvokeOperation(*cloudwatch_sdkv2.Client, context.Context, string, interface{}, []func(*cloudwatch_sdkv2.Options), ...func(*middleware.Stack, cloudwatch_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname cloudwatcheventsInvokeOperation github.com/aws/aws-sdk-go-v2/service/cloudwatchevents.(*Client).invokeOperation
func cloudwatcheventsInvokeOperation(*cloudwatchevents_sdkv2.Client, context.Context, string, interface{}, []func(*cloudwatchevents_sdkv2.Options), ...func(*middleware.Stack, cloudwatchevents_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname cloudwatchlogsInvokeOperation github.com/aws/aws-sdk-go-v2/service/cloudwatchlogs.(*Client).invokeOperation
func cloudwatchlogsInvokeOperation(*cloudwatchlogs_sdkv2.Client, context.Context, string, interface{}, []func(*cloudwatchlogs_sdkv2.Options), ...func(*middleware.Stack, cloudwatchlogs_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname codeartifactInvokeOperation github.com/aws/aws-sdk-go-v2/service/codeartifact.(*Client).invokeOperation
func codeartifactInvokeOperation(*codeartifact_sdkv2.Client, context.Context, string, interface{}, []func(*codeartifact_sdkv2.Options), ...func(*middleware.Stack, codeartifact_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname codebuildInvokeOperation github.com/aws/aws-sdk-go-v2/service/codebuild.(*Client).invokeOperation
func codebuildInvokeOperation(*codebuild_sdkv2.Client, context.Context, string, interface{}, []func(*codebuild_sdkv2.Options), ...func(*middleware.Stack, codebuild_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname codecatalystInvokeOperation github.com/aws/aws-sdk-go-v2/service/codecatalyst.(*Client).invokeOperation
func codecatalystInvokeOperation(*codecatalyst_sdkv2.Client, context.Context, string, interface{}, []func(*codecatalyst_sdkv2.Options), ...func(*middleware.Stack, codecatalyst_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname codecommitInvokeOperation github.com/aws/aws-sdk-go-v2/service/codecommit.(*Client).invokeOperation
func codecommitInvokeOperation(*codecommit_sdkv2.Client, context.Context, string, interface{}, []func(*codecommit_sdkv2.Options), ...func(*middleware.Stack, codecommit_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname codeconnectionsInvokeOperation github.com/aws/aws-sdk-go-v2/service/codeconnections.(*Client).invokeOperation
func codeconnectionsInvokeOperation(*codeconnections_sdkv2.Client, context.Context, string, interface{}, []func(*codeconnections_sdkv2.Options), ...func(*middleware.Stack, codeconnections_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname codedeployInvokeOperation github.com/aws/aws-sdk-go-v2/service/codedeploy.(*Client).invokeOperation
func codedeployInvokeOperation(*codedeploy_sdkv2.Client, context.Context, string, interface{}, []func(*codedeploy_sdkv2.Options), ...func(*middleware.Stack, codedeploy_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname codeguruprofilerInvokeOperation github.com/aws/aws-sdk-go-v2/service/codeguruprofiler.(*Client).invokeOperation
func codeguruprofilerInvokeOperation(*codeguruprofiler_sdkv2.Client, context.Context, string, interface{}, []func(*codeguruprofiler_sdkv2.Options), ...func(*middleware.Stack, codeguruprofiler_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname codegurureviewerInvokeOperation github.com/aws/aws-sdk-go-v2/service/codegurureviewer.(*Client).invokeOperation
func codegurureviewerInvokeOperation(*codegurureviewer_sdkv2.Client, context.Context, string, interface{}, []func(*codegurureviewer_sdkv2.Options), ...func(*middleware.Stack, codegurureviewer_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname codegurusecurityInvokeOperation github.com/aws/aws-sdk-go-v2/service/codegurusecurity.(*Client).invokeOperation
func codegurusecurityInvokeOperation(*codegurusecurity_sdkv2.Client, context.Context, string, interface{}, []func(*codegurusecurity_sdkv2.Options), ...func(*middleware.Stack, codegurusecurity_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname codepipelineInvokeOperation github.com/aws/aws-sdk-go-v2/service/codepipeline.(*Client).invokeOperation
func codepipelineInvokeOperation(*codepipeline_sdkv2.Client, context.Context, string, interface{}, []func(*codepipeline_sdkv2.Options), ...func(*middleware.Stack, codepipeline_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname codestarInvokeOperation github.com/aws/aws-sdk-go-v2/service/codestar.(*Client).invokeOperation
func codestarInvokeOperation(*codestar_sdkv2.Client, context.Context, string, interface{}, []func(*codestar_sdkv2.Options), ...func(*middleware.Stack, codestar_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname codestarconnectionsInvokeOperation github.com/aws/aws-sdk-go-v2/service/codestarconnections.(*Client).invokeOperation
func codestarconnectionsInvokeOperation(*codestarconnections_sdkv2.Client, context.Context, string, interface{}, []func(*codestarconnections_sdkv2.Options), ...func(*middleware.Stack, codestarconnections_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname codestarnotificationsInvokeOperation github.com/aws/aws-sdk-go-v2/service/codestarnotifications.(*Client).invokeOperation
func codestarnotificationsInvokeOperation(*codestarnotifications_sdkv2.Client, context.Context, string, interface{}, []func(*codestarnotifications_sdkv2.Options), ...func(*middleware.Stack, codestarnotifications_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname cognitoidentityInvokeOperation github.com/aws/aws-sdk-go-v2/service/cognitoidentity.(*Client).invokeOperation
func cognitoidentityInvokeOperation(*cognitoidentity_sdkv2.Client, context.Context, string, interface{}, []func(*cognitoidentity_sdkv2.Options), ...func(*middleware.Stack, cognitoidentity_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname cognitoidentityproviderInvokeOperation github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider.(*Client).invokeOperation
func cognitoidentityproviderInvokeOperation(*cognitoidentityprovider_sdkv2.Client, context.Context, string, interface{}, []func(*cognitoidentityprovider_sdkv2.Options), ...func(*middleware.Stack, cognitoidentityprovider_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname cognitosyncInvokeOperation github.com/aws/aws-sdk-go-v2/service/cognitosync.(*Client).invokeOperation
func cognitosyncInvokeOperation(*cognitosync_sdkv2.Client, context.Context, string, interface{}, []func(*cognitosync_sdkv2.Options), ...func(*middleware.Stack, cognitosync_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname comprehendInvokeOperation github.com/aws/aws-sdk-go-v2/service/comprehend.(*Client).invokeOperation
func comprehendInvokeOperation(*comprehend_sdkv2.Client, context.Context, string, interface{}, []func(*comprehend_sdkv2.Options), ...func(*middleware.Stack, comprehend_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname comprehendmedicalInvokeOperation github.com/aws/aws-sdk-go-v2/service/comprehendmedical.(*Client).invokeOperation
func comprehendmedicalInvokeOperation(*comprehendmedical_sdkv2.Client, context.Context, string, interface{}, []func(*comprehendmedical_sdkv2.Options), ...func(*middleware.Stack, comprehendmedical_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname computeoptimizerInvokeOperation github.com/aws/aws-sdk-go-v2/service/computeoptimizer.(*Client).invokeOperation
func computeoptimizerInvokeOperation(*computeoptimizer_sdkv2.Client, context.Context, string, interface{}, []func(*computeoptimizer_sdkv2.Options), ...func(*middleware.Stack, computeoptimizer_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname configserviceInvokeOperation github.com/aws/aws-sdk-go-v2/service/configservice.(*Client).invokeOperation
func configserviceInvokeOperation(*configservice_sdkv2.Client, context.Context, string, interface{}, []func(*configservice_sdkv2.Options), ...func(*middleware.Stack, configservice_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname connectInvokeOperation github.com/aws/aws-sdk-go-v2/service/connect.(*Client).invokeOperation
func connectInvokeOperation(*connect_sdkv2.Client, context.Context, string, interface{}, []func(*connect_sdkv2.Options), ...func(*middleware.Stack, connect_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname connectcampaignsInvokeOperation github.com/aws/aws-sdk-go-v2/service/connectcampaigns.(*Client).invokeOperation
func connectcampaignsInvokeOperation(*connectcampaigns_sdkv2.Client, context.Context, string, interface{}, []func(*connectcampaigns_sdkv2.Options), ...func(*middleware.Stack, connectcampaigns_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname connectcasesInvokeOperation github.com/aws/aws-sdk-go-v2/service/connectcases.(*Client).invokeOperation
func connectcasesInvokeOperation(*connectcases_sdkv2.Client, context.Context, string, interface{}, []func(*connectcases_sdkv2.Options), ...func(*middleware.Stack, connectcases_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname connectcontactlensInvokeOperation github.com/aws/aws-sdk-go-v2/service/connectcontactlens.(*Client).invokeOperation
func connectcontactlensInvokeOperation(*connectcontactlens_sdkv2.Client, context.Context, string, interface{}, []func(*connectcontactlens_sdkv2.Options), ...func(*middleware.Stack, connectcontactlens_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname connectparticipantInvokeOperation github.com/aws/aws-sdk-go-v2/service/connectparticipant.(*Client).invokeOperation
func connectparticipantInvokeOperation(*connectparticipant_sdkv2.Client, context.Context, string, interface{}, []func(*connectparticipant_sdkv2.Options), ...func(*middleware.Stack, connectparticipant_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname controlcatalogInvokeOperation github.com/aws/aws-sdk-go-v2/service/controlcatalog.(*Client).invokeOperation
func controlcatalogInvokeOperation(*controlcatalog_sdkv2.Client, context.Context, string, interface{}, []func(*controlcatalog_sdkv2.Options), ...func(*middleware.Stack, controlcatalog_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname controltowerInvokeOperation github.com/aws/aws-sdk-go-v2/service/controltower.(*Client).invokeOperation
func controltowerInvokeOperation(*controltower_sdkv2.Client, context.Context, string, interface{}, []func(*controltower_sdkv2.Options), ...func(*middleware.Stack, controltower_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname costandusagereportserviceInvokeOperation github.com/aws/aws-sdk-go-v2/service/costandusagereportservice.(*Client).invokeOperation
func costandusagereportserviceInvokeOperation(*costandusagereportservice_sdkv2.Client, context.Context, string, interface{}, []func(*costandusagereportservice_sdkv2.Options), ...func(*middleware.Stack, costandusagereportservice_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname costexplorerInvokeOperation github.com/aws/aws-sdk-go-v2/service/costexplorer.(*Client).invokeOperation
func costexplorerInvokeOperation(*costexplorer_sdkv2.Client, context.Context, string, interface{}, []func(*costexplorer_sdkv2.Options), ...func(*middleware.Stack, costexplorer_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname costoptimizationhubInvokeOperation github.com/aws/aws-sdk-go-v2/service/costoptimizationhub.(*Client).invokeOperation
func costoptimizationhubInvokeOperation(*costoptimizationhub_sdkv2.Client, context.Context, string, interface{}, []func(*costoptimizationhub_sdkv2.Options), ...func(*middleware.Stack, costoptimizationhub_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname customerprofilesInvokeOperation github.com/aws/aws-sdk-go-v2/service/customerprofiles.(*Client).invokeOperation
func customerprofilesInvokeOperation(*customerprofiles_sdkv2.Client, context.Context, string, interface{}, []func(*customerprofiles_sdkv2.Options), ...func(*middleware.Stack, customerprofiles_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname databasemigrationserviceInvokeOperation github.com/aws/aws-sdk-go-v2/service/databasemigrationservice.(*Client).invokeOperation
func databasemigrationserviceInvokeOperation(*databasemigrationservice_sdkv2.Client, context.Context, string, interface{}, []func(*databasemigrationservice_sdkv2.Options), ...func(*middleware.Stack, databasemigrationservice_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname databrewInvokeOperation github.com/aws/aws-sdk-go-v2/service/databrew.(*Client).invokeOperation
func databrewInvokeOperation(*databrew_sdkv2.Client, context.Context, string, interface{}, []func(*databrew_sdkv2.Options), ...func(*middleware.Stack, databrew_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname dataexchangeInvokeOperation github.com/aws/aws-sdk-go-v2/service/dataexchange.(*Client).invokeOperation
func dataexchangeInvokeOperation(*dataexchange_sdkv2.Client, context.Context, string, interface{}, []func(*dataexchange_sdkv2.Options), ...func(*middleware.Stack, dataexchange_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname datapipelineInvokeOperation github.com/aws/aws-sdk-go-v2/service/datapipeline.(*Client).invokeOperation
func datapipelineInvokeOperation(*datapipeline_sdkv2.Client, context.Context, string, interface{}, []func(*datapipeline_sdkv2.Options), ...func(*middleware.Stack, datapipeline_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname datasyncInvokeOperation github.com/aws/aws-sdk-go-v2/service/datasync.(*Client).invokeOperation
func datasyncInvokeOperation(*datasync_sdkv2.Client, context.Context, string, interface{}, []func(*datasync_sdkv2.Options), ...func(*middleware.Stack, datasync_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname datazoneInvokeOperation github.com/aws/aws-sdk-go-v2/service/datazone.(*Client).invokeOperation
func datazoneInvokeOperation(*datazone_sdkv2.Client, context.Context, string, interface{}, []func(*datazone_sdkv2.Options), ...func(*middleware.Stack, datazone_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname daxInvokeOperation github.com/aws/aws-sdk-go-v2/service/dax.(*Client).invokeOperation
func daxInvokeOperation(*dax_sdkv2.Client, context.Context, string, interface{}, []func(*dax_sdkv2.Options), ...func(*middleware.Stack, dax_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname deadlineInvokeOperation github.com/aws/aws-sdk-go-v2/service/deadline.(*Client).invokeOperation
func deadlineInvokeOperation(*deadline_sdkv2.Client, context.Context, string, interface{}, []func(*deadline_sdkv2.Options), ...func(*middleware.Stack, deadline_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname detectiveInvokeOperation github.com/aws/aws-sdk-go-v2/service/detective.(*Client).invokeOperation
func detectiveInvokeOperation(*detective_sdkv2.Client, context.Context, string, interface{}, []func(*detective_sdkv2.Options), ...func(*middleware.Stack, detective_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname devicefarmInvokeOperation github.com/aws/aws-sdk-go-v2/service/devicefarm.(*Client).invokeOperation
func devicefarmInvokeOperation(*devicefarm_sdkv2.Client, context.Context, string, interface{}, []func(*devicefarm_sdkv2.Options), ...func(*middleware.Stack, devicefarm_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname devopsguruInvokeOperation github.com/aws/aws-sdk-go-v2/service/devopsguru.(*Client).invokeOperation
func devopsguruInvokeOperation(*devopsguru_sdkv2.Client, context.Context, string, interface{}, []func(*devopsguru_sdkv2.Options), ...func(*middleware.Stack, devopsguru_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname directconnectInvokeOperation github.com/aws/aws-sdk-go-v2/service/directconnect.(*Client).invokeOperation
func directconnectInvokeOperation(*directconnect_sdkv2.Client, context.Context, string, interface{}, []func(*directconnect_sdkv2.Options), ...func(*middleware.Stack, directconnect_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname directoryserviceInvokeOperation github.com/aws/aws-sdk-go-v2/service/directoryservice.(*Client).invokeOperation
func directoryserviceInvokeOperation(*directoryservice_sdkv2.Client, context.Context, string, interface{}, []func(*directoryservice_sdkv2.Options), ...func(*middleware.Stack, directoryservice_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname dlmInvokeOperation github.com/aws/aws-sdk-go-v2/service/dlm.(*Client).invokeOperation
func dlmInvokeOperation(*dlm_sdkv2.Client, context.Context, string, interface{}, []func(*dlm_sdkv2.Options), ...func(*middleware.Stack, dlm_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname docdbInvokeOperation github.com/aws/aws-sdk-go-v2/service/docdb.(*Client).invokeOperation
func docdbInvokeOperation(*docdb_sdkv2.Client, context.Context, string, interface{}, []func(*docdb_sdkv2.Options), ...func(*middleware.Stack, docdb_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname docdbelasticInvokeOperation github.com/aws/aws-sdk-go-v2/service/docdbelastic.(*Client).invokeOperation
func docdbelasticInvokeOperation(*docdbelastic_sdkv2.Client, context.Context, string, interface{}, []func(*docdbelastic_sdkv2.Options), ...func(*middleware.Stack, docdbelastic_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname drsInvokeOperation github.com/aws/aws-sdk-go-v2/service/drs.(*Client).invokeOperation
func drsInvokeOperation(*drs_sdkv2.Client, context.Context, string, interface{}, []func(*drs_sdkv2.Options), ...func(*middleware.Stack, drs_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname dynamodbInvokeOperation github.com/aws/aws-sdk-go-v2/service/dynamodb.(*Client).invokeOperation
func dynamodbInvokeOperation(*dynamodb_sdkv2.Client, context.Context, string, interface{}, []func(*dynamodb_sdkv2.Options), ...func(*middleware.Stack, dynamodb_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname dynamodbstreamsInvokeOperation github.com/aws/aws-sdk-go-v2/service/dynamodbstreams.(*Client).invokeOperation
func dynamodbstreamsInvokeOperation(*dynamodbstreams_sdkv2.Client, context.Context, string, interface{}, []func(*dynamodbstreams_sdkv2.Options), ...func(*middleware.Stack, dynamodbstreams_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname ebsInvokeOperation github.com/aws/aws-sdk-go-v2/service/ebs.(*Client).invokeOperation
func ebsInvokeOperation(*ebs_sdkv2.Client, context.Context, string, interface{}, []func(*ebs_sdkv2.Options), ...func(*middleware.Stack, ebs_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname ec2InvokeOperation github.com/aws/aws-sdk-go-v2/service/ec2.(*Client).invokeOperation
func ec2InvokeOperation(*ec2_sdkv2.Client, context.Context, string, interface{}, []func(*ec2_sdkv2.Options), ...func(*middleware.Stack, ec2_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname ec2instanceconnectInvokeOperation github.com/aws/aws-sdk-go-v2/service/ec2instanceconnect.(*Client).invokeOperation
func ec2instanceconnectInvokeOperation(*ec2instanceconnect_sdkv2.Client, context.Context, string, interface{}, []func(*ec2instanceconnect_sdkv2.Options), ...func(*middleware.Stack, ec2instanceconnect_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname ecrInvokeOperation github.com/aws/aws-sdk-go-v2/service/ecr.(*Client).invokeOperation
func ecrInvokeOperation(*ecr_sdkv2.Client, context.Context, string, interface{}, []func(*ecr_sdkv2.Options), ...func(*middleware.Stack, ecr_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname ecrpublicInvokeOperation github.com/aws/aws-sdk-go-v2/service/ecrpublic.(*Client).invokeOperation
func ecrpublicInvokeOperation(*ecrpublic_sdkv2.Client, context.Context, string, interface{}, []func(*ecrpublic_sdkv2.Options), ...func(*middleware.Stack, ecrpublic_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname ecsInvokeOperation github.com/aws/aws-sdk-go-v2/service/ecs.(*Client).invokeOperation
func ecsInvokeOperation(*ecs_sdkv2.Client, context.Context, string, interface{}, []func(*ecs_sdkv2.Options), ...func(*middleware.Stack, ecs_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname efsInvokeOperation github.com/aws/aws-sdk-go-v2/service/efs.(*Client).invokeOperation
func efsInvokeOperation(*efs_sdkv2.Client, context.Context, string, interface{}, []func(*efs_sdkv2.Options), ...func(*middleware.Stack, efs_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname eksInvokeOperation github.com/aws/aws-sdk-go-v2/service/eks.(*Client).invokeOperation
func eksInvokeOperation(*eks_sdkv2.Client, context.Context, string, interface{}, []func(*eks_sdkv2.Options), ...func(*middleware.Stack, eks_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname eksauthInvokeOperation github.com/aws/aws-sdk-go-v2/service/eksauth.(*Client).invokeOperation
func eksauthInvokeOperation(*eksauth_sdkv2.Client, context.Context, string, interface{}, []func(*eksauth_sdkv2.Options), ...func(*middleware.Stack, eksauth_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname elasticacheInvokeOperation github.com/aws/aws-sdk-go-v2/service/elasticache.(*Client).invokeOperation
func elasticacheInvokeOperation(*elasticache_sdkv2.Client, context.Context, string, interface{}, []func(*elasticache_sdkv2.Options), ...func(*middleware.Stack, elasticache_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname elasticbeanstalkInvokeOperation github.com/aws/aws-sdk-go-v2/service/elasticbeanstalk.(*Client).invokeOperation
func elasticbeanstalkInvokeOperation(*elasticbeanstalk_sdkv2.Client, context.Context, string, interface{}, []func(*elasticbeanstalk_sdkv2.Options), ...func(*middleware.Stack, elasticbeanstalk_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname elasticinferenceInvokeOperation github.com/aws/aws-sdk-go-v2/service/elasticinference.(*Client).invokeOperation
func elasticinferenceInvokeOperation(*elasticinference_sdkv2.Client, context.Context, string, interface{}, []func(*elasticinference_sdkv2.Options), ...func(*middleware.Stack, elasticinference_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname elasticloadbalancingInvokeOperation github.com/aws/aws-sdk-go-v2/service/elasticloadbalancing.(*Client).invokeOperation
func elasticloadbalancingInvokeOperation(*elasticloadbalancing_sdkv2.Client, context.Context, string, interface{}, []func(*elasticloadbalancing_sdkv2.Options), ...func(*middleware.Stack, elasticloadbalancing_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname elasticloadbalancingv2InvokeOperation github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2.(*Client).invokeOperation
func elasticloadbalancingv2InvokeOperation(*elasticloadbalancingv2_sdkv2.Client, context.Context, string, interface{}, []func(*elasticloadbalancingv2_sdkv2.Options), ...func(*middleware.Stack, elasticloadbalancingv2_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname elasticsearchserviceInvokeOperation github.com/aws/aws-sdk-go-v2/service/elasticsearchservice.(*Client).invokeOperation
func elasticsearchserviceInvokeOperation(*elasticsearchservice_sdkv2.Client, context.Context, string, interface{}, []func(*elasticsearchservice_sdkv2.Options), ...func(*middleware.Stack, elasticsearchservice_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname elastictranscoderInvokeOperation github.com/aws/aws-sdk-go-v2/service/elastictranscoder.(*Client).invokeOperation
func elastictranscoderInvokeOperation(*elastictranscoder_sdkv2.Client, context.Context, string, interface{}, []func(*elastictranscoder_sdkv2.Options), ...func(*middleware.Stack, elastictranscoder_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname emrInvokeOperation github.com/aws/aws-sdk-go-v2/service/emr.(*Client).invokeOperation
func emrInvokeOperation(*emr_sdkv2.Client, context.Context, string, interface{}, []func(*emr_sdkv2.Options), ...func(*middleware.Stack, emr_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname emrcontainersInvokeOperation github.com/aws/aws-sdk-go-v2/service/emrcontainers.(*Client).invokeOperation
func emrcontainersInvokeOperation(*emrcontainers_sdkv2.Client, context.Context, string, interface{}, []func(*emrcontainers_sdkv2.Options), ...func(*middleware.Stack, emrcontainers_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname emrserverlessInvokeOperation github.com/aws/aws-sdk-go-v2/service/emrserverless.(*Client).invokeOperation
func emrserverlessInvokeOperation(*emrserverless_sdkv2.Client, context.Context, string, interface{}, []func(*emrserverless_sdkv2.Options), ...func(*middleware.Stack, emrserverless_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname entityresolutionInvokeOperation github.com/aws/aws-sdk-go-v2/service/entityresolution.(*Client).invokeOperation
func entityresolutionInvokeOperation(*entityresolution_sdkv2.Client, context.Context, string, interface{}, []func(*entityresolution_sdkv2.Options), ...func(*middleware.Stack, entityresolution_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname eventbridgeInvokeOperation github.com/aws/aws-sdk-go-v2/service/eventbridge.(*Client).invokeOperation
func eventbridgeInvokeOperation(*eventbridge_sdkv2.Client, context.Context, string, interface{}, []func(*eventbridge_sdkv2.Options), ...func(*middleware.Stack, eventbridge_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname evidentlyInvokeOperation github.com/aws/aws-sdk-go-v2/service/evidently.(*Client).invokeOperation
func evidentlyInvokeOperation(*evidently_sdkv2.Client, context.Context, string, interface{}, []func(*evidently_sdkv2.Options), ...func(*middleware.Stack, evidently_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname finspaceInvokeOperation github.com/aws/aws-sdk-go-v2/service/finspace.(*Client).invokeOperation
func finspaceInvokeOperation(*finspace_sdkv2.Client, context.Context, string, interface{}, []func(*finspace_sdkv2.Options), ...func(*middleware.Stack, finspace_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname finspacedataInvokeOperation github.com/aws/aws-sdk-go-v2/service/finspacedata.(*Client).invokeOperation
func finspacedataInvokeOperation(*finspacedata_sdkv2.Client, context.Context, string, interface{}, []func(*finspacedata_sdkv2.Options), ...func(*middleware.Stack, finspacedata_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname firehoseInvokeOperation github.com/aws/aws-sdk-go-v2/service/firehose.(*Client).invokeOperation
func firehoseInvokeOperation(*firehose_sdkv2.Client, context.Context, string, interface{}, []func(*firehose_sdkv2.Options), ...func(*middleware.Stack, firehose_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname fisInvokeOperation github.com/aws/aws-sdk-go-v2/service/fis.(*Client).invokeOperation
func fisInvokeOperation(*fis_sdkv2.Client, context.Context, string, interface{}, []func(*fis_sdkv2.Options), ...func(*middleware.Stack, fis_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname fmsInvokeOperation github.com/aws/aws-sdk-go-v2/service/fms.(*Client).invokeOperation
func fmsInvokeOperation(*fms_sdkv2.Client, context.Context, string, interface{}, []func(*fms_sdkv2.Options), ...func(*middleware.Stack, fms_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname forecastInvokeOperation github.com/aws/aws-sdk-go-v2/service/forecast.(*Client).invokeOperation
func forecastInvokeOperation(*forecast_sdkv2.Client, context.Context, string, interface{}, []func(*forecast_sdkv2.Options), ...func(*middleware.Stack, forecast_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname forecastqueryInvokeOperation github.com/aws/aws-sdk-go-v2/service/forecastquery.(*Client).invokeOperation
func forecastqueryInvokeOperation(*forecastquery_sdkv2.Client, context.Context, string, interface{}, []func(*forecastquery_sdkv2.Options), ...func(*middleware.Stack, forecastquery_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname frauddetectorInvokeOperation github.com/aws/aws-sdk-go-v2/service/frauddetector.(*Client).invokeOperation
func frauddetectorInvokeOperation(*frauddetector_sdkv2.Client, context.Context, string, interface{}, []func(*frauddetector_sdkv2.Options), ...func(*middleware.Stack, frauddetector_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname freetierInvokeOperation github.com/aws/aws-sdk-go-v2/service/freetier.(*Client).invokeOperation
func freetierInvokeOperation(*freetier_sdkv2.Client, context.Context, string, interface{}, []func(*freetier_sdkv2.Options), ...func(*middleware.Stack, freetier_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname fsxInvokeOperation github.com/aws/aws-sdk-go-v2/service/fsx.(*Client).invokeOperation
func fsxInvokeOperation(*fsx_sdkv2.Client, context.Context, string, interface{}, []func(*fsx_sdkv2.Options), ...func(*middleware.Stack, fsx_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname gameliftInvokeOperation github.com/aws/aws-sdk-go-v2/service/gamelift.(*Client).invokeOperation
func gameliftInvokeOperation(*gamelift_sdkv2.Client, context.Context, string, interface{}, []func(*gamelift_sdkv2.Options), ...func(*middleware.Stack, gamelift_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname glacierInvokeOperation github.com/aws/aws-sdk-go-v2/service/glacier.(*Client).invokeOperation
func glacierInvokeOperation(*glacier_sdkv2.Client, context.Context, string, interface{}, []func(*glacier_sdkv2.Options), ...func(*middleware.Stack, glacier_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname globalacceleratorInvokeOperation github.com/aws/aws-sdk-go-v2/service/globalaccelerator.(*Client).invokeOperation
func globalacceleratorInvokeOperation(*globalaccelerator_sdkv2.Client, context.Context, string, interface{}, []func(*globalaccelerator_sdkv2.Options), ...func(*middleware.Stack, globalaccelerator_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname glueInvokeOperation github.com/aws/aws-sdk-go-v2/service/glue.(*Client).invokeOperation
func glueInvokeOperation(*glue_sdkv2.Client, context.Context, string, interface{}, []func(*glue_sdkv2.Options), ...func(*middleware.Stack, glue_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname grafanaInvokeOperation github.com/aws/aws-sdk-go-v2/service/grafana.(*Client).invokeOperation
func grafanaInvokeOperation(*grafana_sdkv2.Client, context.Context, string, interface{}, []func(*grafana_sdkv2.Options), ...func(*middleware.Stack, grafana_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname greengrassInvokeOperation github.com/aws/aws-sdk-go-v2/service/greengrass.(*Client).invokeOperation
func greengrassInvokeOperation(*greengrass_sdkv2.Client, context.Context, string, interface{}, []func(*greengrass_sdkv2.Options), ...func(*middleware.Stack, greengrass_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname greengrassv2InvokeOperation github.com/aws/aws-sdk-go-v2/service/greengrassv2.(*Client).invokeOperation
func greengrassv2InvokeOperation(*greengrassv2_sdkv2.Client, context.Context, string, interface{}, []func(*greengrassv2_sdkv2.Options), ...func(*middleware.Stack, greengrassv2_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname groundstationInvokeOperation github.com/aws/aws-sdk-go-v2/service/groundstation.(*Client).invokeOperation
func groundstationInvokeOperation(*groundstation_sdkv2.Client, context.Context, string, interface{}, []func(*groundstation_sdkv2.Options), ...func(*middleware.Stack, groundstation_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname guarddutyInvokeOperation github.com/aws/aws-sdk-go-v2/service/guardduty.(*Client).invokeOperation
func guarddutyInvokeOperation(*guardduty_sdkv2.Client, context.Context, string, interface{}, []func(*guardduty_sdkv2.Options), ...func(*middleware.Stack, guardduty_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname healthInvokeOperation github.com/aws/aws-sdk-go-v2/service/health.(*Client).invokeOperation
func healthInvokeOperation(*health_sdkv2.Client, context.Context, string, interface{}, []func(*health_sdkv2.Options), ...func(*middleware.Stack, health_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname healthlakeInvokeOperation github.com/aws/aws-sdk-go-v2/service/healthlake.(*Client).invokeOperation
func healthlakeInvokeOperation(*healthlake_sdkv2.Client, context.Context, string, interface{}, []func(*healthlake_sdkv2.Options), ...func(*middleware.Stack, healthlake_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname iamInvokeOperation github.com/aws/aws-sdk-go-v2/service/iam.(*Client).invokeOperation
func iamInvokeOperation(*iam_sdkv2.Client, context.Context, string, interface{}, []func(*iam_sdkv2.Options), ...func(*middleware.Stack, iam_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname identitystoreInvokeOperation github.com/aws/aws-sdk-go-v2/service/identitystore.(*Client).invokeOperation
func identitystoreInvokeOperation(*identitystore_sdkv2.Client, context.Context, string, interface{}, []func(*identitystore_sdkv2.Options), ...func(*middleware.Stack, identitystore_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname imagebuilderInvokeOperation github.com/aws/aws-sdk-go-v2/service/imagebuilder.(*Client).invokeOperation
func imagebuilderInvokeOperation(*imagebuilder_sdkv2.Client, context.Context, string, interface{}, []func(*imagebuilder_sdkv2.Options), ...func(*middleware.Stack, imagebuilder_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname inspectorInvokeOperation github.com/aws/aws-sdk-go-v2/service/inspector.(*Client).invokeOperation
func inspectorInvokeOperation(*inspector_sdkv2.Client, context.Context, string, interface{}, []func(*inspector_sdkv2.Options), ...func(*middleware.Stack, inspector_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname inspector2InvokeOperation github.com/aws/aws-sdk-go-v2/service/inspector2.(*Client).invokeOperation
func inspector2InvokeOperation(*inspector2_sdkv2.Client, context.Context, string, interface{}, []func(*inspector2_sdkv2.Options), ...func(*middleware.Stack, inspector2_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname inspectorscanInvokeOperation github.com/aws/aws-sdk-go-v2/service/inspectorscan.(*Client).invokeOperation
func inspectorscanInvokeOperation(*inspectorscan_sdkv2.Client, context.Context, string, interface{}, []func(*inspectorscan_sdkv2.Options), ...func(*middleware.Stack, inspectorscan_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname internetmonitorInvokeOperation github.com/aws/aws-sdk-go-v2/service/internetmonitor.(*Client).invokeOperation
func internetmonitorInvokeOperation(*internetmonitor_sdkv2.Client, context.Context, string, interface{}, []func(*internetmonitor_sdkv2.Options), ...func(*middleware.Stack, internetmonitor_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname iotInvokeOperation github.com/aws/aws-sdk-go-v2/service/iot.(*Client).invokeOperation
func iotInvokeOperation(*iot_sdkv2.Client, context.Context, string, interface{}, []func(*iot_sdkv2.Options), ...func(*middleware.Stack, iot_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname iot1clickdevicesserviceInvokeOperation github.com/aws/aws-sdk-go-v2/service/iot1clickdevicesservice.(*Client).invokeOperation
func iot1clickdevicesserviceInvokeOperation(*iot1clickdevicesservice_sdkv2.Client, context.Context, string, interface{}, []func(*iot1clickdevicesservice_sdkv2.Options), ...func(*middleware.Stack, iot1clickdevicesservice_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname iot1clickprojectsInvokeOperation github.com/aws/aws-sdk-go-v2/service/iot1clickprojects.(*Client).invokeOperation
func iot1clickprojectsInvokeOperation(*iot1clickprojects_sdkv2.Client, context.Context, string, interface{}, []func(*iot1clickprojects_sdkv2.Options), ...func(*middleware.Stack, iot1clickprojects_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname iotanalyticsInvokeOperation github.com/aws/aws-sdk-go-v2/service/iotanalytics.(*Client).invokeOperation
func iotanalyticsInvokeOperation(*iotanalytics_sdkv2.Client, context.Context, string, interface{}, []func(*iotanalytics_sdkv2.Options), ...func(*middleware.Stack, iotanalytics_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname iotdataplaneInvokeOperation github.com/aws/aws-sdk-go-v2/service/iotdataplane.(*Client).invokeOperation
func iotdataplaneInvokeOperation(*iotdataplane_sdkv2.Client, context.Context, string, interface{}, []func(*iotdataplane_sdkv2.Options), ...func(*middleware.Stack, iotdataplane_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname iotdeviceadvisorInvokeOperation github.com/aws/aws-sdk-go-v2/service/iotdeviceadvisor.(*Client).invokeOperation
func iotdeviceadvisorInvokeOperation(*iotdeviceadvisor_sdkv2.Client, context.Context, string, interface{}, []func(*iotdeviceadvisor_sdkv2.Options), ...func(*middleware.Stack, iotdeviceadvisor_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname ioteventsInvokeOperation github.com/aws/aws-sdk-go-v2/service/iotevents.(*Client).invokeOperation
func ioteventsInvokeOperation(*iotevents_sdkv2.Client, context.Context, string, interface{}, []func(*iotevents_sdkv2.Options), ...func(*middleware.Stack, iotevents_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname ioteventsdataInvokeOperation github.com/aws/aws-sdk-go-v2/service/ioteventsdata.(*Client).invokeOperation
func ioteventsdataInvokeOperation(*ioteventsdata_sdkv2.Client, context.Context, string, interface{}, []func(*ioteventsdata_sdkv2.Options), ...func(*middleware.Stack, ioteventsdata_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname iotfleethubInvokeOperation github.com/aws/aws-sdk-go-v2/service/iotfleethub.(*Client).invokeOperation
func iotfleethubInvokeOperation(*iotfleethub_sdkv2.Client, context.Context, string, interface{}, []func(*iotfleethub_sdkv2.Options), ...func(*middleware.Stack, iotfleethub_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname iotfleetwiseInvokeOperation github.com/aws/aws-sdk-go-v2/service/iotfleetwise.(*Client).invokeOperation
func iotfleetwiseInvokeOperation(*iotfleetwise_sdkv2.Client, context.Context, string, interface{}, []func(*iotfleetwise_sdkv2.Options), ...func(*middleware.Stack, iotfleetwise_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname iotjobsdataplaneInvokeOperation github.com/aws/aws-sdk-go-v2/service/iotjobsdataplane.(*Client).invokeOperation
func iotjobsdataplaneInvokeOperation(*iotjobsdataplane_sdkv2.Client, context.Context, string, interface{}, []func(*iotjobsdataplane_sdkv2.Options), ...func(*middleware.Stack, iotjobsdataplane_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname iotsecuretunnelingInvokeOperation github.com/aws/aws-sdk-go-v2/service/iotsecuretunneling.(*Client).invokeOperation
func iotsecuretunnelingInvokeOperation(*iotsecuretunneling_sdkv2.Client, context.Context, string, interface{}, []func(*iotsecuretunneling_sdkv2.Options), ...func(*middleware.Stack, iotsecuretunneling_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname iotsitewiseInvokeOperation github.com/aws/aws-sdk-go-v2/service/iotsitewise.(*Client).invokeOperation
func iotsitewiseInvokeOperation(*iotsitewise_sdkv2.Client, context.Context, string, interface{}, []func(*iotsitewise_sdkv2.Options), ...func(*middleware.Stack, iotsitewise_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname iotthingsgraphInvokeOperation github.com/aws/aws-sdk-go-v2/service/iotthingsgraph.(*Client).invokeOperation
func iotthingsgraphInvokeOperation(*iotthingsgraph_sdkv2.Client, context.Context, string, interface{}, []func(*iotthingsgraph_sdkv2.Options), ...func(*middleware.Stack, iotthingsgraph_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname iottwinmakerInvokeOperation github.com/aws/aws-sdk-go-v2/service/iottwinmaker.(*Client).invokeOperation
func iottwinmakerInvokeOperation(*iottwinmaker_sdkv2.Client, context.Context, string, interface{}, []func(*iottwinmaker_sdkv2.Options), ...func(*middleware.Stack, iottwinmaker_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname iotwirelessInvokeOperation github.com/aws/aws-sdk-go-v2/service/iotwireless.(*Client).invokeOperation
func iotwirelessInvokeOperation(*iotwireless_sdkv2.Client, context.Context, string, interface{}, []func(*iotwireless_sdkv2.Options), ...func(*middleware.Stack, iotwireless_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname ivsInvokeOperation github.com/aws/aws-sdk-go-v2/service/ivs.(*Client).invokeOperation
func ivsInvokeOperation(*ivs_sdkv2.Client, context.Context, string, interface{}, []func(*ivs_sdkv2.Options), ...func(*middleware.Stack, ivs_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname ivschatInvokeOperation github.com/aws/aws-sdk-go-v2/service/ivschat.(*Client).invokeOperation
func ivschatInvokeOperation(*ivschat_sdkv2.Client, context.Context, string, interface{}, []func(*ivschat_sdkv2.Options), ...func(*middleware.Stack, ivschat_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname ivsrealtimeInvokeOperation github.com/aws/aws-sdk-go-v2/service/ivsrealtime.(*Client).invokeOperation
func ivsrealtimeInvokeOperation(*ivsrealtime_sdkv2.Client, context.Context, string, interface{}, []func(*ivsrealtime_sdkv2.Options), ...func(*middleware.Stack, ivsrealtime_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname kafkaInvokeOperation github.com/aws/aws-sdk-go-v2/service/kafka.(*Client).invokeOperation
func kafkaInvokeOperation(*kafka_sdkv2.Client, context.Context, string, interface{}, []func(*kafka_sdkv2.Options), ...func(*middleware.Stack, kafka_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname kafkaconnectInvokeOperation github.com/aws/aws-sdk-go-v2/service/kafkaconnect.(*Client).invokeOperation
func kafkaconnectInvokeOperation(*kafkaconnect_sdkv2.Client, context.Context, string, interface{}, []func(*kafkaconnect_sdkv2.Options), ...func(*middleware.Stack, kafkaconnect_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname kendraInvokeOperation github.com/aws/aws-sdk-go-v2/service/kendra.(*Client).invokeOperation
func kendraInvokeOperation(*kendra_sdkv2.Client, context.Context, string, interface{}, []func(*kendra_sdkv2.Options), ...func(*middleware.Stack, kendra_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname kendrarankingInvokeOperation github.com/aws/aws-sdk-go-v2/service/kendraranking.(*Client).invokeOperation
func kendrarankingInvokeOperation(*kendraranking_sdkv2.Client, context.Context, string, interface{}, []func(*kendraranking_sdkv2.Options), ...func(*middleware.Stack, kendraranking_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname keyspacesInvokeOperation github.com/aws/aws-sdk-go-v2/service/keyspaces.(*Client).invokeOperation
func keyspacesInvokeOperation(*keyspaces_sdkv2.Client, context.Context, string, interface{}, []func(*keyspaces_sdkv2.Options), ...func(*middleware.Stack, keyspaces_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname kinesisInvokeOperation github.com/aws/aws-sdk-go-v2/service/kinesis.(*Client).invokeOperation
func kinesisInvokeOperation(*kinesis_sdkv2.Client, context.Context, string, interface{}, []func(*kinesis_sdkv2.Options), ...func(*middleware.Stack, kinesis_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname kinesisanalyticsInvokeOperation github.com/aws/aws-sdk-go-v2/service/kinesisanalytics.(*Client).invokeOperation
func kinesisanalyticsInvokeOperation(*kinesisanalytics_sdkv2.Client, context.Context, string, interface{}, []func(*kinesisanalytics_sdkv2.Options), ...func(*middleware.Stack, kinesisanalytics_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname kinesisanalyticsv2InvokeOperation github.com/aws/aws-sdk-go-v2/service/kinesisanalyticsv2.(*Client).invokeOperation
func kinesisanalyticsv2InvokeOperation(*kinesisanalyticsv2_sdkv2.Client, context.Context, string, interface{}, []func(*kinesisanalyticsv2_sdkv2.Options), ...func(*middleware.Stack, kinesisanalyticsv2_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname kinesisvideoInvokeOperation github.com/aws/aws-sdk-go-v2/service/kinesisvideo.(*Client).invokeOperation
func kinesisvideoInvokeOperation(*kinesisvideo_sdkv2.Client, context.Context, string, interface{}, []func(*kinesisvideo_sdkv2.Options), ...func(*middleware.Stack, kinesisvideo_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname kinesisvideoarchivedmediaInvokeOperation github.com/aws/aws-sdk-go-v2/service/kinesisvideoarchivedmedia.(*Client).invokeOperation
func kinesisvideoarchivedmediaInvokeOperation(*kinesisvideoarchivedmedia_sdkv2.Client, context.Context, string, interface{}, []func(*kinesisvideoarchivedmedia_sdkv2.Options), ...func(*middleware.Stack, kinesisvideoarchivedmedia_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname kinesisvideomediaInvokeOperation github.com/aws/aws-sdk-go-v2/service/kinesisvideomedia.(*Client).invokeOperation
func kinesisvideomediaInvokeOperation(*kinesisvideomedia_sdkv2.Client, context.Context, string, interface{}, []func(*kinesisvideomedia_sdkv2.Options), ...func(*middleware.Stack, kinesisvideomedia_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname kinesisvideosignalingInvokeOperation github.com/aws/aws-sdk-go-v2/service/kinesisvideosignaling.(*Client).invokeOperation
func kinesisvideosignalingInvokeOperation(*kinesisvideosignaling_sdkv2.Client, context.Context, string, interface{}, []func(*kinesisvideosignaling_sdkv2.Options), ...func(*middleware.Stack, kinesisvideosignaling_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname kinesisvideowebrtcstorageInvokeOperation github.com/aws/aws-sdk-go-v2/service/kinesisvideowebrtcstorage.(*Client).invokeOperation
func kinesisvideowebrtcstorageInvokeOperation(*kinesisvideowebrtcstorage_sdkv2.Client, context.Context, string, interface{}, []func(*kinesisvideowebrtcstorage_sdkv2.Options), ...func(*middleware.Stack, kinesisvideowebrtcstorage_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname kmsInvokeOperation github.com/aws/aws-sdk-go-v2/service/kms.(*Client).invokeOperation
func kmsInvokeOperation(*kms_sdkv2.Client, context.Context, string, interface{}, []func(*kms_sdkv2.Options), ...func(*middleware.Stack, kms_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname lakeformationInvokeOperation github.com/aws/aws-sdk-go-v2/service/lakeformation.(*Client).invokeOperation
func lakeformationInvokeOperation(*lakeformation_sdkv2.Client, context.Context, string, interface{}, []func(*lakeformation_sdkv2.Options), ...func(*middleware.Stack, lakeformation_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname lambdaInvokeOperation github.com/aws/aws-sdk-go-v2/service/lambda.(*Client).invokeOperation
func lambdaInvokeOperation(*lambda_sdkv2.Client, context.Context, string, interface{}, []func(*lambda_sdkv2.Options), ...func(*middleware.Stack, lambda_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname launchwizardInvokeOperation github.com/aws/aws-sdk-go-v2/service/launchwizard.(*Client).invokeOperation
func launchwizardInvokeOperation(*launchwizard_sdkv2.Client, context.Context, string, interface{}, []func(*launchwizard_sdkv2.Options), ...func(*middleware.Stack, launchwizard_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname lexmodelbuildingserviceInvokeOperation github.com/aws/aws-sdk-go-v2/service/lexmodelbuildingservice.(*Client).invokeOperation
func lexmodelbuildingserviceInvokeOperation(*lexmodelbuildingservice_sdkv2.Client, context.Context, string, interface{}, []func(*lexmodelbuildingservice_sdkv2.Options), ...func(*middleware.Stack, lexmodelbuildingservice_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname lexmodelsv2InvokeOperation github.com/aws/aws-sdk-go-v2/service/lexmodelsv2.(*Client).invokeOperation
func lexmodelsv2InvokeOperation(*lexmodelsv2_sdkv2.Client, context.Context, string, interface{}, []func(*lexmodelsv2_sdkv2.Options), ...func(*middleware.Stack, lexmodelsv2_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname lexruntimeserviceInvokeOperation github.com/aws/aws-sdk-go-v2/service/lexruntimeservice.(*Client).invokeOperation
func lexruntimeserviceInvokeOperation(*lexruntimeservice_sdkv2.Client, context.Context, string, interface{}, []func(*lexruntimeservice_sdkv2.Options), ...func(*middleware.Stack, lexruntimeservice_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname lexruntimev2InvokeOperation github.com/aws/aws-sdk-go-v2/service/lexruntimev2.(*Client).invokeOperation
func lexruntimev2InvokeOperation(*lexruntimev2_sdkv2.Client, context.Context, string, interface{}, []func(*lexruntimev2_sdkv2.Options), ...func(*middleware.Stack, lexruntimev2_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname licensemanagerInvokeOperation github.com/aws/aws-sdk-go-v2/service/licensemanager.(*Client).invokeOperation
func licensemanagerInvokeOperation(*licensemanager_sdkv2.Client, context.Context, string, interface{}, []func(*licensemanager_sdkv2.Options), ...func(*middleware.Stack, licensemanager_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname licensemanagerlinuxsubscriptionsInvokeOperation github.com/aws/aws-sdk-go-v2/service/licensemanagerlinuxsubscriptions.(*Client).invokeOperation
func licensemanagerlinuxsubscriptionsInvokeOperation(*licensemanagerlinuxsubscriptions_sdkv2.Client, context.Context, string, interface{}, []func(*licensemanagerlinuxsubscriptions_sdkv2.Options), ...func(*middleware.Stack, licensemanagerlinuxsubscriptions_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname licensemanagerusersubscriptionsInvokeOperation github.com/aws/aws-sdk-go-v2/service/licensemanagerusersubscriptions.(*Client).invokeOperation
func licensemanagerusersubscriptionsInvokeOperation(*licensemanagerusersubscriptions_sdkv2.Client, context.Context, string, interface{}, []func(*licensemanagerusersubscriptions_sdkv2.Options), ...func(*middleware.Stack, licensemanagerusersubscriptions_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname lightsailInvokeOperation github.com/aws/aws-sdk-go-v2/service/lightsail.(*Client).invokeOperation
func lightsailInvokeOperation(*lightsail_sdkv2.Client, context.Context, string, interface{}, []func(*lightsail_sdkv2.Options), ...func(*middleware.Stack, lightsail_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname locationInvokeOperation github.com/aws/aws-sdk-go-v2/service/location.(*Client).invokeOperation
func locationInvokeOperation(*location_sdkv2.Client, context.Context, string, interface{}, []func(*location_sdkv2.Options), ...func(*middleware.Stack, location_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname lookoutequipmentInvokeOperation github.com/aws/aws-sdk-go-v2/service/lookoutequipment.(*Client).invokeOperation
func lookoutequipmentInvokeOperation(*lookoutequipment_sdkv2.Client, context.Context, string, interface{}, []func(*lookoutequipment_sdkv2.Options), ...func(*middleware.Stack, lookoutequipment_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname lookoutmetricsInvokeOperation github.com/aws/aws-sdk-go-v2/service/lookoutmetrics.(*Client).invokeOperation
func lookoutmetricsInvokeOperation(*lookoutmetrics_sdkv2.Client, context.Context, string, interface{}, []func(*lookoutmetrics_sdkv2.Options), ...func(*middleware.Stack, lookoutmetrics_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname lookoutvisionInvokeOperation github.com/aws/aws-sdk-go-v2/service/lookoutvision.(*Client).invokeOperation
func lookoutvisionInvokeOperation(*lookoutvision_sdkv2.Client, context.Context, string, interface{}, []func(*lookoutvision_sdkv2.Options), ...func(*middleware.Stack, lookoutvision_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname m2InvokeOperation github.com/aws/aws-sdk-go-v2/service/m2.(*Client).invokeOperation
func m2InvokeOperation(*m2_sdkv2.Client, context.Context, string, interface{}, []func(*m2_sdkv2.Options), ...func(*middleware.Stack, m2_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname machinelearningInvokeOperation github.com/aws/aws-sdk-go-v2/service/machinelearning.(*Client).invokeOperation
func machinelearningInvokeOperation(*machinelearning_sdkv2.Client, context.Context, string, interface{}, []func(*machinelearning_sdkv2.Options), ...func(*middleware.Stack, machinelearning_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname macie2InvokeOperation github.com/aws/aws-sdk-go-v2/service/macie2.(*Client).invokeOperation
func macie2InvokeOperation(*macie2_sdkv2.Client, context.Context, string, interface{}, []func(*macie2_sdkv2.Options), ...func(*middleware.Stack, macie2_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname mailmanagerInvokeOperation github.com/aws/aws-sdk-go-v2/service/mailmanager.(*Client).invokeOperation
func mailmanagerInvokeOperation(*mailmanager_sdkv2.Client, context.Context, string, interface{}, []func(*mailmanager_sdkv2.Options), ...func(*middleware.Stack, mailmanager_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname managedblockchainInvokeOperation github.com/aws/aws-sdk-go-v2/service/managedblockchain.(*Client).invokeOperation
func managedblockchainInvokeOperation(*managedblockchain_sdkv2.Client, context.Context, string, interface{}, []func(*managedblockchain_sdkv2.Options), ...func(*middleware.Stack, managedblockchain_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname managedblockchainqueryInvokeOperation github.com/aws/aws-sdk-go-v2/service/managedblockchainquery.(*Client).invokeOperation
func managedblockchainqueryInvokeOperation(*managedblockchainquery_sdkv2.Client, context.Context, string, interface{}, []func(*managedblockchainquery_sdkv2.Options), ...func(*middleware.Stack, managedblockchainquery_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname marketplaceagreementInvokeOperation github.com/aws/aws-sdk-go-v2/service/marketplaceagreement.(*Client).invokeOperation
func marketplaceagreementInvokeOperation(*marketplaceagreement_sdkv2.Client, context.Context, string, interface{}, []func(*marketplaceagreement_sdkv2.Options), ...func(*middleware.Stack, marketplaceagreement_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname marketplacecatalogInvokeOperation github.com/aws/aws-sdk-go-v2/service/marketplacecatalog.(*Client).invokeOperation
func marketplacecatalogInvokeOperation(*marketplacecatalog_sdkv2.Client, context.Context, string, interface{}, []func(*marketplacecatalog_sdkv2.Options), ...func(*middleware.Stack, marketplacecatalog_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname marketplacecommerceanalyticsInvokeOperation github.com/aws/aws-sdk-go-v2/service/marketplacecommerceanalytics.(*Client).invokeOperation
func marketplacecommerceanalyticsInvokeOperation(*marketplacecommerceanalytics_sdkv2.Client, context.Context, string, interface{}, []func(*marketplacecommerceanalytics_sdkv2.Options), ...func(*middleware.Stack, marketplacecommerceanalytics_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname marketplacedeploymentInvokeOperation github.com/aws/aws-sdk-go-v2/service/marketplacedeployment.(*Client).invokeOperation
func marketplacedeploymentInvokeOperation(*marketplacedeployment_sdkv2.Client, context.Context, string, interface{}, []func(*marketplacedeployment_sdkv2.Options), ...func(*middleware.Stack, marketplacedeployment_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname marketplaceentitlementserviceInvokeOperation github.com/aws/aws-sdk-go-v2/service/marketplaceentitlementservice.(*Client).invokeOperation
func marketplaceentitlementserviceInvokeOperation(*marketplaceentitlementservice_sdkv2.Client, context.Context, string, interface{}, []func(*marketplaceentitlementservice_sdkv2.Options), ...func(*middleware.Stack, marketplaceentitlementservice_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname marketplacemeteringInvokeOperation github.com/aws/aws-sdk-go-v2/service/marketplacemetering.(*Client).invokeOperation
func marketplacemeteringInvokeOperation(*marketplacemetering_sdkv2.Client, context.Context, string, interface{}, []func(*marketplacemetering_sdkv2.Options), ...func(*middleware.Stack, marketplacemetering_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname mediaconnectInvokeOperation github.com/aws/aws-sdk-go-v2/service/mediaconnect.(*Client).invokeOperation
func mediaconnectInvokeOperation(*mediaconnect_sdkv2.Client, context.Context, string, interface{}, []func(*mediaconnect_sdkv2.Options), ...func(*middleware.Stack, mediaconnect_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname mediaconvertInvokeOperation github.com/aws/aws-sdk-go-v2/service/mediaconvert.(*Client).invokeOperation
func mediaconvertInvokeOperation(*mediaconvert_sdkv2.Client, context.Context, string, interface{}, []func(*mediaconvert_sdkv2.Options), ...func(*middleware.Stack, mediaconvert_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname medialiveInvokeOperation github.com/aws/aws-sdk-go-v2/service/medialive.(*Client).invokeOperation
func medialiveInvokeOperation(*medialive_sdkv2.Client, context.Context, string, interface{}, []func(*medialive_sdkv2.Options), ...func(*middleware.Stack, medialive_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname mediapackageInvokeOperation github.com/aws/aws-sdk-go-v2/service/mediapackage.(*Client).invokeOperation
func mediapackageInvokeOperation(*mediapackage_sdkv2.Client, context.Context, string, interface{}, []func(*mediapackage_sdkv2.Options), ...func(*middleware.Stack, mediapackage_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname mediapackagev2InvokeOperation github.com/aws/aws-sdk-go-v2/service/mediapackagev2.(*Client).invokeOperation
func mediapackagev2InvokeOperation(*mediapackagev2_sdkv2.Client, context.Context, string, interface{}, []func(*mediapackagev2_sdkv2.Options), ...func(*middleware.Stack, mediapackagev2_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname mediapackagevodInvokeOperation github.com/aws/aws-sdk-go-v2/service/mediapackagevod.(*Client).invokeOperation
func mediapackagevodInvokeOperation(*mediapackagevod_sdkv2.Client, context.Context, string, interface{}, []func(*mediapackagevod_sdkv2.Options), ...func(*middleware.Stack, mediapackagevod_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname mediastoreInvokeOperation github.com/aws/aws-sdk-go-v2/service/mediastore.(*Client).invokeOperation
func mediastoreInvokeOperation(*mediastore_sdkv2.Client, context.Context, string, interface{}, []func(*mediastore_sdkv2.Options), ...func(*middleware.Stack, mediastore_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname mediastoredataInvokeOperation github.com/aws/aws-sdk-go-v2/service/mediastoredata.(*Client).invokeOperation
func mediastoredataInvokeOperation(*mediastoredata_sdkv2.Client, context.Context, string, interface{}, []func(*mediastoredata_sdkv2.Options), ...func(*middleware.Stack, mediastoredata_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname mediatailorInvokeOperation github.com/aws/aws-sdk-go-v2/service/mediatailor.(*Client).invokeOperation
func mediatailorInvokeOperation(*mediatailor_sdkv2.Client, context.Context, string, interface{}, []func(*mediatailor_sdkv2.Options), ...func(*middleware.Stack, mediatailor_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname medicalimagingInvokeOperation github.com/aws/aws-sdk-go-v2/service/medicalimaging.(*Client).invokeOperation
func medicalimagingInvokeOperation(*medicalimaging_sdkv2.Client, context.Context, string, interface{}, []func(*medicalimaging_sdkv2.Options), ...func(*middleware.Stack, medicalimaging_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname memorydbInvokeOperation github.com/aws/aws-sdk-go-v2/service/memorydb.(*Client).invokeOperation
func memorydbInvokeOperation(*memorydb_sdkv2.Client, context.Context, string, interface{}, []func(*memorydb_sdkv2.Options), ...func(*middleware.Stack, memorydb_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname mgnInvokeOperation github.com/aws/aws-sdk-go-v2/service/mgn.(*Client).invokeOperation
func mgnInvokeOperation(*mgn_sdkv2.Client, context.Context, string, interface{}, []func(*mgn_sdkv2.Options), ...func(*middleware.Stack, mgn_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname migrationhubInvokeOperation github.com/aws/aws-sdk-go-v2/service/migrationhub.(*Client).invokeOperation
func migrationhubInvokeOperation(*migrationhub_sdkv2.Client, context.Context, string, interface{}, []func(*migrationhub_sdkv2.Options), ...func(*middleware.Stack, migrationhub_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname migrationhubconfigInvokeOperation github.com/aws/aws-sdk-go-v2/service/migrationhubconfig.(*Client).invokeOperation
func migrationhubconfigInvokeOperation(*migrationhubconfig_sdkv2.Client, context.Context, string, interface{}, []func(*migrationhubconfig_sdkv2.Options), ...func(*middleware.Stack, migrationhubconfig_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname migrationhuborchestratorInvokeOperation github.com/aws/aws-sdk-go-v2/service/migrationhuborchestrator.(*Client).invokeOperation
func migrationhuborchestratorInvokeOperation(*migrationhuborchestrator_sdkv2.Client, context.Context, string, interface{}, []func(*migrationhuborchestrator_sdkv2.Options), ...func(*middleware.Stack, migrationhuborchestrator_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname migrationhubrefactorspacesInvokeOperation github.com/aws/aws-sdk-go-v2/service/migrationhubrefactorspaces.(*Client).invokeOperation
func migrationhubrefactorspacesInvokeOperation(*migrationhubrefactorspaces_sdkv2.Client, context.Context, string, interface{}, []func(*migrationhubrefactorspaces_sdkv2.Options), ...func(*middleware.Stack, migrationhubrefactorspaces_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname migrationhubstrategyInvokeOperation github.com/aws/aws-sdk-go-v2/service/migrationhubstrategy.(*Client).invokeOperation
func migrationhubstrategyInvokeOperation(*migrationhubstrategy_sdkv2.Client, context.Context, string, interface{}, []func(*migrationhubstrategy_sdkv2.Options), ...func(*middleware.Stack, migrationhubstrategy_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname mobileInvokeOperation github.com/aws/aws-sdk-go-v2/service/mobile.(*Client).invokeOperation
func mobileInvokeOperation(*mobile_sdkv2.Client, context.Context, string, interface{}, []func(*mobile_sdkv2.Options), ...func(*middleware.Stack, mobile_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname mqInvokeOperation github.com/aws/aws-sdk-go-v2/service/mq.(*Client).invokeOperation
func mqInvokeOperation(*mq_sdkv2.Client, context.Context, string, interface{}, []func(*mq_sdkv2.Options), ...func(*middleware.Stack, mq_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname mturkInvokeOperation github.com/aws/aws-sdk-go-v2/service/mturk.(*Client).invokeOperation
func mturkInvokeOperation(*mturk_sdkv2.Client, context.Context, string, interface{}, []func(*mturk_sdkv2.Options), ...func(*middleware.Stack, mturk_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname mwaaInvokeOperation github.com/aws/aws-sdk-go-v2/service/mwaa.(*Client).invokeOperation
func mwaaInvokeOperation(*mwaa_sdkv2.Client, context.Context, string, interface{}, []func(*mwaa_sdkv2.Options), ...func(*middleware.Stack, mwaa_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname neptuneInvokeOperation github.com/aws/aws-sdk-go-v2/service/neptune.(*Client).invokeOperation
func neptuneInvokeOperation(*neptune_sdkv2.Client, context.Context, string, interface{}, []func(*neptune_sdkv2.Options), ...func(*middleware.Stack, neptune_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname neptunedataInvokeOperation github.com/aws/aws-sdk-go-v2/service/neptunedata.(*Client).invokeOperation
func neptunedataInvokeOperation(*neptunedata_sdkv2.Client, context.Context, string, interface{}, []func(*neptunedata_sdkv2.Options), ...func(*middleware.Stack, neptunedata_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname neptunegraphInvokeOperation github.com/aws/aws-sdk-go-v2/service/neptunegraph.(*Client).invokeOperation
func neptunegraphInvokeOperation(*neptunegraph_sdkv2.Client, context.Context, string, interface{}, []func(*neptunegraph_sdkv2.Options), ...func(*middleware.Stack, neptunegraph_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname networkfirewallInvokeOperation github.com/aws/aws-sdk-go-v2/service/networkfirewall.(*Client).invokeOperation
func networkfirewallInvokeOperation(*networkfirewall_sdkv2.Client, context.Context, string, interface{}, []func(*networkfirewall_sdkv2.Options), ...func(*middleware.Stack, networkfirewall_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname networkmanagerInvokeOperation github.com/aws/aws-sdk-go-v2/service/networkmanager.(*Client).invokeOperation
func networkmanagerInvokeOperation(*networkmanager_sdkv2.Client, context.Context, string, interface{}, []func(*networkmanager_sdkv2.Options), ...func(*middleware.Stack, networkmanager_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname networkmonitorInvokeOperation github.com/aws/aws-sdk-go-v2/service/networkmonitor.(*Client).invokeOperation
func networkmonitorInvokeOperation(*networkmonitor_sdkv2.Client, context.Context, string, interface{}, []func(*networkmonitor_sdkv2.Options), ...func(*middleware.Stack, networkmonitor_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname nimbleInvokeOperation github.com/aws/aws-sdk-go-v2/service/nimble.(*Client).invokeOperation
func nimbleInvokeOperation(*nimble_sdkv2.Client, context.Context, string, interface{}, []func(*nimble_sdkv2.Options), ...func(*middleware.Stack, nimble_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname oamInvokeOperation github.com/aws/aws-sdk-go-v2/service/oam.(*Client).invokeOperation
func oamInvokeOperation(*oam_sdkv2.Client, context.Context, string, interface{}, []func(*oam_sdkv2.Options), ...func(*middleware.Stack, oam_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname omicsInvokeOperation github.com/aws/aws-sdk-go-v2/service/omics.(*Client).invokeOperation
func omicsInvokeOperation(*omics_sdkv2.Client, context.Context, string, interface{}, []func(*omics_sdkv2.Options), ...func(*middleware.Stack, omics_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname opensearchInvokeOperation github.com/aws/aws-sdk-go-v2/service/opensearch.(*Client).invokeOperation
func opensearchInvokeOperation(*opensearch_sdkv2.Client, context.Context, string, interface{}, []func(*opensearch_sdkv2.Options), ...func(*middleware.Stack, opensearch_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname opensearchserverlessInvokeOperation github.com/aws/aws-sdk-go-v2/service/opensearchserverless.(*Client).invokeOperation
func opensearchserverlessInvokeOperation(*opensearchserverless_sdkv2.Client, context.Context, string, interface{}, []func(*opensearchserverless_sdkv2.Options), ...func(*middleware.Stack, opensearchserverless_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname opsworksInvokeOperation github.com/aws/aws-sdk-go-v2/service/opsworks.(*Client).invokeOperation
func opsworksInvokeOperation(*opsworks_sdkv2.Client, context.Context, string, interface{}, []func(*opsworks_sdkv2.Options), ...func(*middleware.Stack, opsworks_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname opsworkscmInvokeOperation github.com/aws/aws-sdk-go-v2/service/opsworkscm.(*Client).invokeOperation
func opsworkscmInvokeOperation(*opsworkscm_sdkv2.Client, context.Context, string, interface{}, []func(*opsworkscm_sdkv2.Options), ...func(*middleware.Stack, opsworkscm_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname organizationsInvokeOperation github.com/aws/aws-sdk-go-v2/service/organizations.(*Client).invokeOperation
func organizationsInvokeOperation(*organizations_sdkv2.Client, context.Context, string, interface{}, []func(*organizations_sdkv2.Options), ...func(*middleware.Stack, organizations_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname osisInvokeOperation github.com/aws/aws-sdk-go-v2/service/osis.(*Client).invokeOperation
func osisInvokeOperation(*osis_sdkv2.Client, context.Context, string, interface{}, []func(*osis_sdkv2.Options), ...func(*middleware.Stack, osis_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname outpostsInvokeOperation github.com/aws/aws-sdk-go-v2/service/outposts.(*Client).invokeOperation
func outpostsInvokeOperation(*outposts_sdkv2.Client, context.Context, string, interface{}, []func(*outposts_sdkv2.Options), ...func(*middleware.Stack, outposts_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname panoramaInvokeOperation github.com/aws/aws-sdk-go-v2/service/panorama.(*Client).invokeOperation
func panoramaInvokeOperation(*panorama_sdkv2.Client, context.Context, string, interface{}, []func(*panorama_sdkv2.Options), ...func(*middleware.Stack, panorama_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname paymentcryptographyInvokeOperation github.com/aws/aws-sdk-go-v2/service/paymentcryptography.(*Client).invokeOperation
func paymentcryptographyInvokeOperation(*paymentcryptography_sdkv2.Client, context.Context, string, interface{}, []func(*paymentcryptography_sdkv2.Options), ...func(*middleware.Stack, paymentcryptography_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname paymentcryptographydataInvokeOperation github.com/aws/aws-sdk-go-v2/service/paymentcryptographydata.(*Client).invokeOperation
func paymentcryptographydataInvokeOperation(*paymentcryptographydata_sdkv2.Client, context.Context, string, interface{}, []func(*paymentcryptographydata_sdkv2.Options), ...func(*middleware.Stack, paymentcryptographydata_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname pcaconnectoradInvokeOperation github.com/aws/aws-sdk-go-v2/service/pcaconnectorad.(*Client).invokeOperation
func pcaconnectoradInvokeOperation(*pcaconnectorad_sdkv2.Client, context.Context, string, interface{}, []func(*pcaconnectorad_sdkv2.Options), ...func(*middleware.Stack, pcaconnectorad_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname pcaconnectorscepInvokeOperation github.com/aws/aws-sdk-go-v2/service/pcaconnectorscep.(*Client).invokeOperation
func pcaconnectorscepInvokeOperation(*pcaconnectorscep_sdkv2.Client, context.Context, string, interface{}, []func(*pcaconnectorscep_sdkv2.Options), ...func(*middleware.Stack, pcaconnectorscep_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname personalizeInvokeOperation github.com/aws/aws-sdk-go-v2/service/personalize.(*Client).invokeOperation
func personalizeInvokeOperation(*personalize_sdkv2.Client, context.Context, string, interface{}, []func(*personalize_sdkv2.Options), ...func(*middleware.Stack, personalize_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname personalizeeventsInvokeOperation github.com/aws/aws-sdk-go-v2/service/personalizeevents.(*Client).invokeOperation
func personalizeeventsInvokeOperation(*personalizeevents_sdkv2.Client, context.Context, string, interface{}, []func(*personalizeevents_sdkv2.Options), ...func(*middleware.Stack, personalizeevents_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname personalizeruntimeInvokeOperation github.com/aws/aws-sdk-go-v2/service/personalizeruntime.(*Client).invokeOperation
func personalizeruntimeInvokeOperation(*personalizeruntime_sdkv2.Client, context.Context, string, interface{}, []func(*personalizeruntime_sdkv2.Options), ...func(*middleware.Stack, personalizeruntime_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname piInvokeOperation github.com/aws/aws-sdk-go-v2/service/pi.(*Client).invokeOperation
func piInvokeOperation(*pi_sdkv2.Client, context.Context, string, interface{}, []func(*pi_sdkv2.Options), ...func(*middleware.Stack, pi_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname pinpointInvokeOperation github.com/aws/aws-sdk-go-v2/service/pinpoint.(*Client).invokeOperation
func pinpointInvokeOperation(*pinpoint_sdkv2.Client, context.Context, string, interface{}, []func(*pinpoint_sdkv2.Options), ...func(*middleware.Stack, pinpoint_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname pinpointemailInvokeOperation github.com/aws/aws-sdk-go-v2/service/pinpointemail.(*Client).invokeOperation
func pinpointemailInvokeOperation(*pinpointemail_sdkv2.Client, context.Context, string, interface{}, []func(*pinpointemail_sdkv2.Options), ...func(*middleware.Stack, pinpointemail_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname pinpointsmsvoiceInvokeOperation github.com/aws/aws-sdk-go-v2/service/pinpointsmsvoice.(*Client).invokeOperation
func pinpointsmsvoiceInvokeOperation(*pinpointsmsvoice_sdkv2.Client, context.Context, string, interface{}, []func(*pinpointsmsvoice_sdkv2.Options), ...func(*middleware.Stack, pinpointsmsvoice_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname pinpointsmsvoicev2InvokeOperation github.com/aws/aws-sdk-go-v2/service/pinpointsmsvoicev2.(*Client).invokeOperation
func pinpointsmsvoicev2InvokeOperation(*pinpointsmsvoicev2_sdkv2.Client, context.Context, string, interface{}, []func(*pinpointsmsvoicev2_sdkv2.Options), ...func(*middleware.Stack, pinpointsmsvoicev2_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname pipesInvokeOperation github.com/aws/aws-sdk-go-v2/service/pipes.(*Client).invokeOperation
func pipesInvokeOperation(*pipes_sdkv2.Client, context.Context, string, interface{}, []func(*pipes_sdkv2.Options), ...func(*middleware.Stack, pipes_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname pollyInvokeOperation github.com/aws/aws-sdk-go-v2/service/polly.(*Client).invokeOperation
func pollyInvokeOperation(*polly_sdkv2.Client, context.Context, string, interface{}, []func(*polly_sdkv2.Options), ...func(*middleware.Stack, polly_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname pricingInvokeOperation github.com/aws/aws-sdk-go-v2/service/pricing.(*Client).invokeOperation
func pricingInvokeOperation(*pricing_sdkv2.Client, context.Context, string, interface{}, []func(*pricing_sdkv2.Options), ...func(*middleware.Stack, pricing_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname privatenetworksInvokeOperation github.com/aws/aws-sdk-go-v2/service/privatenetworks.(*Client).invokeOperation
func privatenetworksInvokeOperation(*privatenetworks_sdkv2.Client, context.Context, string, interface{}, []func(*privatenetworks_sdkv2.Options), ...func(*middleware.Stack, privatenetworks_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname protonInvokeOperation github.com/aws/aws-sdk-go-v2/service/proton.(*Client).invokeOperation
func protonInvokeOperation(*proton_sdkv2.Client, context.Context, string, interface{}, []func(*proton_sdkv2.Options), ...func(*middleware.Stack, proton_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname qbusinessInvokeOperation github.com/aws/aws-sdk-go-v2/service/qbusiness.(*Client).invokeOperation
func qbusinessInvokeOperation(*qbusiness_sdkv2.Client, context.Context, string, interface{}, []func(*qbusiness_sdkv2.Options), ...func(*middleware.Stack, qbusiness_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname qconnectInvokeOperation github.com/aws/aws-sdk-go-v2/service/qconnect.(*Client).invokeOperation
func qconnectInvokeOperation(*qconnect_sdkv2.Client, context.Context, string, interface{}, []func(*qconnect_sdkv2.Options), ...func(*middleware.Stack, qconnect_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname qldbInvokeOperation github.com/aws/aws-sdk-go-v2/service/qldb.(*Client).invokeOperation
func qldbInvokeOperation(*qldb_sdkv2.Client, context.Context, string, interface{}, []func(*qldb_sdkv2.Options), ...func(*middleware.Stack, qldb_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname qldbsessionInvokeOperation github.com/aws/aws-sdk-go-v2/service/qldbsession.(*Client).invokeOperation
func qldbsessionInvokeOperation(*qldbsession_sdkv2.Client, context.Context, string, interface{}, []func(*qldbsession_sdkv2.Options), ...func(*middleware.Stack, qldbsession_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname quicksightInvokeOperation github.com/aws/aws-sdk-go-v2/service/quicksight.(*Client).invokeOperation
func quicksightInvokeOperation(*quicksight_sdkv2.Client, context.Context, string, interface{}, []func(*quicksight_sdkv2.Options), ...func(*middleware.Stack, quicksight_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname ramInvokeOperation github.com/aws/aws-sdk-go-v2/service/ram.(*Client).invokeOperation
func ramInvokeOperation(*ram_sdkv2.Client, context.Context, string, interface{}, []func(*ram_sdkv2.Options), ...func(*middleware.Stack, ram_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname rbinInvokeOperation github.com/aws/aws-sdk-go-v2/service/rbin.(*Client).invokeOperation
func rbinInvokeOperation(*rbin_sdkv2.Client, context.Context, string, interface{}, []func(*rbin_sdkv2.Options), ...func(*middleware.Stack, rbin_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname rdsInvokeOperation github.com/aws/aws-sdk-go-v2/service/rds.(*Client).invokeOperation
func rdsInvokeOperation(*rds_sdkv2.Client, context.Context, string, interface{}, []func(*rds_sdkv2.Options), ...func(*middleware.Stack, rds_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname rdsdataInvokeOperation github.com/aws/aws-sdk-go-v2/service/rdsdata.(*Client).invokeOperation
func rdsdataInvokeOperation(*rdsdata_sdkv2.Client, context.Context, string, interface{}, []func(*rdsdata_sdkv2.Options), ...func(*middleware.Stack, rdsdata_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname redshiftInvokeOperation github.com/aws/aws-sdk-go-v2/service/redshift.(*Client).invokeOperation
func redshiftInvokeOperation(*redshift_sdkv2.Client, context.Context, string, interface{}, []func(*redshift_sdkv2.Options), ...func(*middleware.Stack, redshift_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname redshiftdataInvokeOperation github.com/aws/aws-sdk-go-v2/service/redshiftdata.(*Client).invokeOperation
func redshiftdataInvokeOperation(*redshiftdata_sdkv2.Client, context.Context, string, interface{}, []func(*redshiftdata_sdkv2.Options), ...func(*middleware.Stack, redshiftdata_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname redshiftserverlessInvokeOperation github.com/aws/aws-sdk-go-v2/service/redshiftserverless.(*Client).invokeOperation
func redshiftserverlessInvokeOperation(*redshiftserverless_sdkv2.Client, context.Context, string, interface{}, []func(*redshiftserverless_sdkv2.Options), ...func(*middleware.Stack, redshiftserverless_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname rekognitionInvokeOperation github.com/aws/aws-sdk-go-v2/service/rekognition.(*Client).invokeOperation
func rekognitionInvokeOperation(*rekognition_sdkv2.Client, context.Context, string, interface{}, []func(*rekognition_sdkv2.Options), ...func(*middleware.Stack, rekognition_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname repostspaceInvokeOperation github.com/aws/aws-sdk-go-v2/service/repostspace.(*Client).invokeOperation
func repostspaceInvokeOperation(*repostspace_sdkv2.Client, context.Context, string, interface{}, []func(*repostspace_sdkv2.Options), ...func(*middleware.Stack, repostspace_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname resiliencehubInvokeOperation github.com/aws/aws-sdk-go-v2/service/resiliencehub.(*Client).invokeOperation
func resiliencehubInvokeOperation(*resiliencehub_sdkv2.Client, context.Context, string, interface{}, []func(*resiliencehub_sdkv2.Options), ...func(*middleware.Stack, resiliencehub_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname resourceexplorer2InvokeOperation github.com/aws/aws-sdk-go-v2/service/resourceexplorer2.(*Client).invokeOperation
func resourceexplorer2InvokeOperation(*resourceexplorer2_sdkv2.Client, context.Context, string, interface{}, []func(*resourceexplorer2_sdkv2.Options), ...func(*middleware.Stack, resourceexplorer2_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname resourcegroupsInvokeOperation github.com/aws/aws-sdk-go-v2/service/resourcegroups.(*Client).invokeOperation
func resourcegroupsInvokeOperation(*resourcegroups_sdkv2.Client, context.Context, string, interface{}, []func(*resourcegroups_sdkv2.Options), ...func(*middleware.Stack, resourcegroups_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname resourcegroupstaggingapiInvokeOperation github.com/aws/aws-sdk-go-v2/service/resourcegroupstaggingapi.(*Client).invokeOperation
func resourcegroupstaggingapiInvokeOperation(*resourcegroupstaggingapi_sdkv2.Client, context.Context, string, interface{}, []func(*resourcegroupstaggingapi_sdkv2.Options), ...func(*middleware.Stack, resourcegroupstaggingapi_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname robomakerInvokeOperation github.com/aws/aws-sdk-go-v2/service/robomaker.(*Client).invokeOperation
func robomakerInvokeOperation(*robomaker_sdkv2.Client, context.Context, string, interface{}, []func(*robomaker_sdkv2.Options), ...func(*middleware.Stack, robomaker_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname rolesanywhereInvokeOperation github.com/aws/aws-sdk-go-v2/service/rolesanywhere.(*Client).invokeOperation
func rolesanywhereInvokeOperation(*rolesanywhere_sdkv2.Client, context.Context, string, interface{}, []func(*rolesanywhere_sdkv2.Options), ...func(*middleware.Stack, rolesanywhere_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname route53InvokeOperation github.com/aws/aws-sdk-go-v2/service/route53.(*Client).invokeOperation
func route53InvokeOperation(*route53_sdkv2.Client, context.Context, string, interface{}, []func(*route53_sdkv2.Options), ...func(*middleware.Stack, route53_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname route53domainsInvokeOperation github.com/aws/aws-sdk-go-v2/service/route53domains.(*Client).invokeOperation
func route53domainsInvokeOperation(*route53domains_sdkv2.Client, context.Context, string, interface{}, []func(*route53domains_sdkv2.Options), ...func(*middleware.Stack, route53domains_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname route53profilesInvokeOperation github.com/aws/aws-sdk-go-v2/service/route53profiles.(*Client).invokeOperation
func route53profilesInvokeOperation(*route53profiles_sdkv2.Client, context.Context, string, interface{}, []func(*route53profiles_sdkv2.Options), ...func(*middleware.Stack, route53profiles_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname route53recoveryclusterInvokeOperation github.com/aws/aws-sdk-go-v2/service/route53recoverycluster.(*Client).invokeOperation
func route53recoveryclusterInvokeOperation(*route53recoverycluster_sdkv2.Client, context.Context, string, interface{}, []func(*route53recoverycluster_sdkv2.Options), ...func(*middleware.Stack, route53recoverycluster_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname route53recoverycontrolconfigInvokeOperation github.com/aws/aws-sdk-go-v2/service/route53recoverycontrolconfig.(*Client).invokeOperation
func route53recoverycontrolconfigInvokeOperation(*route53recoverycontrolconfig_sdkv2.Client, context.Context, string, interface{}, []func(*route53recoverycontrolconfig_sdkv2.Options), ...func(*middleware.Stack, route53recoverycontrolconfig_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname route53recoveryreadinessInvokeOperation github.com/aws/aws-sdk-go-v2/service/route53recoveryreadiness.(*Client).invokeOperation
func route53recoveryreadinessInvokeOperation(*route53recoveryreadiness_sdkv2.Client, context.Context, string, interface{}, []func(*route53recoveryreadiness_sdkv2.Options), ...func(*middleware.Stack, route53recoveryreadiness_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname route53resolverInvokeOperation github.com/aws/aws-sdk-go-v2/service/route53resolver.(*Client).invokeOperation
func route53resolverInvokeOperation(*route53resolver_sdkv2.Client, context.Context, string, interface{}, []func(*route53resolver_sdkv2.Options), ...func(*middleware.Stack, route53resolver_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname rumInvokeOperation github.com/aws/aws-sdk-go-v2/service/rum.(*Client).invokeOperation
func rumInvokeOperation(*rum_sdkv2.Client, context.Context, string, interface{}, []func(*rum_sdkv2.Options), ...func(*middleware.Stack, rum_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname s3InvokeOperation github.com/aws/aws-sdk-go-v2/service/s3.(*Client).invokeOperation
func s3InvokeOperation(*s3_sdkv2.Client, context.Context, string, interface{}, []func(*s3_sdkv2.Options), ...func(*middleware.Stack, s3_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname s3controlInvokeOperation github.com/aws/aws-sdk-go-v2/service/s3control.(*Client).invokeOperation
func s3controlInvokeOperation(*s3control_sdkv2.Client, context.Context, string, interface{}, []func(*s3control_sdkv2.Options), ...func(*middleware.Stack, s3control_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname s3outpostsInvokeOperation github.com/aws/aws-sdk-go-v2/service/s3outposts.(*Client).invokeOperation
func s3outpostsInvokeOperation(*s3outposts_sdkv2.Client, context.Context, string, interface{}, []func(*s3outposts_sdkv2.Options), ...func(*middleware.Stack, s3outposts_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname sagemakerInvokeOperation github.com/aws/aws-sdk-go-v2/service/sagemaker.(*Client).invokeOperation
func sagemakerInvokeOperation(*sagemaker_sdkv2.Client, context.Context, string, interface{}, []func(*sagemaker_sdkv2.Options), ...func(*middleware.Stack, sagemaker_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname sagemakera2iruntimeInvokeOperation github.com/aws/aws-sdk-go-v2/service/sagemakera2iruntime.(*Client).invokeOperation
func sagemakera2iruntimeInvokeOperation(*sagemakera2iruntime_sdkv2.Client, context.Context, string, interface{}, []func(*sagemakera2iruntime_sdkv2.Options), ...func(*middleware.Stack, sagemakera2iruntime_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname sagemakeredgeInvokeOperation github.com/aws/aws-sdk-go-v2/service/sagemakeredge.(*Client).invokeOperation
func sagemakeredgeInvokeOperation(*sagemakeredge_sdkv2.Client, context.Context, string, interface{}, []func(*sagemakeredge_sdkv2.Options), ...func(*middleware.Stack, sagemakeredge_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname sagemakerfeaturestoreruntimeInvokeOperation github.com/aws/aws-sdk-go-v2/service/sagemakerfeaturestoreruntime.(*Client).invokeOperation
func sagemakerfeaturestoreruntimeInvokeOperation(*sagemakerfeaturestoreruntime_sdkv2.Client, context.Context, string, interface{}, []func(*sagemakerfeaturestoreruntime_sdkv2.Options), ...func(*middleware.Stack, sagemakerfeaturestoreruntime_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname sagemakergeospatialInvokeOperation github.com/aws/aws-sdk-go-v2/service/sagemakergeospatial.(*Client).invokeOperation
func sagemakergeospatialInvokeOperation(*sagemakergeospatial_sdkv2.Client, context.Context, string, interface{}, []func(*sagemakergeospatial_sdkv2.Options), ...func(*middleware.Stack, sagemakergeospatial_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname sagemakermetricsInvokeOperation github.com/aws/aws-sdk-go-v2/service/sagemakermetrics.(*Client).invokeOperation
func sagemakermetricsInvokeOperation(*sagemakermetrics_sdkv2.Client, context.Context, string, interface{}, []func(*sagemakermetrics_sdkv2.Options), ...func(*middleware.Stack, sagemakermetrics_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname sagemakerruntimeInvokeOperation github.com/aws/aws-sdk-go-v2/service/sagemakerruntime.(*Client).invokeOperation
func sagemakerruntimeInvokeOperation(*sagemakerruntime_sdkv2.Client, context.Context, string, interface{}, []func(*sagemakerruntime_sdkv2.Options), ...func(*middleware.Stack, sagemakerruntime_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname savingsplansInvokeOperation github.com/aws/aws-sdk-go-v2/service/savingsplans.(*Client).invokeOperation
func savingsplansInvokeOperation(*savingsplans_sdkv2.Client, context.Context, string, interface{}, []func(*savingsplans_sdkv2.Options), ...func(*middleware.Stack, savingsplans_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname schedulerInvokeOperation github.com/aws/aws-sdk-go-v2/service/scheduler.(*Client).invokeOperation
func schedulerInvokeOperation(*scheduler_sdkv2.Client, context.Context, string, interface{}, []func(*scheduler_sdkv2.Options), ...func(*middleware.Stack, scheduler_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname schemasInvokeOperation github.com/aws/aws-sdk-go-v2/service/schemas.(*Client).invokeOperation
func schemasInvokeOperation(*schemas_sdkv2.Client, context.Context, string, interface{}, []func(*schemas_sdkv2.Options), ...func(*middleware.Stack, schemas_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname secretsmanagerInvokeOperation github.com/aws/aws-sdk-go-v2/service/secretsmanager.(*Client).invokeOperation
func secretsmanagerInvokeOperation(*secretsmanager_sdkv2.Client, context.Context, string, interface{}, []func(*secretsmanager_sdkv2.Options), ...func(*middleware.Stack, secretsmanager_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname securityhubInvokeOperation github.com/aws/aws-sdk-go-v2/service/securityhub.(*Client).invokeOperation
func securityhubInvokeOperation(*securityhub_sdkv2.Client, context.Context, string, interface{}, []func(*securityhub_sdkv2.Options), ...func(*middleware.Stack, securityhub_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname securitylakeInvokeOperation github.com/aws/aws-sdk-go-v2/service/securitylake.(*Client).invokeOperation
func securitylakeInvokeOperation(*securitylake_sdkv2.Client, context.Context, string, interface{}, []func(*securitylake_sdkv2.Options), ...func(*middleware.Stack, securitylake_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname serverlessapplicationrepositoryInvokeOperation github.com/aws/aws-sdk-go-v2/service/serverlessapplicationrepository.(*Client).invokeOperation
func serverlessapplicationrepositoryInvokeOperation(*serverlessapplicationrepository_sdkv2.Client, context.Context, string, interface{}, []func(*serverlessapplicationrepository_sdkv2.Options), ...func(*middleware.Stack, serverlessapplicationrepository_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname servicecatalogInvokeOperation github.com/aws/aws-sdk-go-v2/service/servicecatalog.(*Client).invokeOperation
func servicecatalogInvokeOperation(*servicecatalog_sdkv2.Client, context.Context, string, interface{}, []func(*servicecatalog_sdkv2.Options), ...func(*middleware.Stack, servicecatalog_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname servicecatalogappregistryInvokeOperation github.com/aws/aws-sdk-go-v2/service/servicecatalogappregistry.(*Client).invokeOperation
func servicecatalogappregistryInvokeOperation(*servicecatalogappregistry_sdkv2.Client, context.Context, string, interface{}, []func(*servicecatalogappregistry_sdkv2.Options), ...func(*middleware.Stack, servicecatalogappregistry_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname servicediscoveryInvokeOperation github.com/aws/aws-sdk-go-v2/service/servicediscovery.(*Client).invokeOperation
func servicediscoveryInvokeOperation(*servicediscovery_sdkv2.Client, context.Context, string, interface{}, []func(*servicediscovery_sdkv2.Options), ...func(*middleware.Stack, servicediscovery_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname servicequotasInvokeOperation github.com/aws/aws-sdk-go-v2/service/servicequotas.(*Client).invokeOperation
func servicequotasInvokeOperation(*servicequotas_sdkv2.Client, context.Context, string, interface{}, []func(*servicequotas_sdkv2.Options), ...func(*middleware.Stack, servicequotas_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname sesInvokeOperation github.com/aws/aws-sdk-go-v2/service/ses.(*Client).invokeOperation
func sesInvokeOperation(*ses_sdkv2.Client, context.Context, string, interface{}, []func(*ses_sdkv2.Options), ...func(*middleware.Stack, ses_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname sesv2InvokeOperation github.com/aws/aws-sdk-go-v2/service/sesv2.(*Client).invokeOperation
func sesv2InvokeOperation(*sesv2_sdkv2.Client, context.Context, string, interface{}, []func(*sesv2_sdkv2.Options), ...func(*middleware.Stack, sesv2_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname sfnInvokeOperation github.com/aws/aws-sdk-go-v2/service/sfn.(*Client).invokeOperation
func sfnInvokeOperation(*sfn_sdkv2.Client, context.Context, string, interface{}, []func(*sfn_sdkv2.Options), ...func(*middleware.Stack, sfn_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname shieldInvokeOperation github.com/aws/aws-sdk-go-v2/service/shield.(*Client).invokeOperation
func shieldInvokeOperation(*shield_sdkv2.Client, context.Context, string, interface{}, []func(*shield_sdkv2.Options), ...func(*middleware.Stack, shield_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname signerInvokeOperation github.com/aws/aws-sdk-go-v2/service/signer.(*Client).invokeOperation
func signerInvokeOperation(*signer_sdkv2.Client, context.Context, string, interface{}, []func(*signer_sdkv2.Options), ...func(*middleware.Stack, signer_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname simspaceweaverInvokeOperation github.com/aws/aws-sdk-go-v2/service/simspaceweaver.(*Client).invokeOperation
func simspaceweaverInvokeOperation(*simspaceweaver_sdkv2.Client, context.Context, string, interface{}, []func(*simspaceweaver_sdkv2.Options), ...func(*middleware.Stack, simspaceweaver_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname smsInvokeOperation github.com/aws/aws-sdk-go-v2/service/sms.(*Client).invokeOperation
func smsInvokeOperation(*sms_sdkv2.Client, context.Context, string, interface{}, []func(*sms_sdkv2.Options), ...func(*middleware.Stack, sms_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname snowballInvokeOperation github.com/aws/aws-sdk-go-v2/service/snowball.(*Client).invokeOperation
func snowballInvokeOperation(*snowball_sdkv2.Client, context.Context, string, interface{}, []func(*snowball_sdkv2.Options), ...func(*middleware.Stack, snowball_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname snowdevicemanagementInvokeOperation github.com/aws/aws-sdk-go-v2/service/snowdevicemanagement.(*Client).invokeOperation
func snowdevicemanagementInvokeOperation(*snowdevicemanagement_sdkv2.Client, context.Context, string, interface{}, []func(*snowdevicemanagement_sdkv2.Options), ...func(*middleware.Stack, snowdevicemanagement_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname snsInvokeOperation github.com/aws/aws-sdk-go-v2/service/sns.(*Client).invokeOperation
func snsInvokeOperation(*sns_sdkv2.Client, context.Context, string, interface{}, []func(*sns_sdkv2.Options), ...func(*middleware.Stack, sns_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname sqsInvokeOperation github.com/aws/aws-sdk-go-v2/service/sqs.(*Client).invokeOperation
func sqsInvokeOperation(*sqs_sdkv2.Client, context.Context, string, interface{}, []func(*sqs_sdkv2.Options), ...func(*middleware.Stack, sqs_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname ssmInvokeOperation github.com/aws/aws-sdk-go-v2/service/ssm.(*Client).invokeOperation
func ssmInvokeOperation(*ssm_sdkv2.Client, context.Context, string, interface{}, []func(*ssm_sdkv2.Options), ...func(*middleware.Stack, ssm_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname ssmcontactsInvokeOperation github.com/aws/aws-sdk-go-v2/service/ssmcontacts.(*Client).invokeOperation
func ssmcontactsInvokeOperation(*ssmcontacts_sdkv2.Client, context.Context, string, interface{}, []func(*ssmcontacts_sdkv2.Options), ...func(*middleware.Stack, ssmcontacts_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname ssmincidentsInvokeOperation github.com/aws/aws-sdk-go-v2/service/ssmincidents.(*Client).invokeOperation
func ssmincidentsInvokeOperation(*ssmincidents_sdkv2.Client, context.Context, string, interface{}, []func(*ssmincidents_sdkv2.Options), ...func(*middleware.Stack, ssmincidents_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname ssmsapInvokeOperation github.com/aws/aws-sdk-go-v2/service/ssmsap.(*Client).invokeOperation
func ssmsapInvokeOperation(*ssmsap_sdkv2.Client, context.Context, string, interface{}, []func(*ssmsap_sdkv2.Options), ...func(*middleware.Stack, ssmsap_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname ssoInvokeOperation github.com/aws/aws-sdk-go-v2/service/sso.(*Client).invokeOperation
func ssoInvokeOperation(*sso_sdkv2.Client, context.Context, string, interface{}, []func(*sso_sdkv2.Options), ...func(*middleware.Stack, sso_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname ssoadminInvokeOperation github.com/aws/aws-sdk-go-v2/service/ssoadmin.(*Client).invokeOperation
func ssoadminInvokeOperation(*ssoadmin_sdkv2.Client, context.Context, string, interface{}, []func(*ssoadmin_sdkv2.Options), ...func(*middleware.Stack, ssoadmin_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname ssooidcInvokeOperation github.com/aws/aws-sdk-go-v2/service/ssooidc.(*Client).invokeOperation
func ssooidcInvokeOperation(*ssooidc_sdkv2.Client, context.Context, string, interface{}, []func(*ssooidc_sdkv2.Options), ...func(*middleware.Stack, ssooidc_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname storagegatewayInvokeOperation github.com/aws/aws-sdk-go-v2/service/storagegateway.(*Client).invokeOperation
func storagegatewayInvokeOperation(*storagegateway_sdkv2.Client, context.Context, string, interface{}, []func(*storagegateway_sdkv2.Options), ...func(*middleware.Stack, storagegateway_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname stsInvokeOperation github.com/aws/aws-sdk-go-v2/service/sts.(*Client).invokeOperation
func stsInvokeOperation(*sts_sdkv2.Client, context.Context, string, interface{}, []func(*sts_sdkv2.Options), ...func(*middleware.Stack, sts_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname supplychainInvokeOperation github.com/aws/aws-sdk-go-v2/service/supplychain.(*Client).invokeOperation
func supplychainInvokeOperation(*supplychain_sdkv2.Client, context.Context, string, interface{}, []func(*supplychain_sdkv2.Options), ...func(*middleware.Stack, supplychain_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname supportInvokeOperation github.com/aws/aws-sdk-go-v2/service/support.(*Client).invokeOperation
func supportInvokeOperation(*support_sdkv2.Client, context.Context, string, interface{}, []func(*support_sdkv2.Options), ...func(*middleware.Stack, support_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname supportappInvokeOperation github.com/aws/aws-sdk-go-v2/service/supportapp.(*Client).invokeOperation
func supportappInvokeOperation(*supportapp_sdkv2.Client, context.Context, string, interface{}, []func(*supportapp_sdkv2.Options), ...func(*middleware.Stack, supportapp_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname swfInvokeOperation github.com/aws/aws-sdk-go-v2/service/swf.(*Client).invokeOperation
func swfInvokeOperation(*swf_sdkv2.Client, context.Context, string, interface{}, []func(*swf_sdkv2.Options), ...func(*middleware.Stack, swf_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname syntheticsInvokeOperation github.com/aws/aws-sdk-go-v2/service/synthetics.(*Client).invokeOperation
func syntheticsInvokeOperation(*synthetics_sdkv2.Client, context.Context, string, interface{}, []func(*synthetics_sdkv2.Options), ...func(*middleware.Stack, synthetics_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname taxsettingsInvokeOperation github.com/aws/aws-sdk-go-v2/service/taxsettings.(*Client).invokeOperation
func taxsettingsInvokeOperation(*taxsettings_sdkv2.Client, context.Context, string, interface{}, []func(*taxsettings_sdkv2.Options), ...func(*middleware.Stack, taxsettings_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname textractInvokeOperation github.com/aws/aws-sdk-go-v2/service/textract.(*Client).invokeOperation
func textractInvokeOperation(*textract_sdkv2.Client, context.Context, string, interface{}, []func(*textract_sdkv2.Options), ...func(*middleware.Stack, textract_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname timestreaminfluxdbInvokeOperation github.com/aws/aws-sdk-go-v2/service/timestreaminfluxdb.(*Client).invokeOperation
func timestreaminfluxdbInvokeOperation(*timestreaminfluxdb_sdkv2.Client, context.Context, string, interface{}, []func(*timestreaminfluxdb_sdkv2.Options), ...func(*middleware.Stack, timestreaminfluxdb_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname timestreamqueryInvokeOperation github.com/aws/aws-sdk-go-v2/service/timestreamquery.(*Client).invokeOperation
func timestreamqueryInvokeOperation(*timestreamquery_sdkv2.Client, context.Context, string, interface{}, []func(*timestreamquery_sdkv2.Options), ...func(*middleware.Stack, timestreamquery_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname timestreamwriteInvokeOperation github.com/aws/aws-sdk-go-v2/service/timestreamwrite.(*Client).invokeOperation
func timestreamwriteInvokeOperation(*timestreamwrite_sdkv2.Client, context.Context, string, interface{}, []func(*timestreamwrite_sdkv2.Options), ...func(*middleware.Stack, timestreamwrite_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname tnbInvokeOperation github.com/aws/aws-sdk-go-v2/service/tnb.(*Client).invokeOperation
func tnbInvokeOperation(*tnb_sdkv2.Client, context.Context, string, interface{}, []func(*tnb_sdkv2.Options), ...func(*middleware.Stack, tnb_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname transcribeInvokeOperation github.com/aws/aws-sdk-go-v2/service/transcribe.(*Client).invokeOperation
func transcribeInvokeOperation(*transcribe_sdkv2.Client, context.Context, string, interface{}, []func(*transcribe_sdkv2.Options), ...func(*middleware.Stack, transcribe_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname transcribestreamingInvokeOperation github.com/aws/aws-sdk-go-v2/service/transcribestreaming.(*Client).invokeOperation
func transcribestreamingInvokeOperation(*transcribestreaming_sdkv2.Client, context.Context, string, interface{}, []func(*transcribestreaming_sdkv2.Options), ...func(*middleware.Stack, transcribestreaming_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname transferInvokeOperation github.com/aws/aws-sdk-go-v2/service/transfer.(*Client).invokeOperation
func transferInvokeOperation(*transfer_sdkv2.Client, context.Context, string, interface{}, []func(*transfer_sdkv2.Options), ...func(*middleware.Stack, transfer_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname translateInvokeOperation github.com/aws/aws-sdk-go-v2/service/translate.(*Client).invokeOperation
func translateInvokeOperation(*translate_sdkv2.Client, context.Context, string, interface{}, []func(*translate_sdkv2.Options), ...func(*middleware.Stack, translate_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname trustedadvisorInvokeOperation github.com/aws/aws-sdk-go-v2/service/trustedadvisor.(*Client).invokeOperation
func trustedadvisorInvokeOperation(*trustedadvisor_sdkv2.Client, context.Context, string, interface{}, []func(*trustedadvisor_sdkv2.Options), ...func(*middleware.Stack, trustedadvisor_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname verifiedpermissionsInvokeOperation github.com/aws/aws-sdk-go-v2/service/verifiedpermissions.(*Client).invokeOperation
func verifiedpermissionsInvokeOperation(*verifiedpermissions_sdkv2.Client, context.Context, string, interface{}, []func(*verifiedpermissions_sdkv2.Options), ...func(*middleware.Stack, verifiedpermissions_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname voiceidInvokeOperation github.com/aws/aws-sdk-go-v2/service/voiceid.(*Client).invokeOperation
func voiceidInvokeOperation(*voiceid_sdkv2.Client, context.Context, string, interface{}, []func(*voiceid_sdkv2.Options), ...func(*middleware.Stack, voiceid_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname vpclatticeInvokeOperation github.com/aws/aws-sdk-go-v2/service/vpclattice.(*Client).invokeOperation
func vpclatticeInvokeOperation(*vpclattice_sdkv2.Client, context.Context, string, interface{}, []func(*vpclattice_sdkv2.Options), ...func(*middleware.Stack, vpclattice_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname wafInvokeOperation github.com/aws/aws-sdk-go-v2/service/waf.(*Client).invokeOperation
func wafInvokeOperation(*waf_sdkv2.Client, context.Context, string, interface{}, []func(*waf_sdkv2.Options), ...func(*middleware.Stack, waf_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname wafregionalInvokeOperation github.com/aws/aws-sdk-go-v2/service/wafregional.(*Client).invokeOperation
func wafregionalInvokeOperation(*wafregional_sdkv2.Client, context.Context, string, interface{}, []func(*wafregional_sdkv2.Options), ...func(*middleware.Stack, wafregional_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname wafv2InvokeOperation github.com/aws/aws-sdk-go-v2/service/wafv2.(*Client).invokeOperation
func wafv2InvokeOperation(*wafv2_sdkv2.Client, context.Context, string, interface{}, []func(*wafv2_sdkv2.Options), ...func(*middleware.Stack, wafv2_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname wellarchitectedInvokeOperation github.com/aws/aws-sdk-go-v2/service/wellarchitected.(*Client).invokeOperation
func wellarchitectedInvokeOperation(*wellarchitected_sdkv2.Client, context.Context, string, interface{}, []func(*wellarchitected_sdkv2.Options), ...func(*middleware.Stack, wellarchitected_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname wisdomInvokeOperation github.com/aws/aws-sdk-go-v2/service/wisdom.(*Client).invokeOperation
func wisdomInvokeOperation(*wisdom_sdkv2.Client, context.Context, string, interface{}, []func(*wisdom_sdkv2.Options), ...func(*middleware.Stack, wisdom_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname workdocsInvokeOperation github.com/aws/aws-sdk-go-v2/service/workdocs.(*Client).invokeOperation
func workdocsInvokeOperation(*workdocs_sdkv2.Client, context.Context, string, interface{}, []func(*workdocs_sdkv2.Options), ...func(*middleware.Stack, workdocs_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname worklinkInvokeOperation github.com/aws/aws-sdk-go-v2/service/worklink.(*Client).invokeOperation
func worklinkInvokeOperation(*worklink_sdkv2.Client, context.Context, string, interface{}, []func(*worklink_sdkv2.Options), ...func(*middleware.Stack, worklink_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname workmailInvokeOperation github.com/aws/aws-sdk-go-v2/service/workmail.(*Client).invokeOperation
func workmailInvokeOperation(*workmail_sdkv2.Client, context.Context, string, interface{}, []func(*workmail_sdkv2.Options), ...func(*middleware.Stack, workmail_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname workmailmessageflowInvokeOperation github.com/aws/aws-sdk-go-v2/service/workmailmessageflow.(*Client).invokeOperation
func workmailmessageflowInvokeOperation(*workmailmessageflow_sdkv2.Client, context.Context, string, interface{}, []func(*workmailmessageflow_sdkv2.Options), ...func(*middleware.Stack, workmailmessageflow_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname workspacesInvokeOperation github.com/aws/aws-sdk-go-v2/service/workspaces.(*Client).invokeOperation
func workspacesInvokeOperation(*workspaces_sdkv2.Client, context.Context, string, interface{}, []func(*workspaces_sdkv2.Options), ...func(*middleware.Stack, workspaces_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname workspacesthinclientInvokeOperation github.com/aws/aws-sdk-go-v2/service/workspacesthinclient.(*Client).invokeOperation
func workspacesthinclientInvokeOperation(*workspacesthinclient_sdkv2.Client, context.Context, string, interface{}, []func(*workspacesthinclient_sdkv2.Options), ...func(*middleware.Stack, workspacesthinclient_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname workspaceswebInvokeOperation github.com/aws/aws-sdk-go-v2/service/workspacesweb.(*Client).invokeOperation
func workspaceswebInvokeOperation(*workspacesweb_sdkv2.Client, context.Context, string, interface{}, []func(*workspacesweb_sdkv2.Options), ...func(*middleware.Stack, workspacesweb_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

//go:linkname xrayInvokeOperation github.com/aws/aws-sdk-go-v2/service/xray.(*Client).invokeOperation
func xrayInvokeOperation(*xray_sdkv2.Client, context.Context, string, interface{}, []func(*xray_sdkv2.Options), ...func(*middleware.Stack, xray_sdkv2.Options) error) (interface{}, middleware.Metadata, error)

func InvokeOperation(ctx context.Context, service, opID string, params interface{}, config map[string]any) (result interface{}, metadata middleware.Metadata, err error) {
	cfg := *(config["aws_sdkv2_config"].(*aws_sdkv2.Config))

	switch service {
	case "accessanalyzer":
		client := accessanalyzer_sdkv2.NewFromConfig(cfg, func(o *accessanalyzer_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return accessanalyzerInvokeOperation(client, ctx, opID, params, []func(*accessanalyzer_sdkv2.Options))
	case "account":
		client := account_sdkv2.NewFromConfig(cfg, func(o *account_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return accountInvokeOperation(client, ctx, opID, params, []func(*account_sdkv2.Options))
	case "acm":
		client := acm_sdkv2.NewFromConfig(cfg, func(o *acm_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return acmInvokeOperation(client, ctx, opID, params, []func(*acm_sdkv2.Options))
	case "acmpca":
		client := acmpca_sdkv2.NewFromConfig(cfg, func(o *acmpca_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return acmpcaInvokeOperation(client, ctx, opID, params, []func(*acmpca_sdkv2.Options))
	case "amp":
		client := amp_sdkv2.NewFromConfig(cfg, func(o *amp_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return ampInvokeOperation(client, ctx, opID, params, []func(*amp_sdkv2.Options))
	case "amplify":
		client := amplify_sdkv2.NewFromConfig(cfg, func(o *amplify_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return amplifyInvokeOperation(client, ctx, opID, params, []func(*amplify_sdkv2.Options))
	case "amplifybackend":
		client := amplifybackend_sdkv2.NewFromConfig(cfg, func(o *amplifybackend_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return amplifybackendInvokeOperation(client, ctx, opID, params, []func(*amplifybackend_sdkv2.Options))
	case "amplifyuibuilder":
		client := amplifyuibuilder_sdkv2.NewFromConfig(cfg, func(o *amplifyuibuilder_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return amplifyuibuilderInvokeOperation(client, ctx, opID, params, []func(*amplifyuibuilder_sdkv2.Options))
	case "apigateway":
		client := apigateway_sdkv2.NewFromConfig(cfg, func(o *apigateway_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return apigatewayInvokeOperation(client, ctx, opID, params, []func(*apigateway_sdkv2.Options))
	case "apigatewaymanagementapi":
		client := apigatewaymanagementapi_sdkv2.NewFromConfig(cfg, func(o *apigatewaymanagementapi_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return apigatewaymanagementapiInvokeOperation(client, ctx, opID, params, []func(*apigatewaymanagementapi_sdkv2.Options))
	case "apigatewayv2":
		client := apigatewayv2_sdkv2.NewFromConfig(cfg, func(o *apigatewayv2_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return apigatewayv2InvokeOperation(client, ctx, opID, params, []func(*apigatewayv2_sdkv2.Options))
	case "appconfig":
		client := appconfig_sdkv2.NewFromConfig(cfg, func(o *appconfig_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return appconfigInvokeOperation(client, ctx, opID, params, []func(*appconfig_sdkv2.Options))
	case "appconfigdata":
		client := appconfigdata_sdkv2.NewFromConfig(cfg, func(o *appconfigdata_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return appconfigdataInvokeOperation(client, ctx, opID, params, []func(*appconfigdata_sdkv2.Options))
	case "appfabric":
		client := appfabric_sdkv2.NewFromConfig(cfg, func(o *appfabric_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return appfabricInvokeOperation(client, ctx, opID, params, []func(*appfabric_sdkv2.Options))
	case "appflow":
		client := appflow_sdkv2.NewFromConfig(cfg, func(o *appflow_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return appflowInvokeOperation(client, ctx, opID, params, []func(*appflow_sdkv2.Options))
	case "appintegrations":
		client := appintegrations_sdkv2.NewFromConfig(cfg, func(o *appintegrations_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return appintegrationsInvokeOperation(client, ctx, opID, params, []func(*appintegrations_sdkv2.Options))
	case "applicationautoscaling":
		client := applicationautoscaling_sdkv2.NewFromConfig(cfg, func(o *applicationautoscaling_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return applicationautoscalingInvokeOperation(client, ctx, opID, params, []func(*applicationautoscaling_sdkv2.Options))
	case "applicationcostprofiler":
		client := applicationcostprofiler_sdkv2.NewFromConfig(cfg, func(o *applicationcostprofiler_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return applicationcostprofilerInvokeOperation(client, ctx, opID, params, []func(*applicationcostprofiler_sdkv2.Options))
	case "applicationdiscoveryservice":
		client := applicationdiscoveryservice_sdkv2.NewFromConfig(cfg, func(o *applicationdiscoveryservice_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return applicationdiscoveryserviceInvokeOperation(client, ctx, opID, params, []func(*applicationdiscoveryservice_sdkv2.Options))
	case "applicationinsights":
		client := applicationinsights_sdkv2.NewFromConfig(cfg, func(o *applicationinsights_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return applicationinsightsInvokeOperation(client, ctx, opID, params, []func(*applicationinsights_sdkv2.Options))
	case "applicationsignals":
		client := applicationsignals_sdkv2.NewFromConfig(cfg, func(o *applicationsignals_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return applicationsignalsInvokeOperation(client, ctx, opID, params, []func(*applicationsignals_sdkv2.Options))
	case "appmesh":
		client := appmesh_sdkv2.NewFromConfig(cfg, func(o *appmesh_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return appmeshInvokeOperation(client, ctx, opID, params, []func(*appmesh_sdkv2.Options))
	case "apprunner":
		client := apprunner_sdkv2.NewFromConfig(cfg, func(o *apprunner_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return apprunnerInvokeOperation(client, ctx, opID, params, []func(*apprunner_sdkv2.Options))
	case "appstream":
		client := appstream_sdkv2.NewFromConfig(cfg, func(o *appstream_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return appstreamInvokeOperation(client, ctx, opID, params, []func(*appstream_sdkv2.Options))
	case "appsync":
		client := appsync_sdkv2.NewFromConfig(cfg, func(o *appsync_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return appsyncInvokeOperation(client, ctx, opID, params, []func(*appsync_sdkv2.Options))
	case "apptest":
		client := apptest_sdkv2.NewFromConfig(cfg, func(o *apptest_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return apptestInvokeOperation(client, ctx, opID, params, []func(*apptest_sdkv2.Options))
	case "arczonalshift":
		client := arczonalshift_sdkv2.NewFromConfig(cfg, func(o *arczonalshift_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return arczonalshiftInvokeOperation(client, ctx, opID, params, []func(*arczonalshift_sdkv2.Options))
	case "artifact":
		client := artifact_sdkv2.NewFromConfig(cfg, func(o *artifact_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return artifactInvokeOperation(client, ctx, opID, params, []func(*artifact_sdkv2.Options))
	case "athena":
		client := athena_sdkv2.NewFromConfig(cfg, func(o *athena_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return athenaInvokeOperation(client, ctx, opID, params, []func(*athena_sdkv2.Options))
	case "auditmanager":
		client := auditmanager_sdkv2.NewFromConfig(cfg, func(o *auditmanager_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return auditmanagerInvokeOperation(client, ctx, opID, params, []func(*auditmanager_sdkv2.Options))
	case "autoscaling":
		client := autoscaling_sdkv2.NewFromConfig(cfg, func(o *autoscaling_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return autoscalingInvokeOperation(client, ctx, opID, params, []func(*autoscaling_sdkv2.Options))
	case "autoscalingplans":
		client := autoscalingplans_sdkv2.NewFromConfig(cfg, func(o *autoscalingplans_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return autoscalingplansInvokeOperation(client, ctx, opID, params, []func(*autoscalingplans_sdkv2.Options))
	case "b2bi":
		client := b2bi_sdkv2.NewFromConfig(cfg, func(o *b2bi_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return b2biInvokeOperation(client, ctx, opID, params, []func(*b2bi_sdkv2.Options))
	case "backup":
		client := backup_sdkv2.NewFromConfig(cfg, func(o *backup_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return backupInvokeOperation(client, ctx, opID, params, []func(*backup_sdkv2.Options))
	case "backupgateway":
		client := backupgateway_sdkv2.NewFromConfig(cfg, func(o *backupgateway_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return backupgatewayInvokeOperation(client, ctx, opID, params, []func(*backupgateway_sdkv2.Options))
	case "batch":
		client := batch_sdkv2.NewFromConfig(cfg, func(o *batch_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return batchInvokeOperation(client, ctx, opID, params, []func(*batch_sdkv2.Options))
	case "bcmdataexports":
		client := bcmdataexports_sdkv2.NewFromConfig(cfg, func(o *bcmdataexports_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return bcmdataexportsInvokeOperation(client, ctx, opID, params, []func(*bcmdataexports_sdkv2.Options))
	case "bedrock":
		client := bedrock_sdkv2.NewFromConfig(cfg, func(o *bedrock_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return bedrockInvokeOperation(client, ctx, opID, params, []func(*bedrock_sdkv2.Options))
	case "bedrockagent":
		client := bedrockagent_sdkv2.NewFromConfig(cfg, func(o *bedrockagent_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return bedrockagentInvokeOperation(client, ctx, opID, params, []func(*bedrockagent_sdkv2.Options))
	case "bedrockagentruntime":
		client := bedrockagentruntime_sdkv2.NewFromConfig(cfg, func(o *bedrockagentruntime_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return bedrockagentruntimeInvokeOperation(client, ctx, opID, params, []func(*bedrockagentruntime_sdkv2.Options))
	case "bedrockruntime":
		client := bedrockruntime_sdkv2.NewFromConfig(cfg, func(o *bedrockruntime_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return bedrockruntimeInvokeOperation(client, ctx, opID, params, []func(*bedrockruntime_sdkv2.Options))
	case "billingconductor":
		client := billingconductor_sdkv2.NewFromConfig(cfg, func(o *billingconductor_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return billingconductorInvokeOperation(client, ctx, opID, params, []func(*billingconductor_sdkv2.Options))
	case "braket":
		client := braket_sdkv2.NewFromConfig(cfg, func(o *braket_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return braketInvokeOperation(client, ctx, opID, params, []func(*braket_sdkv2.Options))
	case "budgets":
		client := budgets_sdkv2.NewFromConfig(cfg, func(o *budgets_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return budgetsInvokeOperation(client, ctx, opID, params, []func(*budgets_sdkv2.Options))
	case "chatbot":
		client := chatbot_sdkv2.NewFromConfig(cfg, func(o *chatbot_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return chatbotInvokeOperation(client, ctx, opID, params, []func(*chatbot_sdkv2.Options))
	case "chime":
		client := chime_sdkv2.NewFromConfig(cfg, func(o *chime_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return chimeInvokeOperation(client, ctx, opID, params, []func(*chime_sdkv2.Options))
	case "chimesdkidentity":
		client := chimesdkidentity_sdkv2.NewFromConfig(cfg, func(o *chimesdkidentity_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return chimesdkidentityInvokeOperation(client, ctx, opID, params, []func(*chimesdkidentity_sdkv2.Options))
	case "chimesdkmediapipelines":
		client := chimesdkmediapipelines_sdkv2.NewFromConfig(cfg, func(o *chimesdkmediapipelines_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return chimesdkmediapipelinesInvokeOperation(client, ctx, opID, params, []func(*chimesdkmediapipelines_sdkv2.Options))
	case "chimesdkmeetings":
		client := chimesdkmeetings_sdkv2.NewFromConfig(cfg, func(o *chimesdkmeetings_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return chimesdkmeetingsInvokeOperation(client, ctx, opID, params, []func(*chimesdkmeetings_sdkv2.Options))
	case "chimesdkmessaging":
		client := chimesdkmessaging_sdkv2.NewFromConfig(cfg, func(o *chimesdkmessaging_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return chimesdkmessagingInvokeOperation(client, ctx, opID, params, []func(*chimesdkmessaging_sdkv2.Options))
	case "chimesdkvoice":
		client := chimesdkvoice_sdkv2.NewFromConfig(cfg, func(o *chimesdkvoice_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return chimesdkvoiceInvokeOperation(client, ctx, opID, params, []func(*chimesdkvoice_sdkv2.Options))
	case "cleanrooms":
		client := cleanrooms_sdkv2.NewFromConfig(cfg, func(o *cleanrooms_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return cleanroomsInvokeOperation(client, ctx, opID, params, []func(*cleanrooms_sdkv2.Options))
	case "cleanroomsml":
		client := cleanroomsml_sdkv2.NewFromConfig(cfg, func(o *cleanroomsml_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return cleanroomsmlInvokeOperation(client, ctx, opID, params, []func(*cleanroomsml_sdkv2.Options))
	case "cloud9":
		client := cloud9_sdkv2.NewFromConfig(cfg, func(o *cloud9_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return cloud9InvokeOperation(client, ctx, opID, params, []func(*cloud9_sdkv2.Options))
	case "cloudcontrol":
		client := cloudcontrol_sdkv2.NewFromConfig(cfg, func(o *cloudcontrol_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return cloudcontrolInvokeOperation(client, ctx, opID, params, []func(*cloudcontrol_sdkv2.Options))
	case "clouddirectory":
		client := clouddirectory_sdkv2.NewFromConfig(cfg, func(o *clouddirectory_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return clouddirectoryInvokeOperation(client, ctx, opID, params, []func(*clouddirectory_sdkv2.Options))
	case "cloudformation":
		client := cloudformation_sdkv2.NewFromConfig(cfg, func(o *cloudformation_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return cloudformationInvokeOperation(client, ctx, opID, params, []func(*cloudformation_sdkv2.Options))
	case "cloudfront":
		client := cloudfront_sdkv2.NewFromConfig(cfg, func(o *cloudfront_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return cloudfrontInvokeOperation(client, ctx, opID, params, []func(*cloudfront_sdkv2.Options))
	case "cloudfrontkeyvaluestore":
		client := cloudfrontkeyvaluestore_sdkv2.NewFromConfig(cfg, func(o *cloudfrontkeyvaluestore_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return cloudfrontkeyvaluestoreInvokeOperation(client, ctx, opID, params, []func(*cloudfrontkeyvaluestore_sdkv2.Options))
	case "cloudhsm":
		client := cloudhsm_sdkv2.NewFromConfig(cfg, func(o *cloudhsm_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return cloudhsmInvokeOperation(client, ctx, opID, params, []func(*cloudhsm_sdkv2.Options))
	case "cloudhsmv2":
		client := cloudhsmv2_sdkv2.NewFromConfig(cfg, func(o *cloudhsmv2_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return cloudhsmv2InvokeOperation(client, ctx, opID, params, []func(*cloudhsmv2_sdkv2.Options))
	case "cloudsearch":
		client := cloudsearch_sdkv2.NewFromConfig(cfg, func(o *cloudsearch_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return cloudsearchInvokeOperation(client, ctx, opID, params, []func(*cloudsearch_sdkv2.Options))
	case "cloudsearchdomain":
		client := cloudsearchdomain_sdkv2.NewFromConfig(cfg, func(o *cloudsearchdomain_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return cloudsearchdomainInvokeOperation(client, ctx, opID, params, []func(*cloudsearchdomain_sdkv2.Options))
	case "cloudtrail":
		client := cloudtrail_sdkv2.NewFromConfig(cfg, func(o *cloudtrail_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return cloudtrailInvokeOperation(client, ctx, opID, params, []func(*cloudtrail_sdkv2.Options))
	case "cloudtraildata":
		client := cloudtraildata_sdkv2.NewFromConfig(cfg, func(o *cloudtraildata_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return cloudtraildataInvokeOperation(client, ctx, opID, params, []func(*cloudtraildata_sdkv2.Options))
	case "cloudwatch":
		client := cloudwatch_sdkv2.NewFromConfig(cfg, func(o *cloudwatch_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return cloudwatchInvokeOperation(client, ctx, opID, params, []func(*cloudwatch_sdkv2.Options))
	case "cloudwatchevents":
		client := cloudwatchevents_sdkv2.NewFromConfig(cfg, func(o *cloudwatchevents_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return cloudwatcheventsInvokeOperation(client, ctx, opID, params, []func(*cloudwatchevents_sdkv2.Options))
	case "cloudwatchlogs":
		client := cloudwatchlogs_sdkv2.NewFromConfig(cfg, func(o *cloudwatchlogs_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return cloudwatchlogsInvokeOperation(client, ctx, opID, params, []func(*cloudwatchlogs_sdkv2.Options))
	case "codeartifact":
		client := codeartifact_sdkv2.NewFromConfig(cfg, func(o *codeartifact_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return codeartifactInvokeOperation(client, ctx, opID, params, []func(*codeartifact_sdkv2.Options))
	case "codebuild":
		client := codebuild_sdkv2.NewFromConfig(cfg, func(o *codebuild_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return codebuildInvokeOperation(client, ctx, opID, params, []func(*codebuild_sdkv2.Options))
	case "codecatalyst":
		client := codecatalyst_sdkv2.NewFromConfig(cfg, func(o *codecatalyst_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return codecatalystInvokeOperation(client, ctx, opID, params, []func(*codecatalyst_sdkv2.Options))
	case "codecommit":
		client := codecommit_sdkv2.NewFromConfig(cfg, func(o *codecommit_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return codecommitInvokeOperation(client, ctx, opID, params, []func(*codecommit_sdkv2.Options))
	case "codeconnections":
		client := codeconnections_sdkv2.NewFromConfig(cfg, func(o *codeconnections_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return codeconnectionsInvokeOperation(client, ctx, opID, params, []func(*codeconnections_sdkv2.Options))
	case "codedeploy":
		client := codedeploy_sdkv2.NewFromConfig(cfg, func(o *codedeploy_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return codedeployInvokeOperation(client, ctx, opID, params, []func(*codedeploy_sdkv2.Options))
	case "codeguruprofiler":
		client := codeguruprofiler_sdkv2.NewFromConfig(cfg, func(o *codeguruprofiler_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return codeguruprofilerInvokeOperation(client, ctx, opID, params, []func(*codeguruprofiler_sdkv2.Options))
	case "codegurureviewer":
		client := codegurureviewer_sdkv2.NewFromConfig(cfg, func(o *codegurureviewer_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return codegurureviewerInvokeOperation(client, ctx, opID, params, []func(*codegurureviewer_sdkv2.Options))
	case "codegurusecurity":
		client := codegurusecurity_sdkv2.NewFromConfig(cfg, func(o *codegurusecurity_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return codegurusecurityInvokeOperation(client, ctx, opID, params, []func(*codegurusecurity_sdkv2.Options))
	case "codepipeline":
		client := codepipeline_sdkv2.NewFromConfig(cfg, func(o *codepipeline_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return codepipelineInvokeOperation(client, ctx, opID, params, []func(*codepipeline_sdkv2.Options))
	case "codestar":
		client := codestar_sdkv2.NewFromConfig(cfg, func(o *codestar_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return codestarInvokeOperation(client, ctx, opID, params, []func(*codestar_sdkv2.Options))
	case "codestarconnections":
		client := codestarconnections_sdkv2.NewFromConfig(cfg, func(o *codestarconnections_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return codestarconnectionsInvokeOperation(client, ctx, opID, params, []func(*codestarconnections_sdkv2.Options))
	case "codestarnotifications":
		client := codestarnotifications_sdkv2.NewFromConfig(cfg, func(o *codestarnotifications_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return codestarnotificationsInvokeOperation(client, ctx, opID, params, []func(*codestarnotifications_sdkv2.Options))
	case "cognitoidentity":
		client := cognitoidentity_sdkv2.NewFromConfig(cfg, func(o *cognitoidentity_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return cognitoidentityInvokeOperation(client, ctx, opID, params, []func(*cognitoidentity_sdkv2.Options))
	case "cognitoidentityprovider":
		client := cognitoidentityprovider_sdkv2.NewFromConfig(cfg, func(o *cognitoidentityprovider_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return cognitoidentityproviderInvokeOperation(client, ctx, opID, params, []func(*cognitoidentityprovider_sdkv2.Options))
	case "cognitosync":
		client := cognitosync_sdkv2.NewFromConfig(cfg, func(o *cognitosync_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return cognitosyncInvokeOperation(client, ctx, opID, params, []func(*cognitosync_sdkv2.Options))
	case "comprehend":
		client := comprehend_sdkv2.NewFromConfig(cfg, func(o *comprehend_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return comprehendInvokeOperation(client, ctx, opID, params, []func(*comprehend_sdkv2.Options))
	case "comprehendmedical":
		client := comprehendmedical_sdkv2.NewFromConfig(cfg, func(o *comprehendmedical_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return comprehendmedicalInvokeOperation(client, ctx, opID, params, []func(*comprehendmedical_sdkv2.Options))
	case "computeoptimizer":
		client := computeoptimizer_sdkv2.NewFromConfig(cfg, func(o *computeoptimizer_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return computeoptimizerInvokeOperation(client, ctx, opID, params, []func(*computeoptimizer_sdkv2.Options))
	case "configservice":
		client := configservice_sdkv2.NewFromConfig(cfg, func(o *configservice_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return configserviceInvokeOperation(client, ctx, opID, params, []func(*configservice_sdkv2.Options))
	case "connect":
		client := connect_sdkv2.NewFromConfig(cfg, func(o *connect_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return connectInvokeOperation(client, ctx, opID, params, []func(*connect_sdkv2.Options))
	case "connectcampaigns":
		client := connectcampaigns_sdkv2.NewFromConfig(cfg, func(o *connectcampaigns_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return connectcampaignsInvokeOperation(client, ctx, opID, params, []func(*connectcampaigns_sdkv2.Options))
	case "connectcases":
		client := connectcases_sdkv2.NewFromConfig(cfg, func(o *connectcases_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return connectcasesInvokeOperation(client, ctx, opID, params, []func(*connectcases_sdkv2.Options))
	case "connectcontactlens":
		client := connectcontactlens_sdkv2.NewFromConfig(cfg, func(o *connectcontactlens_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return connectcontactlensInvokeOperation(client, ctx, opID, params, []func(*connectcontactlens_sdkv2.Options))
	case "connectparticipant":
		client := connectparticipant_sdkv2.NewFromConfig(cfg, func(o *connectparticipant_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return connectparticipantInvokeOperation(client, ctx, opID, params, []func(*connectparticipant_sdkv2.Options))
	case "controlcatalog":
		client := controlcatalog_sdkv2.NewFromConfig(cfg, func(o *controlcatalog_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return controlcatalogInvokeOperation(client, ctx, opID, params, []func(*controlcatalog_sdkv2.Options))
	case "controltower":
		client := controltower_sdkv2.NewFromConfig(cfg, func(o *controltower_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return controltowerInvokeOperation(client, ctx, opID, params, []func(*controltower_sdkv2.Options))
	case "costandusagereportservice":
		client := costandusagereportservice_sdkv2.NewFromConfig(cfg, func(o *costandusagereportservice_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return costandusagereportserviceInvokeOperation(client, ctx, opID, params, []func(*costandusagereportservice_sdkv2.Options))
	case "costexplorer":
		client := costexplorer_sdkv2.NewFromConfig(cfg, func(o *costexplorer_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return costexplorerInvokeOperation(client, ctx, opID, params, []func(*costexplorer_sdkv2.Options))
	case "costoptimizationhub":
		client := costoptimizationhub_sdkv2.NewFromConfig(cfg, func(o *costoptimizationhub_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return costoptimizationhubInvokeOperation(client, ctx, opID, params, []func(*costoptimizationhub_sdkv2.Options))
	case "customerprofiles":
		client := customerprofiles_sdkv2.NewFromConfig(cfg, func(o *customerprofiles_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return customerprofilesInvokeOperation(client, ctx, opID, params, []func(*customerprofiles_sdkv2.Options))
	case "databasemigrationservice":
		client := databasemigrationservice_sdkv2.NewFromConfig(cfg, func(o *databasemigrationservice_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return databasemigrationserviceInvokeOperation(client, ctx, opID, params, []func(*databasemigrationservice_sdkv2.Options))
	case "databrew":
		client := databrew_sdkv2.NewFromConfig(cfg, func(o *databrew_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return databrewInvokeOperation(client, ctx, opID, params, []func(*databrew_sdkv2.Options))
	case "dataexchange":
		client := dataexchange_sdkv2.NewFromConfig(cfg, func(o *dataexchange_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return dataexchangeInvokeOperation(client, ctx, opID, params, []func(*dataexchange_sdkv2.Options))
	case "datapipeline":
		client := datapipeline_sdkv2.NewFromConfig(cfg, func(o *datapipeline_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return datapipelineInvokeOperation(client, ctx, opID, params, []func(*datapipeline_sdkv2.Options))
	case "datasync":
		client := datasync_sdkv2.NewFromConfig(cfg, func(o *datasync_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return datasyncInvokeOperation(client, ctx, opID, params, []func(*datasync_sdkv2.Options))
	case "datazone":
		client := datazone_sdkv2.NewFromConfig(cfg, func(o *datazone_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return datazoneInvokeOperation(client, ctx, opID, params, []func(*datazone_sdkv2.Options))
	case "dax":
		client := dax_sdkv2.NewFromConfig(cfg, func(o *dax_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return daxInvokeOperation(client, ctx, opID, params, []func(*dax_sdkv2.Options))
	case "deadline":
		client := deadline_sdkv2.NewFromConfig(cfg, func(o *deadline_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return deadlineInvokeOperation(client, ctx, opID, params, []func(*deadline_sdkv2.Options))
	case "detective":
		client := detective_sdkv2.NewFromConfig(cfg, func(o *detective_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return detectiveInvokeOperation(client, ctx, opID, params, []func(*detective_sdkv2.Options))
	case "devicefarm":
		client := devicefarm_sdkv2.NewFromConfig(cfg, func(o *devicefarm_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return devicefarmInvokeOperation(client, ctx, opID, params, []func(*devicefarm_sdkv2.Options))
	case "devopsguru":
		client := devopsguru_sdkv2.NewFromConfig(cfg, func(o *devopsguru_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return devopsguruInvokeOperation(client, ctx, opID, params, []func(*devopsguru_sdkv2.Options))
	case "directconnect":
		client := directconnect_sdkv2.NewFromConfig(cfg, func(o *directconnect_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return directconnectInvokeOperation(client, ctx, opID, params, []func(*directconnect_sdkv2.Options))
	case "directoryservice":
		client := directoryservice_sdkv2.NewFromConfig(cfg, func(o *directoryservice_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return directoryserviceInvokeOperation(client, ctx, opID, params, []func(*directoryservice_sdkv2.Options))
	case "dlm":
		client := dlm_sdkv2.NewFromConfig(cfg, func(o *dlm_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return dlmInvokeOperation(client, ctx, opID, params, []func(*dlm_sdkv2.Options))
	case "docdb":
		client := docdb_sdkv2.NewFromConfig(cfg, func(o *docdb_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return docdbInvokeOperation(client, ctx, opID, params, []func(*docdb_sdkv2.Options))
	case "docdbelastic":
		client := docdbelastic_sdkv2.NewFromConfig(cfg, func(o *docdbelastic_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return docdbelasticInvokeOperation(client, ctx, opID, params, []func(*docdbelastic_sdkv2.Options))
	case "drs":
		client := drs_sdkv2.NewFromConfig(cfg, func(o *drs_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return drsInvokeOperation(client, ctx, opID, params, []func(*drs_sdkv2.Options))
	case "dynamodb":
		client := dynamodb_sdkv2.NewFromConfig(cfg, func(o *dynamodb_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return dynamodbInvokeOperation(client, ctx, opID, params, []func(*dynamodb_sdkv2.Options))
	case "dynamodbstreams":
		client := dynamodbstreams_sdkv2.NewFromConfig(cfg, func(o *dynamodbstreams_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return dynamodbstreamsInvokeOperation(client, ctx, opID, params, []func(*dynamodbstreams_sdkv2.Options))
	case "ebs":
		client := ebs_sdkv2.NewFromConfig(cfg, func(o *ebs_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return ebsInvokeOperation(client, ctx, opID, params, []func(*ebs_sdkv2.Options))
	case "ec2":
		client := ec2_sdkv2.NewFromConfig(cfg, func(o *ec2_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return ec2InvokeOperation(client, ctx, opID, params, []func(*ec2_sdkv2.Options))
	case "ec2instanceconnect":
		client := ec2instanceconnect_sdkv2.NewFromConfig(cfg, func(o *ec2instanceconnect_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return ec2instanceconnectInvokeOperation(client, ctx, opID, params, []func(*ec2instanceconnect_sdkv2.Options))
	case "ecr":
		client := ecr_sdkv2.NewFromConfig(cfg, func(o *ecr_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return ecrInvokeOperation(client, ctx, opID, params, []func(*ecr_sdkv2.Options))
	case "ecrpublic":
		client := ecrpublic_sdkv2.NewFromConfig(cfg, func(o *ecrpublic_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return ecrpublicInvokeOperation(client, ctx, opID, params, []func(*ecrpublic_sdkv2.Options))
	case "ecs":
		client := ecs_sdkv2.NewFromConfig(cfg, func(o *ecs_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return ecsInvokeOperation(client, ctx, opID, params, []func(*ecs_sdkv2.Options))
	case "efs":
		client := efs_sdkv2.NewFromConfig(cfg, func(o *efs_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return efsInvokeOperation(client, ctx, opID, params, []func(*efs_sdkv2.Options))
	case "eks":
		client := eks_sdkv2.NewFromConfig(cfg, func(o *eks_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return eksInvokeOperation(client, ctx, opID, params, []func(*eks_sdkv2.Options))
	case "eksauth":
		client := eksauth_sdkv2.NewFromConfig(cfg, func(o *eksauth_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return eksauthInvokeOperation(client, ctx, opID, params, []func(*eksauth_sdkv2.Options))
	case "elasticache":
		client := elasticache_sdkv2.NewFromConfig(cfg, func(o *elasticache_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return elasticacheInvokeOperation(client, ctx, opID, params, []func(*elasticache_sdkv2.Options))
	case "elasticbeanstalk":
		client := elasticbeanstalk_sdkv2.NewFromConfig(cfg, func(o *elasticbeanstalk_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return elasticbeanstalkInvokeOperation(client, ctx, opID, params, []func(*elasticbeanstalk_sdkv2.Options))
	case "elasticinference":
		client := elasticinference_sdkv2.NewFromConfig(cfg, func(o *elasticinference_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return elasticinferenceInvokeOperation(client, ctx, opID, params, []func(*elasticinference_sdkv2.Options))
	case "elasticloadbalancing":
		client := elasticloadbalancing_sdkv2.NewFromConfig(cfg, func(o *elasticloadbalancing_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return elasticloadbalancingInvokeOperation(client, ctx, opID, params, []func(*elasticloadbalancing_sdkv2.Options))
	case "elasticloadbalancingv2":
		client := elasticloadbalancingv2_sdkv2.NewFromConfig(cfg, func(o *elasticloadbalancingv2_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return elasticloadbalancingv2InvokeOperation(client, ctx, opID, params, []func(*elasticloadbalancingv2_sdkv2.Options))
	case "elasticsearchservice":
		client := elasticsearchservice_sdkv2.NewFromConfig(cfg, func(o *elasticsearchservice_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return elasticsearchserviceInvokeOperation(client, ctx, opID, params, []func(*elasticsearchservice_sdkv2.Options))
	case "elastictranscoder":
		client := elastictranscoder_sdkv2.NewFromConfig(cfg, func(o *elastictranscoder_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return elastictranscoderInvokeOperation(client, ctx, opID, params, []func(*elastictranscoder_sdkv2.Options))
	case "emr":
		client := emr_sdkv2.NewFromConfig(cfg, func(o *emr_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return emrInvokeOperation(client, ctx, opID, params, []func(*emr_sdkv2.Options))
	case "emrcontainers":
		client := emrcontainers_sdkv2.NewFromConfig(cfg, func(o *emrcontainers_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return emrcontainersInvokeOperation(client, ctx, opID, params, []func(*emrcontainers_sdkv2.Options))
	case "emrserverless":
		client := emrserverless_sdkv2.NewFromConfig(cfg, func(o *emrserverless_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return emrserverlessInvokeOperation(client, ctx, opID, params, []func(*emrserverless_sdkv2.Options))
	case "entityresolution":
		client := entityresolution_sdkv2.NewFromConfig(cfg, func(o *entityresolution_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return entityresolutionInvokeOperation(client, ctx, opID, params, []func(*entityresolution_sdkv2.Options))
	case "eventbridge":
		client := eventbridge_sdkv2.NewFromConfig(cfg, func(o *eventbridge_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return eventbridgeInvokeOperation(client, ctx, opID, params, []func(*eventbridge_sdkv2.Options))
	case "evidently":
		client := evidently_sdkv2.NewFromConfig(cfg, func(o *evidently_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return evidentlyInvokeOperation(client, ctx, opID, params, []func(*evidently_sdkv2.Options))
	case "finspace":
		client := finspace_sdkv2.NewFromConfig(cfg, func(o *finspace_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return finspaceInvokeOperation(client, ctx, opID, params, []func(*finspace_sdkv2.Options))
	case "finspacedata":
		client := finspacedata_sdkv2.NewFromConfig(cfg, func(o *finspacedata_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return finspacedataInvokeOperation(client, ctx, opID, params, []func(*finspacedata_sdkv2.Options))
	case "firehose":
		client := firehose_sdkv2.NewFromConfig(cfg, func(o *firehose_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return firehoseInvokeOperation(client, ctx, opID, params, []func(*firehose_sdkv2.Options))
	case "fis":
		client := fis_sdkv2.NewFromConfig(cfg, func(o *fis_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return fisInvokeOperation(client, ctx, opID, params, []func(*fis_sdkv2.Options))
	case "fms":
		client := fms_sdkv2.NewFromConfig(cfg, func(o *fms_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return fmsInvokeOperation(client, ctx, opID, params, []func(*fms_sdkv2.Options))
	case "forecast":
		client := forecast_sdkv2.NewFromConfig(cfg, func(o *forecast_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return forecastInvokeOperation(client, ctx, opID, params, []func(*forecast_sdkv2.Options))
	case "forecastquery":
		client := forecastquery_sdkv2.NewFromConfig(cfg, func(o *forecastquery_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return forecastqueryInvokeOperation(client, ctx, opID, params, []func(*forecastquery_sdkv2.Options))
	case "frauddetector":
		client := frauddetector_sdkv2.NewFromConfig(cfg, func(o *frauddetector_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return frauddetectorInvokeOperation(client, ctx, opID, params, []func(*frauddetector_sdkv2.Options))
	case "freetier":
		client := freetier_sdkv2.NewFromConfig(cfg, func(o *freetier_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return freetierInvokeOperation(client, ctx, opID, params, []func(*freetier_sdkv2.Options))
	case "fsx":
		client := fsx_sdkv2.NewFromConfig(cfg, func(o *fsx_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return fsxInvokeOperation(client, ctx, opID, params, []func(*fsx_sdkv2.Options))
	case "gamelift":
		client := gamelift_sdkv2.NewFromConfig(cfg, func(o *gamelift_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return gameliftInvokeOperation(client, ctx, opID, params, []func(*gamelift_sdkv2.Options))
	case "glacier":
		client := glacier_sdkv2.NewFromConfig(cfg, func(o *glacier_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return glacierInvokeOperation(client, ctx, opID, params, []func(*glacier_sdkv2.Options))
	case "globalaccelerator":
		client := globalaccelerator_sdkv2.NewFromConfig(cfg, func(o *globalaccelerator_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return globalacceleratorInvokeOperation(client, ctx, opID, params, []func(*globalaccelerator_sdkv2.Options))
	case "glue":
		client := glue_sdkv2.NewFromConfig(cfg, func(o *glue_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return glueInvokeOperation(client, ctx, opID, params, []func(*glue_sdkv2.Options))
	case "grafana":
		client := grafana_sdkv2.NewFromConfig(cfg, func(o *grafana_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return grafanaInvokeOperation(client, ctx, opID, params, []func(*grafana_sdkv2.Options))
	case "greengrass":
		client := greengrass_sdkv2.NewFromConfig(cfg, func(o *greengrass_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return greengrassInvokeOperation(client, ctx, opID, params, []func(*greengrass_sdkv2.Options))
	case "greengrassv2":
		client := greengrassv2_sdkv2.NewFromConfig(cfg, func(o *greengrassv2_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return greengrassv2InvokeOperation(client, ctx, opID, params, []func(*greengrassv2_sdkv2.Options))
	case "groundstation":
		client := groundstation_sdkv2.NewFromConfig(cfg, func(o *groundstation_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return groundstationInvokeOperation(client, ctx, opID, params, []func(*groundstation_sdkv2.Options))
	case "guardduty":
		client := guardduty_sdkv2.NewFromConfig(cfg, func(o *guardduty_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return guarddutyInvokeOperation(client, ctx, opID, params, []func(*guardduty_sdkv2.Options))
	case "health":
		client := health_sdkv2.NewFromConfig(cfg, func(o *health_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return healthInvokeOperation(client, ctx, opID, params, []func(*health_sdkv2.Options))
	case "healthlake":
		client := healthlake_sdkv2.NewFromConfig(cfg, func(o *healthlake_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return healthlakeInvokeOperation(client, ctx, opID, params, []func(*healthlake_sdkv2.Options))
	case "iam":
		client := iam_sdkv2.NewFromConfig(cfg, func(o *iam_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return iamInvokeOperation(client, ctx, opID, params, []func(*iam_sdkv2.Options))
	case "identitystore":
		client := identitystore_sdkv2.NewFromConfig(cfg, func(o *identitystore_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return identitystoreInvokeOperation(client, ctx, opID, params, []func(*identitystore_sdkv2.Options))
	case "imagebuilder":
		client := imagebuilder_sdkv2.NewFromConfig(cfg, func(o *imagebuilder_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return imagebuilderInvokeOperation(client, ctx, opID, params, []func(*imagebuilder_sdkv2.Options))
	case "inspector":
		client := inspector_sdkv2.NewFromConfig(cfg, func(o *inspector_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return inspectorInvokeOperation(client, ctx, opID, params, []func(*inspector_sdkv2.Options))
	case "inspector2":
		client := inspector2_sdkv2.NewFromConfig(cfg, func(o *inspector2_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return inspector2InvokeOperation(client, ctx, opID, params, []func(*inspector2_sdkv2.Options))
	case "inspectorscan":
		client := inspectorscan_sdkv2.NewFromConfig(cfg, func(o *inspectorscan_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return inspectorscanInvokeOperation(client, ctx, opID, params, []func(*inspectorscan_sdkv2.Options))
	case "internetmonitor":
		client := internetmonitor_sdkv2.NewFromConfig(cfg, func(o *internetmonitor_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return internetmonitorInvokeOperation(client, ctx, opID, params, []func(*internetmonitor_sdkv2.Options))
	case "iot":
		client := iot_sdkv2.NewFromConfig(cfg, func(o *iot_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return iotInvokeOperation(client, ctx, opID, params, []func(*iot_sdkv2.Options))
	case "iot1clickdevicesservice":
		client := iot1clickdevicesservice_sdkv2.NewFromConfig(cfg, func(o *iot1clickdevicesservice_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return iot1clickdevicesserviceInvokeOperation(client, ctx, opID, params, []func(*iot1clickdevicesservice_sdkv2.Options))
	case "iot1clickprojects":
		client := iot1clickprojects_sdkv2.NewFromConfig(cfg, func(o *iot1clickprojects_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return iot1clickprojectsInvokeOperation(client, ctx, opID, params, []func(*iot1clickprojects_sdkv2.Options))
	case "iotanalytics":
		client := iotanalytics_sdkv2.NewFromConfig(cfg, func(o *iotanalytics_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return iotanalyticsInvokeOperation(client, ctx, opID, params, []func(*iotanalytics_sdkv2.Options))
	case "iotdataplane":
		client := iotdataplane_sdkv2.NewFromConfig(cfg, func(o *iotdataplane_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return iotdataplaneInvokeOperation(client, ctx, opID, params, []func(*iotdataplane_sdkv2.Options))
	case "iotdeviceadvisor":
		client := iotdeviceadvisor_sdkv2.NewFromConfig(cfg, func(o *iotdeviceadvisor_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return iotdeviceadvisorInvokeOperation(client, ctx, opID, params, []func(*iotdeviceadvisor_sdkv2.Options))
	case "iotevents":
		client := iotevents_sdkv2.NewFromConfig(cfg, func(o *iotevents_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return ioteventsInvokeOperation(client, ctx, opID, params, []func(*iotevents_sdkv2.Options))
	case "ioteventsdata":
		client := ioteventsdata_sdkv2.NewFromConfig(cfg, func(o *ioteventsdata_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return ioteventsdataInvokeOperation(client, ctx, opID, params, []func(*ioteventsdata_sdkv2.Options))
	case "iotfleethub":
		client := iotfleethub_sdkv2.NewFromConfig(cfg, func(o *iotfleethub_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return iotfleethubInvokeOperation(client, ctx, opID, params, []func(*iotfleethub_sdkv2.Options))
	case "iotfleetwise":
		client := iotfleetwise_sdkv2.NewFromConfig(cfg, func(o *iotfleetwise_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return iotfleetwiseInvokeOperation(client, ctx, opID, params, []func(*iotfleetwise_sdkv2.Options))
	case "iotjobsdataplane":
		client := iotjobsdataplane_sdkv2.NewFromConfig(cfg, func(o *iotjobsdataplane_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return iotjobsdataplaneInvokeOperation(client, ctx, opID, params, []func(*iotjobsdataplane_sdkv2.Options))
	case "iotsecuretunneling":
		client := iotsecuretunneling_sdkv2.NewFromConfig(cfg, func(o *iotsecuretunneling_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return iotsecuretunnelingInvokeOperation(client, ctx, opID, params, []func(*iotsecuretunneling_sdkv2.Options))
	case "iotsitewise":
		client := iotsitewise_sdkv2.NewFromConfig(cfg, func(o *iotsitewise_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return iotsitewiseInvokeOperation(client, ctx, opID, params, []func(*iotsitewise_sdkv2.Options))
	case "iotthingsgraph":
		client := iotthingsgraph_sdkv2.NewFromConfig(cfg, func(o *iotthingsgraph_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return iotthingsgraphInvokeOperation(client, ctx, opID, params, []func(*iotthingsgraph_sdkv2.Options))
	case "iottwinmaker":
		client := iottwinmaker_sdkv2.NewFromConfig(cfg, func(o *iottwinmaker_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return iottwinmakerInvokeOperation(client, ctx, opID, params, []func(*iottwinmaker_sdkv2.Options))
	case "iotwireless":
		client := iotwireless_sdkv2.NewFromConfig(cfg, func(o *iotwireless_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return iotwirelessInvokeOperation(client, ctx, opID, params, []func(*iotwireless_sdkv2.Options))
	case "ivs":
		client := ivs_sdkv2.NewFromConfig(cfg, func(o *ivs_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return ivsInvokeOperation(client, ctx, opID, params, []func(*ivs_sdkv2.Options))
	case "ivschat":
		client := ivschat_sdkv2.NewFromConfig(cfg, func(o *ivschat_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return ivschatInvokeOperation(client, ctx, opID, params, []func(*ivschat_sdkv2.Options))
	case "ivsrealtime":
		client := ivsrealtime_sdkv2.NewFromConfig(cfg, func(o *ivsrealtime_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return ivsrealtimeInvokeOperation(client, ctx, opID, params, []func(*ivsrealtime_sdkv2.Options))
	case "kafka":
		client := kafka_sdkv2.NewFromConfig(cfg, func(o *kafka_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return kafkaInvokeOperation(client, ctx, opID, params, []func(*kafka_sdkv2.Options))
	case "kafkaconnect":
		client := kafkaconnect_sdkv2.NewFromConfig(cfg, func(o *kafkaconnect_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return kafkaconnectInvokeOperation(client, ctx, opID, params, []func(*kafkaconnect_sdkv2.Options))
	case "kendra":
		client := kendra_sdkv2.NewFromConfig(cfg, func(o *kendra_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return kendraInvokeOperation(client, ctx, opID, params, []func(*kendra_sdkv2.Options))
	case "kendraranking":
		client := kendraranking_sdkv2.NewFromConfig(cfg, func(o *kendraranking_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return kendrarankingInvokeOperation(client, ctx, opID, params, []func(*kendraranking_sdkv2.Options))
	case "keyspaces":
		client := keyspaces_sdkv2.NewFromConfig(cfg, func(o *keyspaces_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return keyspacesInvokeOperation(client, ctx, opID, params, []func(*keyspaces_sdkv2.Options))
	case "kinesis":
		client := kinesis_sdkv2.NewFromConfig(cfg, func(o *kinesis_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return kinesisInvokeOperation(client, ctx, opID, params, []func(*kinesis_sdkv2.Options))
	case "kinesisanalytics":
		client := kinesisanalytics_sdkv2.NewFromConfig(cfg, func(o *kinesisanalytics_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return kinesisanalyticsInvokeOperation(client, ctx, opID, params, []func(*kinesisanalytics_sdkv2.Options))
	case "kinesisanalyticsv2":
		client := kinesisanalyticsv2_sdkv2.NewFromConfig(cfg, func(o *kinesisanalyticsv2_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return kinesisanalyticsv2InvokeOperation(client, ctx, opID, params, []func(*kinesisanalyticsv2_sdkv2.Options))
	case "kinesisvideo":
		client := kinesisvideo_sdkv2.NewFromConfig(cfg, func(o *kinesisvideo_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return kinesisvideoInvokeOperation(client, ctx, opID, params, []func(*kinesisvideo_sdkv2.Options))
	case "kinesisvideoarchivedmedia":
		client := kinesisvideoarchivedmedia_sdkv2.NewFromConfig(cfg, func(o *kinesisvideoarchivedmedia_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return kinesisvideoarchivedmediaInvokeOperation(client, ctx, opID, params, []func(*kinesisvideoarchivedmedia_sdkv2.Options))
	case "kinesisvideomedia":
		client := kinesisvideomedia_sdkv2.NewFromConfig(cfg, func(o *kinesisvideomedia_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return kinesisvideomediaInvokeOperation(client, ctx, opID, params, []func(*kinesisvideomedia_sdkv2.Options))
	case "kinesisvideosignaling":
		client := kinesisvideosignaling_sdkv2.NewFromConfig(cfg, func(o *kinesisvideosignaling_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return kinesisvideosignalingInvokeOperation(client, ctx, opID, params, []func(*kinesisvideosignaling_sdkv2.Options))
	case "kinesisvideowebrtcstorage":
		client := kinesisvideowebrtcstorage_sdkv2.NewFromConfig(cfg, func(o *kinesisvideowebrtcstorage_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return kinesisvideowebrtcstorageInvokeOperation(client, ctx, opID, params, []func(*kinesisvideowebrtcstorage_sdkv2.Options))
	case "kms":
		client := kms_sdkv2.NewFromConfig(cfg, func(o *kms_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return kmsInvokeOperation(client, ctx, opID, params, []func(*kms_sdkv2.Options))
	case "lakeformation":
		client := lakeformation_sdkv2.NewFromConfig(cfg, func(o *lakeformation_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return lakeformationInvokeOperation(client, ctx, opID, params, []func(*lakeformation_sdkv2.Options))
	case "lambda":
		client := lambda_sdkv2.NewFromConfig(cfg, func(o *lambda_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return lambdaInvokeOperation(client, ctx, opID, params, []func(*lambda_sdkv2.Options))
	case "launchwizard":
		client := launchwizard_sdkv2.NewFromConfig(cfg, func(o *launchwizard_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return launchwizardInvokeOperation(client, ctx, opID, params, []func(*launchwizard_sdkv2.Options))
	case "lexmodelbuildingservice":
		client := lexmodelbuildingservice_sdkv2.NewFromConfig(cfg, func(o *lexmodelbuildingservice_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return lexmodelbuildingserviceInvokeOperation(client, ctx, opID, params, []func(*lexmodelbuildingservice_sdkv2.Options))
	case "lexmodelsv2":
		client := lexmodelsv2_sdkv2.NewFromConfig(cfg, func(o *lexmodelsv2_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return lexmodelsv2InvokeOperation(client, ctx, opID, params, []func(*lexmodelsv2_sdkv2.Options))
	case "lexruntimeservice":
		client := lexruntimeservice_sdkv2.NewFromConfig(cfg, func(o *lexruntimeservice_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return lexruntimeserviceInvokeOperation(client, ctx, opID, params, []func(*lexruntimeservice_sdkv2.Options))
	case "lexruntimev2":
		client := lexruntimev2_sdkv2.NewFromConfig(cfg, func(o *lexruntimev2_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return lexruntimev2InvokeOperation(client, ctx, opID, params, []func(*lexruntimev2_sdkv2.Options))
	case "licensemanager":
		client := licensemanager_sdkv2.NewFromConfig(cfg, func(o *licensemanager_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return licensemanagerInvokeOperation(client, ctx, opID, params, []func(*licensemanager_sdkv2.Options))
	case "licensemanagerlinuxsubscriptions":
		client := licensemanagerlinuxsubscriptions_sdkv2.NewFromConfig(cfg, func(o *licensemanagerlinuxsubscriptions_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return licensemanagerlinuxsubscriptionsInvokeOperation(client, ctx, opID, params, []func(*licensemanagerlinuxsubscriptions_sdkv2.Options))
	case "licensemanagerusersubscriptions":
		client := licensemanagerusersubscriptions_sdkv2.NewFromConfig(cfg, func(o *licensemanagerusersubscriptions_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return licensemanagerusersubscriptionsInvokeOperation(client, ctx, opID, params, []func(*licensemanagerusersubscriptions_sdkv2.Options))
	case "lightsail":
		client := lightsail_sdkv2.NewFromConfig(cfg, func(o *lightsail_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return lightsailInvokeOperation(client, ctx, opID, params, []func(*lightsail_sdkv2.Options))
	case "location":
		client := location_sdkv2.NewFromConfig(cfg, func(o *location_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return locationInvokeOperation(client, ctx, opID, params, []func(*location_sdkv2.Options))
	case "lookoutequipment":
		client := lookoutequipment_sdkv2.NewFromConfig(cfg, func(o *lookoutequipment_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return lookoutequipmentInvokeOperation(client, ctx, opID, params, []func(*lookoutequipment_sdkv2.Options))
	case "lookoutmetrics":
		client := lookoutmetrics_sdkv2.NewFromConfig(cfg, func(o *lookoutmetrics_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return lookoutmetricsInvokeOperation(client, ctx, opID, params, []func(*lookoutmetrics_sdkv2.Options))
	case "lookoutvision":
		client := lookoutvision_sdkv2.NewFromConfig(cfg, func(o *lookoutvision_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return lookoutvisionInvokeOperation(client, ctx, opID, params, []func(*lookoutvision_sdkv2.Options))
	case "m2":
		client := m2_sdkv2.NewFromConfig(cfg, func(o *m2_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return m2InvokeOperation(client, ctx, opID, params, []func(*m2_sdkv2.Options))
	case "machinelearning":
		client := machinelearning_sdkv2.NewFromConfig(cfg, func(o *machinelearning_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return machinelearningInvokeOperation(client, ctx, opID, params, []func(*machinelearning_sdkv2.Options))
	case "macie2":
		client := macie2_sdkv2.NewFromConfig(cfg, func(o *macie2_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return macie2InvokeOperation(client, ctx, opID, params, []func(*macie2_sdkv2.Options))
	case "mailmanager":
		client := mailmanager_sdkv2.NewFromConfig(cfg, func(o *mailmanager_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return mailmanagerInvokeOperation(client, ctx, opID, params, []func(*mailmanager_sdkv2.Options))
	case "managedblockchain":
		client := managedblockchain_sdkv2.NewFromConfig(cfg, func(o *managedblockchain_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return managedblockchainInvokeOperation(client, ctx, opID, params, []func(*managedblockchain_sdkv2.Options))
	case "managedblockchainquery":
		client := managedblockchainquery_sdkv2.NewFromConfig(cfg, func(o *managedblockchainquery_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return managedblockchainqueryInvokeOperation(client, ctx, opID, params, []func(*managedblockchainquery_sdkv2.Options))
	case "marketplaceagreement":
		client := marketplaceagreement_sdkv2.NewFromConfig(cfg, func(o *marketplaceagreement_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return marketplaceagreementInvokeOperation(client, ctx, opID, params, []func(*marketplaceagreement_sdkv2.Options))
	case "marketplacecatalog":
		client := marketplacecatalog_sdkv2.NewFromConfig(cfg, func(o *marketplacecatalog_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return marketplacecatalogInvokeOperation(client, ctx, opID, params, []func(*marketplacecatalog_sdkv2.Options))
	case "marketplacecommerceanalytics":
		client := marketplacecommerceanalytics_sdkv2.NewFromConfig(cfg, func(o *marketplacecommerceanalytics_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return marketplacecommerceanalyticsInvokeOperation(client, ctx, opID, params, []func(*marketplacecommerceanalytics_sdkv2.Options))
	case "marketplacedeployment":
		client := marketplacedeployment_sdkv2.NewFromConfig(cfg, func(o *marketplacedeployment_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return marketplacedeploymentInvokeOperation(client, ctx, opID, params, []func(*marketplacedeployment_sdkv2.Options))
	case "marketplaceentitlementservice":
		client := marketplaceentitlementservice_sdkv2.NewFromConfig(cfg, func(o *marketplaceentitlementservice_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return marketplaceentitlementserviceInvokeOperation(client, ctx, opID, params, []func(*marketplaceentitlementservice_sdkv2.Options))
	case "marketplacemetering":
		client := marketplacemetering_sdkv2.NewFromConfig(cfg, func(o *marketplacemetering_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return marketplacemeteringInvokeOperation(client, ctx, opID, params, []func(*marketplacemetering_sdkv2.Options))
	case "mediaconnect":
		client := mediaconnect_sdkv2.NewFromConfig(cfg, func(o *mediaconnect_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return mediaconnectInvokeOperation(client, ctx, opID, params, []func(*mediaconnect_sdkv2.Options))
	case "mediaconvert":
		client := mediaconvert_sdkv2.NewFromConfig(cfg, func(o *mediaconvert_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return mediaconvertInvokeOperation(client, ctx, opID, params, []func(*mediaconvert_sdkv2.Options))
	case "medialive":
		client := medialive_sdkv2.NewFromConfig(cfg, func(o *medialive_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return medialiveInvokeOperation(client, ctx, opID, params, []func(*medialive_sdkv2.Options))
	case "mediapackage":
		client := mediapackage_sdkv2.NewFromConfig(cfg, func(o *mediapackage_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return mediapackageInvokeOperation(client, ctx, opID, params, []func(*mediapackage_sdkv2.Options))
	case "mediapackagev2":
		client := mediapackagev2_sdkv2.NewFromConfig(cfg, func(o *mediapackagev2_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return mediapackagev2InvokeOperation(client, ctx, opID, params, []func(*mediapackagev2_sdkv2.Options))
	case "mediapackagevod":
		client := mediapackagevod_sdkv2.NewFromConfig(cfg, func(o *mediapackagevod_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return mediapackagevodInvokeOperation(client, ctx, opID, params, []func(*mediapackagevod_sdkv2.Options))
	case "mediastore":
		client := mediastore_sdkv2.NewFromConfig(cfg, func(o *mediastore_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return mediastoreInvokeOperation(client, ctx, opID, params, []func(*mediastore_sdkv2.Options))
	case "mediastoredata":
		client := mediastoredata_sdkv2.NewFromConfig(cfg, func(o *mediastoredata_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return mediastoredataInvokeOperation(client, ctx, opID, params, []func(*mediastoredata_sdkv2.Options))
	case "mediatailor":
		client := mediatailor_sdkv2.NewFromConfig(cfg, func(o *mediatailor_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return mediatailorInvokeOperation(client, ctx, opID, params, []func(*mediatailor_sdkv2.Options))
	case "medicalimaging":
		client := medicalimaging_sdkv2.NewFromConfig(cfg, func(o *medicalimaging_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return medicalimagingInvokeOperation(client, ctx, opID, params, []func(*medicalimaging_sdkv2.Options))
	case "memorydb":
		client := memorydb_sdkv2.NewFromConfig(cfg, func(o *memorydb_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return memorydbInvokeOperation(client, ctx, opID, params, []func(*memorydb_sdkv2.Options))
	case "mgn":
		client := mgn_sdkv2.NewFromConfig(cfg, func(o *mgn_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return mgnInvokeOperation(client, ctx, opID, params, []func(*mgn_sdkv2.Options))
	case "migrationhub":
		client := migrationhub_sdkv2.NewFromConfig(cfg, func(o *migrationhub_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return migrationhubInvokeOperation(client, ctx, opID, params, []func(*migrationhub_sdkv2.Options))
	case "migrationhubconfig":
		client := migrationhubconfig_sdkv2.NewFromConfig(cfg, func(o *migrationhubconfig_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return migrationhubconfigInvokeOperation(client, ctx, opID, params, []func(*migrationhubconfig_sdkv2.Options))
	case "migrationhuborchestrator":
		client := migrationhuborchestrator_sdkv2.NewFromConfig(cfg, func(o *migrationhuborchestrator_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return migrationhuborchestratorInvokeOperation(client, ctx, opID, params, []func(*migrationhuborchestrator_sdkv2.Options))
	case "migrationhubrefactorspaces":
		client := migrationhubrefactorspaces_sdkv2.NewFromConfig(cfg, func(o *migrationhubrefactorspaces_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return migrationhubrefactorspacesInvokeOperation(client, ctx, opID, params, []func(*migrationhubrefactorspaces_sdkv2.Options))
	case "migrationhubstrategy":
		client := migrationhubstrategy_sdkv2.NewFromConfig(cfg, func(o *migrationhubstrategy_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return migrationhubstrategyInvokeOperation(client, ctx, opID, params, []func(*migrationhubstrategy_sdkv2.Options))
	case "mobile":
		client := mobile_sdkv2.NewFromConfig(cfg, func(o *mobile_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return mobileInvokeOperation(client, ctx, opID, params, []func(*mobile_sdkv2.Options))
	case "mq":
		client := mq_sdkv2.NewFromConfig(cfg, func(o *mq_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return mqInvokeOperation(client, ctx, opID, params, []func(*mq_sdkv2.Options))
	case "mturk":
		client := mturk_sdkv2.NewFromConfig(cfg, func(o *mturk_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return mturkInvokeOperation(client, ctx, opID, params, []func(*mturk_sdkv2.Options))
	case "mwaa":
		client := mwaa_sdkv2.NewFromConfig(cfg, func(o *mwaa_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return mwaaInvokeOperation(client, ctx, opID, params, []func(*mwaa_sdkv2.Options))
	case "neptune":
		client := neptune_sdkv2.NewFromConfig(cfg, func(o *neptune_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return neptuneInvokeOperation(client, ctx, opID, params, []func(*neptune_sdkv2.Options))
	case "neptunedata":
		client := neptunedata_sdkv2.NewFromConfig(cfg, func(o *neptunedata_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return neptunedataInvokeOperation(client, ctx, opID, params, []func(*neptunedata_sdkv2.Options))
	case "neptunegraph":
		client := neptunegraph_sdkv2.NewFromConfig(cfg, func(o *neptunegraph_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return neptunegraphInvokeOperation(client, ctx, opID, params, []func(*neptunegraph_sdkv2.Options))
	case "networkfirewall":
		client := networkfirewall_sdkv2.NewFromConfig(cfg, func(o *networkfirewall_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return networkfirewallInvokeOperation(client, ctx, opID, params, []func(*networkfirewall_sdkv2.Options))
	case "networkmanager":
		client := networkmanager_sdkv2.NewFromConfig(cfg, func(o *networkmanager_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return networkmanagerInvokeOperation(client, ctx, opID, params, []func(*networkmanager_sdkv2.Options))
	case "networkmonitor":
		client := networkmonitor_sdkv2.NewFromConfig(cfg, func(o *networkmonitor_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return networkmonitorInvokeOperation(client, ctx, opID, params, []func(*networkmonitor_sdkv2.Options))
	case "nimble":
		client := nimble_sdkv2.NewFromConfig(cfg, func(o *nimble_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return nimbleInvokeOperation(client, ctx, opID, params, []func(*nimble_sdkv2.Options))
	case "oam":
		client := oam_sdkv2.NewFromConfig(cfg, func(o *oam_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return oamInvokeOperation(client, ctx, opID, params, []func(*oam_sdkv2.Options))
	case "omics":
		client := omics_sdkv2.NewFromConfig(cfg, func(o *omics_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return omicsInvokeOperation(client, ctx, opID, params, []func(*omics_sdkv2.Options))
	case "opensearch":
		client := opensearch_sdkv2.NewFromConfig(cfg, func(o *opensearch_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return opensearchInvokeOperation(client, ctx, opID, params, []func(*opensearch_sdkv2.Options))
	case "opensearchserverless":
		client := opensearchserverless_sdkv2.NewFromConfig(cfg, func(o *opensearchserverless_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return opensearchserverlessInvokeOperation(client, ctx, opID, params, []func(*opensearchserverless_sdkv2.Options))
	case "opsworks":
		client := opsworks_sdkv2.NewFromConfig(cfg, func(o *opsworks_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return opsworksInvokeOperation(client, ctx, opID, params, []func(*opsworks_sdkv2.Options))
	case "opsworkscm":
		client := opsworkscm_sdkv2.NewFromConfig(cfg, func(o *opsworkscm_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return opsworkscmInvokeOperation(client, ctx, opID, params, []func(*opsworkscm_sdkv2.Options))
	case "organizations":
		client := organizations_sdkv2.NewFromConfig(cfg, func(o *organizations_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return organizationsInvokeOperation(client, ctx, opID, params, []func(*organizations_sdkv2.Options))
	case "osis":
		client := osis_sdkv2.NewFromConfig(cfg, func(o *osis_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return osisInvokeOperation(client, ctx, opID, params, []func(*osis_sdkv2.Options))
	case "outposts":
		client := outposts_sdkv2.NewFromConfig(cfg, func(o *outposts_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return outpostsInvokeOperation(client, ctx, opID, params, []func(*outposts_sdkv2.Options))
	case "panorama":
		client := panorama_sdkv2.NewFromConfig(cfg, func(o *panorama_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return panoramaInvokeOperation(client, ctx, opID, params, []func(*panorama_sdkv2.Options))
	case "paymentcryptography":
		client := paymentcryptography_sdkv2.NewFromConfig(cfg, func(o *paymentcryptography_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return paymentcryptographyInvokeOperation(client, ctx, opID, params, []func(*paymentcryptography_sdkv2.Options))
	case "paymentcryptographydata":
		client := paymentcryptographydata_sdkv2.NewFromConfig(cfg, func(o *paymentcryptographydata_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return paymentcryptographydataInvokeOperation(client, ctx, opID, params, []func(*paymentcryptographydata_sdkv2.Options))
	case "pcaconnectorad":
		client := pcaconnectorad_sdkv2.NewFromConfig(cfg, func(o *pcaconnectorad_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return pcaconnectoradInvokeOperation(client, ctx, opID, params, []func(*pcaconnectorad_sdkv2.Options))
	case "pcaconnectorscep":
		client := pcaconnectorscep_sdkv2.NewFromConfig(cfg, func(o *pcaconnectorscep_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return pcaconnectorscepInvokeOperation(client, ctx, opID, params, []func(*pcaconnectorscep_sdkv2.Options))
	case "personalize":
		client := personalize_sdkv2.NewFromConfig(cfg, func(o *personalize_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return personalizeInvokeOperation(client, ctx, opID, params, []func(*personalize_sdkv2.Options))
	case "personalizeevents":
		client := personalizeevents_sdkv2.NewFromConfig(cfg, func(o *personalizeevents_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return personalizeeventsInvokeOperation(client, ctx, opID, params, []func(*personalizeevents_sdkv2.Options))
	case "personalizeruntime":
		client := personalizeruntime_sdkv2.NewFromConfig(cfg, func(o *personalizeruntime_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return personalizeruntimeInvokeOperation(client, ctx, opID, params, []func(*personalizeruntime_sdkv2.Options))
	case "pi":
		client := pi_sdkv2.NewFromConfig(cfg, func(o *pi_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return piInvokeOperation(client, ctx, opID, params, []func(*pi_sdkv2.Options))
	case "pinpoint":
		client := pinpoint_sdkv2.NewFromConfig(cfg, func(o *pinpoint_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return pinpointInvokeOperation(client, ctx, opID, params, []func(*pinpoint_sdkv2.Options))
	case "pinpointemail":
		client := pinpointemail_sdkv2.NewFromConfig(cfg, func(o *pinpointemail_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return pinpointemailInvokeOperation(client, ctx, opID, params, []func(*pinpointemail_sdkv2.Options))
	case "pinpointsmsvoice":
		client := pinpointsmsvoice_sdkv2.NewFromConfig(cfg, func(o *pinpointsmsvoice_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return pinpointsmsvoiceInvokeOperation(client, ctx, opID, params, []func(*pinpointsmsvoice_sdkv2.Options))
	case "pinpointsmsvoicev2":
		client := pinpointsmsvoicev2_sdkv2.NewFromConfig(cfg, func(o *pinpointsmsvoicev2_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return pinpointsmsvoicev2InvokeOperation(client, ctx, opID, params, []func(*pinpointsmsvoicev2_sdkv2.Options))
	case "pipes":
		client := pipes_sdkv2.NewFromConfig(cfg, func(o *pipes_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return pipesInvokeOperation(client, ctx, opID, params, []func(*pipes_sdkv2.Options))
	case "polly":
		client := polly_sdkv2.NewFromConfig(cfg, func(o *polly_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return pollyInvokeOperation(client, ctx, opID, params, []func(*polly_sdkv2.Options))
	case "pricing":
		client := pricing_sdkv2.NewFromConfig(cfg, func(o *pricing_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return pricingInvokeOperation(client, ctx, opID, params, []func(*pricing_sdkv2.Options))
	case "privatenetworks":
		client := privatenetworks_sdkv2.NewFromConfig(cfg, func(o *privatenetworks_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return privatenetworksInvokeOperation(client, ctx, opID, params, []func(*privatenetworks_sdkv2.Options))
	case "proton":
		client := proton_sdkv2.NewFromConfig(cfg, func(o *proton_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return protonInvokeOperation(client, ctx, opID, params, []func(*proton_sdkv2.Options))
	case "qbusiness":
		client := qbusiness_sdkv2.NewFromConfig(cfg, func(o *qbusiness_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return qbusinessInvokeOperation(client, ctx, opID, params, []func(*qbusiness_sdkv2.Options))
	case "qconnect":
		client := qconnect_sdkv2.NewFromConfig(cfg, func(o *qconnect_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return qconnectInvokeOperation(client, ctx, opID, params, []func(*qconnect_sdkv2.Options))
	case "qldb":
		client := qldb_sdkv2.NewFromConfig(cfg, func(o *qldb_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return qldbInvokeOperation(client, ctx, opID, params, []func(*qldb_sdkv2.Options))
	case "qldbsession":
		client := qldbsession_sdkv2.NewFromConfig(cfg, func(o *qldbsession_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return qldbsessionInvokeOperation(client, ctx, opID, params, []func(*qldbsession_sdkv2.Options))
	case "quicksight":
		client := quicksight_sdkv2.NewFromConfig(cfg, func(o *quicksight_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return quicksightInvokeOperation(client, ctx, opID, params, []func(*quicksight_sdkv2.Options))
	case "ram":
		client := ram_sdkv2.NewFromConfig(cfg, func(o *ram_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return ramInvokeOperation(client, ctx, opID, params, []func(*ram_sdkv2.Options))
	case "rbin":
		client := rbin_sdkv2.NewFromConfig(cfg, func(o *rbin_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return rbinInvokeOperation(client, ctx, opID, params, []func(*rbin_sdkv2.Options))
	case "rds":
		client := rds_sdkv2.NewFromConfig(cfg, func(o *rds_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return rdsInvokeOperation(client, ctx, opID, params, []func(*rds_sdkv2.Options))
	case "rdsdata":
		client := rdsdata_sdkv2.NewFromConfig(cfg, func(o *rdsdata_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return rdsdataInvokeOperation(client, ctx, opID, params, []func(*rdsdata_sdkv2.Options))
	case "redshift":
		client := redshift_sdkv2.NewFromConfig(cfg, func(o *redshift_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return redshiftInvokeOperation(client, ctx, opID, params, []func(*redshift_sdkv2.Options))
	case "redshiftdata":
		client := redshiftdata_sdkv2.NewFromConfig(cfg, func(o *redshiftdata_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return redshiftdataInvokeOperation(client, ctx, opID, params, []func(*redshiftdata_sdkv2.Options))
	case "redshiftserverless":
		client := redshiftserverless_sdkv2.NewFromConfig(cfg, func(o *redshiftserverless_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return redshiftserverlessInvokeOperation(client, ctx, opID, params, []func(*redshiftserverless_sdkv2.Options))
	case "rekognition":
		client := rekognition_sdkv2.NewFromConfig(cfg, func(o *rekognition_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return rekognitionInvokeOperation(client, ctx, opID, params, []func(*rekognition_sdkv2.Options))
	case "repostspace":
		client := repostspace_sdkv2.NewFromConfig(cfg, func(o *repostspace_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return repostspaceInvokeOperation(client, ctx, opID, params, []func(*repostspace_sdkv2.Options))
	case "resiliencehub":
		client := resiliencehub_sdkv2.NewFromConfig(cfg, func(o *resiliencehub_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return resiliencehubInvokeOperation(client, ctx, opID, params, []func(*resiliencehub_sdkv2.Options))
	case "resourceexplorer2":
		client := resourceexplorer2_sdkv2.NewFromConfig(cfg, func(o *resourceexplorer2_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return resourceexplorer2InvokeOperation(client, ctx, opID, params, []func(*resourceexplorer2_sdkv2.Options))
	case "resourcegroups":
		client := resourcegroups_sdkv2.NewFromConfig(cfg, func(o *resourcegroups_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return resourcegroupsInvokeOperation(client, ctx, opID, params, []func(*resourcegroups_sdkv2.Options))
	case "resourcegroupstaggingapi":
		client := resourcegroupstaggingapi_sdkv2.NewFromConfig(cfg, func(o *resourcegroupstaggingapi_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return resourcegroupstaggingapiInvokeOperation(client, ctx, opID, params, []func(*resourcegroupstaggingapi_sdkv2.Options))
	case "robomaker":
		client := robomaker_sdkv2.NewFromConfig(cfg, func(o *robomaker_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return robomakerInvokeOperation(client, ctx, opID, params, []func(*robomaker_sdkv2.Options))
	case "rolesanywhere":
		client := rolesanywhere_sdkv2.NewFromConfig(cfg, func(o *rolesanywhere_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return rolesanywhereInvokeOperation(client, ctx, opID, params, []func(*rolesanywhere_sdkv2.Options))
	case "route53":
		client := route53_sdkv2.NewFromConfig(cfg, func(o *route53_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return route53InvokeOperation(client, ctx, opID, params, []func(*route53_sdkv2.Options))
	case "route53domains":
		client := route53domains_sdkv2.NewFromConfig(cfg, func(o *route53domains_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return route53domainsInvokeOperation(client, ctx, opID, params, []func(*route53domains_sdkv2.Options))
	case "route53profiles":
		client := route53profiles_sdkv2.NewFromConfig(cfg, func(o *route53profiles_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return route53profilesInvokeOperation(client, ctx, opID, params, []func(*route53profiles_sdkv2.Options))
	case "route53recoverycluster":
		client := route53recoverycluster_sdkv2.NewFromConfig(cfg, func(o *route53recoverycluster_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return route53recoveryclusterInvokeOperation(client, ctx, opID, params, []func(*route53recoverycluster_sdkv2.Options))
	case "route53recoverycontrolconfig":
		client := route53recoverycontrolconfig_sdkv2.NewFromConfig(cfg, func(o *route53recoverycontrolconfig_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return route53recoverycontrolconfigInvokeOperation(client, ctx, opID, params, []func(*route53recoverycontrolconfig_sdkv2.Options))
	case "route53recoveryreadiness":
		client := route53recoveryreadiness_sdkv2.NewFromConfig(cfg, func(o *route53recoveryreadiness_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return route53recoveryreadinessInvokeOperation(client, ctx, opID, params, []func(*route53recoveryreadiness_sdkv2.Options))
	case "route53resolver":
		client := route53resolver_sdkv2.NewFromConfig(cfg, func(o *route53resolver_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return route53resolverInvokeOperation(client, ctx, opID, params, []func(*route53resolver_sdkv2.Options))
	case "rum":
		client := rum_sdkv2.NewFromConfig(cfg, func(o *rum_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return rumInvokeOperation(client, ctx, opID, params, []func(*rum_sdkv2.Options))
	case "s3":
		client := s3_sdkv2.NewFromConfig(cfg, func(o *s3_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return s3InvokeOperation(client, ctx, opID, params, []func(*s3_sdkv2.Options))
	case "s3control":
		client := s3control_sdkv2.NewFromConfig(cfg, func(o *s3control_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return s3controlInvokeOperation(client, ctx, opID, params, []func(*s3control_sdkv2.Options))
	case "s3outposts":
		client := s3outposts_sdkv2.NewFromConfig(cfg, func(o *s3outposts_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return s3outpostsInvokeOperation(client, ctx, opID, params, []func(*s3outposts_sdkv2.Options))
	case "sagemaker":
		client := sagemaker_sdkv2.NewFromConfig(cfg, func(o *sagemaker_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return sagemakerInvokeOperation(client, ctx, opID, params, []func(*sagemaker_sdkv2.Options))
	case "sagemakera2iruntime":
		client := sagemakera2iruntime_sdkv2.NewFromConfig(cfg, func(o *sagemakera2iruntime_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return sagemakera2iruntimeInvokeOperation(client, ctx, opID, params, []func(*sagemakera2iruntime_sdkv2.Options))
	case "sagemakeredge":
		client := sagemakeredge_sdkv2.NewFromConfig(cfg, func(o *sagemakeredge_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return sagemakeredgeInvokeOperation(client, ctx, opID, params, []func(*sagemakeredge_sdkv2.Options))
	case "sagemakerfeaturestoreruntime":
		client := sagemakerfeaturestoreruntime_sdkv2.NewFromConfig(cfg, func(o *sagemakerfeaturestoreruntime_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return sagemakerfeaturestoreruntimeInvokeOperation(client, ctx, opID, params, []func(*sagemakerfeaturestoreruntime_sdkv2.Options))
	case "sagemakergeospatial":
		client := sagemakergeospatial_sdkv2.NewFromConfig(cfg, func(o *sagemakergeospatial_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return sagemakergeospatialInvokeOperation(client, ctx, opID, params, []func(*sagemakergeospatial_sdkv2.Options))
	case "sagemakermetrics":
		client := sagemakermetrics_sdkv2.NewFromConfig(cfg, func(o *sagemakermetrics_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return sagemakermetricsInvokeOperation(client, ctx, opID, params, []func(*sagemakermetrics_sdkv2.Options))
	case "sagemakerruntime":
		client := sagemakerruntime_sdkv2.NewFromConfig(cfg, func(o *sagemakerruntime_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return sagemakerruntimeInvokeOperation(client, ctx, opID, params, []func(*sagemakerruntime_sdkv2.Options))
	case "savingsplans":
		client := savingsplans_sdkv2.NewFromConfig(cfg, func(o *savingsplans_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return savingsplansInvokeOperation(client, ctx, opID, params, []func(*savingsplans_sdkv2.Options))
	case "scheduler":
		client := scheduler_sdkv2.NewFromConfig(cfg, func(o *scheduler_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return schedulerInvokeOperation(client, ctx, opID, params, []func(*scheduler_sdkv2.Options))
	case "schemas":
		client := schemas_sdkv2.NewFromConfig(cfg, func(o *schemas_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return schemasInvokeOperation(client, ctx, opID, params, []func(*schemas_sdkv2.Options))
	case "secretsmanager":
		client := secretsmanager_sdkv2.NewFromConfig(cfg, func(o *secretsmanager_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return secretsmanagerInvokeOperation(client, ctx, opID, params, []func(*secretsmanager_sdkv2.Options))
	case "securityhub":
		client := securityhub_sdkv2.NewFromConfig(cfg, func(o *securityhub_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return securityhubInvokeOperation(client, ctx, opID, params, []func(*securityhub_sdkv2.Options))
	case "securitylake":
		client := securitylake_sdkv2.NewFromConfig(cfg, func(o *securitylake_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return securitylakeInvokeOperation(client, ctx, opID, params, []func(*securitylake_sdkv2.Options))
	case "serverlessapplicationrepository":
		client := serverlessapplicationrepository_sdkv2.NewFromConfig(cfg, func(o *serverlessapplicationrepository_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return serverlessapplicationrepositoryInvokeOperation(client, ctx, opID, params, []func(*serverlessapplicationrepository_sdkv2.Options))
	case "servicecatalog":
		client := servicecatalog_sdkv2.NewFromConfig(cfg, func(o *servicecatalog_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return servicecatalogInvokeOperation(client, ctx, opID, params, []func(*servicecatalog_sdkv2.Options))
	case "servicecatalogappregistry":
		client := servicecatalogappregistry_sdkv2.NewFromConfig(cfg, func(o *servicecatalogappregistry_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return servicecatalogappregistryInvokeOperation(client, ctx, opID, params, []func(*servicecatalogappregistry_sdkv2.Options))
	case "servicediscovery":
		client := servicediscovery_sdkv2.NewFromConfig(cfg, func(o *servicediscovery_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return servicediscoveryInvokeOperation(client, ctx, opID, params, []func(*servicediscovery_sdkv2.Options))
	case "servicequotas":
		client := servicequotas_sdkv2.NewFromConfig(cfg, func(o *servicequotas_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return servicequotasInvokeOperation(client, ctx, opID, params, []func(*servicequotas_sdkv2.Options))
	case "ses":
		client := ses_sdkv2.NewFromConfig(cfg, func(o *ses_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return sesInvokeOperation(client, ctx, opID, params, []func(*ses_sdkv2.Options))
	case "sesv2":
		client := sesv2_sdkv2.NewFromConfig(cfg, func(o *sesv2_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return sesv2InvokeOperation(client, ctx, opID, params, []func(*sesv2_sdkv2.Options))
	case "sfn":
		client := sfn_sdkv2.NewFromConfig(cfg, func(o *sfn_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return sfnInvokeOperation(client, ctx, opID, params, []func(*sfn_sdkv2.Options))
	case "shield":
		client := shield_sdkv2.NewFromConfig(cfg, func(o *shield_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return shieldInvokeOperation(client, ctx, opID, params, []func(*shield_sdkv2.Options))
	case "signer":
		client := signer_sdkv2.NewFromConfig(cfg, func(o *signer_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return signerInvokeOperation(client, ctx, opID, params, []func(*signer_sdkv2.Options))
	case "simspaceweaver":
		client := simspaceweaver_sdkv2.NewFromConfig(cfg, func(o *simspaceweaver_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return simspaceweaverInvokeOperation(client, ctx, opID, params, []func(*simspaceweaver_sdkv2.Options))
	case "sms":
		client := sms_sdkv2.NewFromConfig(cfg, func(o *sms_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return smsInvokeOperation(client, ctx, opID, params, []func(*sms_sdkv2.Options))
	case "snowball":
		client := snowball_sdkv2.NewFromConfig(cfg, func(o *snowball_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return snowballInvokeOperation(client, ctx, opID, params, []func(*snowball_sdkv2.Options))
	case "snowdevicemanagement":
		client := snowdevicemanagement_sdkv2.NewFromConfig(cfg, func(o *snowdevicemanagement_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return snowdevicemanagementInvokeOperation(client, ctx, opID, params, []func(*snowdevicemanagement_sdkv2.Options))
	case "sns":
		client := sns_sdkv2.NewFromConfig(cfg, func(o *sns_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return snsInvokeOperation(client, ctx, opID, params, []func(*sns_sdkv2.Options))
	case "sqs":
		client := sqs_sdkv2.NewFromConfig(cfg, func(o *sqs_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return sqsInvokeOperation(client, ctx, opID, params, []func(*sqs_sdkv2.Options))
	case "ssm":
		client := ssm_sdkv2.NewFromConfig(cfg, func(o *ssm_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return ssmInvokeOperation(client, ctx, opID, params, []func(*ssm_sdkv2.Options))
	case "ssmcontacts":
		client := ssmcontacts_sdkv2.NewFromConfig(cfg, func(o *ssmcontacts_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return ssmcontactsInvokeOperation(client, ctx, opID, params, []func(*ssmcontacts_sdkv2.Options))
	case "ssmincidents":
		client := ssmincidents_sdkv2.NewFromConfig(cfg, func(o *ssmincidents_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return ssmincidentsInvokeOperation(client, ctx, opID, params, []func(*ssmincidents_sdkv2.Options))
	case "ssmsap":
		client := ssmsap_sdkv2.NewFromConfig(cfg, func(o *ssmsap_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return ssmsapInvokeOperation(client, ctx, opID, params, []func(*ssmsap_sdkv2.Options))
	case "sso":
		client := sso_sdkv2.NewFromConfig(cfg, func(o *sso_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return ssoInvokeOperation(client, ctx, opID, params, []func(*sso_sdkv2.Options))
	case "ssoadmin":
		client := ssoadmin_sdkv2.NewFromConfig(cfg, func(o *ssoadmin_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return ssoadminInvokeOperation(client, ctx, opID, params, []func(*ssoadmin_sdkv2.Options))
	case "ssooidc":
		client := ssooidc_sdkv2.NewFromConfig(cfg, func(o *ssooidc_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return ssooidcInvokeOperation(client, ctx, opID, params, []func(*ssooidc_sdkv2.Options))
	case "storagegateway":
		client := storagegateway_sdkv2.NewFromConfig(cfg, func(o *storagegateway_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return storagegatewayInvokeOperation(client, ctx, opID, params, []func(*storagegateway_sdkv2.Options))
	case "sts":
		client := sts_sdkv2.NewFromConfig(cfg, func(o *sts_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return stsInvokeOperation(client, ctx, opID, params, []func(*sts_sdkv2.Options))
	case "supplychain":
		client := supplychain_sdkv2.NewFromConfig(cfg, func(o *supplychain_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return supplychainInvokeOperation(client, ctx, opID, params, []func(*supplychain_sdkv2.Options))
	case "support":
		client := support_sdkv2.NewFromConfig(cfg, func(o *support_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return supportInvokeOperation(client, ctx, opID, params, []func(*support_sdkv2.Options))
	case "supportapp":
		client := supportapp_sdkv2.NewFromConfig(cfg, func(o *supportapp_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return supportappInvokeOperation(client, ctx, opID, params, []func(*supportapp_sdkv2.Options))
	case "swf":
		client := swf_sdkv2.NewFromConfig(cfg, func(o *swf_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return swfInvokeOperation(client, ctx, opID, params, []func(*swf_sdkv2.Options))
	case "synthetics":
		client := synthetics_sdkv2.NewFromConfig(cfg, func(o *synthetics_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return syntheticsInvokeOperation(client, ctx, opID, params, []func(*synthetics_sdkv2.Options))
	case "taxsettings":
		client := taxsettings_sdkv2.NewFromConfig(cfg, func(o *taxsettings_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return taxsettingsInvokeOperation(client, ctx, opID, params, []func(*taxsettings_sdkv2.Options))
	case "textract":
		client := textract_sdkv2.NewFromConfig(cfg, func(o *textract_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return textractInvokeOperation(client, ctx, opID, params, []func(*textract_sdkv2.Options))
	case "timestreaminfluxdb":
		client := timestreaminfluxdb_sdkv2.NewFromConfig(cfg, func(o *timestreaminfluxdb_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return timestreaminfluxdbInvokeOperation(client, ctx, opID, params, []func(*timestreaminfluxdb_sdkv2.Options))
	case "timestreamquery":
		client := timestreamquery_sdkv2.NewFromConfig(cfg, func(o *timestreamquery_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return timestreamqueryInvokeOperation(client, ctx, opID, params, []func(*timestreamquery_sdkv2.Options))
	case "timestreamwrite":
		client := timestreamwrite_sdkv2.NewFromConfig(cfg, func(o *timestreamwrite_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return timestreamwriteInvokeOperation(client, ctx, opID, params, []func(*timestreamwrite_sdkv2.Options))
	case "tnb":
		client := tnb_sdkv2.NewFromConfig(cfg, func(o *tnb_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return tnbInvokeOperation(client, ctx, opID, params, []func(*tnb_sdkv2.Options))
	case "transcribe":
		client := transcribe_sdkv2.NewFromConfig(cfg, func(o *transcribe_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return transcribeInvokeOperation(client, ctx, opID, params, []func(*transcribe_sdkv2.Options))
	case "transcribestreaming":
		client := transcribestreaming_sdkv2.NewFromConfig(cfg, func(o *transcribestreaming_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return transcribestreamingInvokeOperation(client, ctx, opID, params, []func(*transcribestreaming_sdkv2.Options))
	case "transfer":
		client := transfer_sdkv2.NewFromConfig(cfg, func(o *transfer_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return transferInvokeOperation(client, ctx, opID, params, []func(*transfer_sdkv2.Options))
	case "translate":
		client := translate_sdkv2.NewFromConfig(cfg, func(o *translate_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return translateInvokeOperation(client, ctx, opID, params, []func(*translate_sdkv2.Options))
	case "trustedadvisor":
		client := trustedadvisor_sdkv2.NewFromConfig(cfg, func(o *trustedadvisor_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return trustedadvisorInvokeOperation(client, ctx, opID, params, []func(*trustedadvisor_sdkv2.Options))
	case "verifiedpermissions":
		client := verifiedpermissions_sdkv2.NewFromConfig(cfg, func(o *verifiedpermissions_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return verifiedpermissionsInvokeOperation(client, ctx, opID, params, []func(*verifiedpermissions_sdkv2.Options))
	case "voiceid":
		client := voiceid_sdkv2.NewFromConfig(cfg, func(o *voiceid_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return voiceidInvokeOperation(client, ctx, opID, params, []func(*voiceid_sdkv2.Options))
	case "vpclattice":
		client := vpclattice_sdkv2.NewFromConfig(cfg, func(o *vpclattice_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return vpclatticeInvokeOperation(client, ctx, opID, params, []func(*vpclattice_sdkv2.Options))
	case "waf":
		client := waf_sdkv2.NewFromConfig(cfg, func(o *waf_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return wafInvokeOperation(client, ctx, opID, params, []func(*waf_sdkv2.Options))
	case "wafregional":
		client := wafregional_sdkv2.NewFromConfig(cfg, func(o *wafregional_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return wafregionalInvokeOperation(client, ctx, opID, params, []func(*wafregional_sdkv2.Options))
	case "wafv2":
		client := wafv2_sdkv2.NewFromConfig(cfg, func(o *wafv2_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return wafv2InvokeOperation(client, ctx, opID, params, []func(*wafv2_sdkv2.Options))
	case "wellarchitected":
		client := wellarchitected_sdkv2.NewFromConfig(cfg, func(o *wellarchitected_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return wellarchitectedInvokeOperation(client, ctx, opID, params, []func(*wellarchitected_sdkv2.Options))
	case "wisdom":
		client := wisdom_sdkv2.NewFromConfig(cfg, func(o *wisdom_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return wisdomInvokeOperation(client, ctx, opID, params, []func(*wisdom_sdkv2.Options))
	case "workdocs":
		client := workdocs_sdkv2.NewFromConfig(cfg, func(o *workdocs_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return workdocsInvokeOperation(client, ctx, opID, params, []func(*workdocs_sdkv2.Options))
	case "worklink":
		client := worklink_sdkv2.NewFromConfig(cfg, func(o *worklink_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return worklinkInvokeOperation(client, ctx, opID, params, []func(*worklink_sdkv2.Options))
	case "workmail":
		client := workmail_sdkv2.NewFromConfig(cfg, func(o *workmail_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return workmailInvokeOperation(client, ctx, opID, params, []func(*workmail_sdkv2.Options))
	case "workmailmessageflow":
		client := workmailmessageflow_sdkv2.NewFromConfig(cfg, func(o *workmailmessageflow_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return workmailmessageflowInvokeOperation(client, ctx, opID, params, []func(*workmailmessageflow_sdkv2.Options))
	case "workspaces":
		client := workspaces_sdkv2.NewFromConfig(cfg, func(o *workspaces_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return workspacesInvokeOperation(client, ctx, opID, params, []func(*workspaces_sdkv2.Options))
	case "workspacesthinclient":
		client := workspacesthinclient_sdkv2.NewFromConfig(cfg, func(o *workspacesthinclient_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return workspacesthinclientInvokeOperation(client, ctx, opID, params, []func(*workspacesthinclient_sdkv2.Options))
	case "workspacesweb":
		client := workspacesweb_sdkv2.NewFromConfig(cfg, func(o *workspacesweb_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return workspaceswebInvokeOperation(client, ctx, opID, params, []func(*workspacesweb_sdkv2.Options))
	case "xray":
		client := xray_sdkv2.NewFromConfig(cfg, func(o *xray_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return xrayInvokeOperation(client, ctx, opID, params, []func(*xray_sdkv2.Options))
	default:
		return nil, nil, errors.New("Unmatched SDK client %s", service)
	}
}
