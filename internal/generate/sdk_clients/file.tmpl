// Code generated by internal/generate/sdk_clients/main.go; DO NOT EDIT.

package {{ .PackageName }}

import (
	"context"
	"errors"
	_ "unsafe"

	aws_sdkv2 "github.com/aws/aws-sdk-go-v2/aws"
{{- range .Services }}
	{{ .ServiceName }}_sdkv2 "github.com/aws/aws-sdk-go-v2/service/{{ .ServiceName }}"
{{- end }}
	"github.com/aws/smithy-go/middleware"
)

{{- range .Services }}

//go:linkname {{ .ServiceName }}InvokeOperation github.com/aws/aws-sdk-go-v2/service/{{ .ServiceName }}.(*Client).invokeOperation
func {{ .ServiceName }}InvokeOperation(*{{ .ServiceName }}_sdkv2.Client, context.Context, string, interface{}, []func(*{{ .ServiceName }}_sdkv2.Options), ...func(*middleware.Stack, {{ .ServiceName }}_sdkv2.Options) error) (interface{}, middleware.Metadata, error)
{{- end }}

func InvokeOperation(ctx context.Context, service, opID string, params interface{}, config map[string]any) (result interface{}, metadata middleware.Metadata, err error) {
	cfg := *(config["aws_sdkv2_config"].(*aws_sdkv2.Config))

	switch service {
{{- range .Services }}
	case "{{ .ServiceName }}":
		client := {{ .ServiceName }}_sdkv2.NewFromConfig(cfg, func(o *{{ .ServiceName }}_sdkv2.Options) {
			if endpoint := config["endpoint"].(string); endpoint != "" {
				tflog.Debug(ctx, "setting endpoint", map[string]any{
					"tf_aws.endpoint": endpoint,
				})
				o.BaseEndpoint = aws_sdkv2.String(endpoint)

				if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
					tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
					o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
				}
			}
		})
		return {{ .ServiceName }}InvokeOperation(client, ctx, opID, params, []func(*{{ .ServiceName }}_sdkv2.Options))
{{- end }}
	default:
		return nil, nil, errors.New("Unmatched SDK client %s", service)
	}
}
